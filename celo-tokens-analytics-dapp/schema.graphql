type Borrow @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  blockTimestamp: BigInt! # uint256
  reserve: Bytes! # address
  user: Bytes! # address
  onBehalfOf: Bytes! # address
  amount: BigInt! # uint256
  borrowRateMode: BigInt! # uint256
  borrowRate: BigInt! # uint256
  referral: Int! # uint16
}

type Deposit @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  blockTimestamp: BigInt! # uint256
  reserve: Bytes! # address
  user: Bytes! # address
  onBehalfOf: Bytes! # address
  amount: BigInt! # uint256
  referral: Int! # uint16
}

type FlashLoan @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  blockTimestamp: BigInt! # uint256
  target: Bytes! # address
  initiator: Bytes! # address
  asset: Bytes! # address
  amount: BigInt! # uint256
  premium: BigInt! # uint256
  referralCode: Int! # uint16
}

type Repay @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  blockTimestamp: BigInt! # uint256
  reserve: Bytes! # address
  user: Bytes! # address
  repayer: Bytes! # address
  amount: BigInt! # uint256
}

type Swap @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  blockTimestamp: BigInt! # uint256
  reserve: Bytes! # address
  user: Bytes! # address
  rateMode: BigInt! # uint256
}

type Withdraw @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  blockTimestamp: BigInt! # uint256
  reserve: Bytes! # address
  user: Bytes! # address
  to: Bytes! # address
  amount: BigInt! # uint256
}

type BorrowAllowanceDelegated @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  blockTimestamp: BigInt! # uint256
  fromUser: Bytes! # address
  toUser: Bytes! # address
  asset: Bytes! # address
  amount: BigInt! # uint256
}

interface UserTransaction {
  id: ID!
  user: User!
  timestamp: Int!
}

type AToken @entity {
  """
  AToken address
  """
  id: ID!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
}

type UserReserve @entity {
  """
  user address + reserve address
  """
  id: ID!
  reserve: Reserve!
  user: User!
  scaledATokenBalance: BigInt!
  currentATokenBalance: BigInt!
  scaledVariableDebt: BigInt!
  currentVariableDebt: BigInt!
  principalStableDebt: BigInt!
  currentStableDebt: BigInt!
  currentTotalDebt: BigInt!
  liquidityRate: BigInt!
  lastUpdateTimestamp: Int!
  usageAsCollateralEnabled: Boolean!
}

type User @entity {
  """
  user address
  """
  id: ID!
  reserves: [UserReserve!]! @derivedFrom(field: "user")
}

type Reserve @entity {
  """
  Reserve address
  """
  id: ID!
  underlyingAsset: Bytes!
  symbol: String!
  name: String!
  decimals: Int!
  reserveLiquidationThreshold: BigInt!
  reserveLiquidationBonus: BigInt!
  totalATokenSupply: BigInt!
  totalPrincipalStableDebt: BigInt! # default: 0
  totalScaledVariableDebt: BigInt! # default: 0
  totalCurrentVariableDebt: BigInt! # default: 0
  totalDeposits: BigInt! # default: 0
  lastUpdateTimestamp: Int!
  liquidityRate: BigInt!
  userReserves: [UserReserve!]! @derivedFrom(field: "reserve")
}

type UsageAsCollateral implements UserTransaction @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  timestamp: Int!
}

type SToken @entity {
  """
  SToken address
  """
  id: ID!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
}

type VToken @entity {
  """
  VToken address
  """
  id: ID!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
}

type StableTokenDelegatedAllowance @entity {
  """
  stable + fromuser address + touser address+ reserve address
  """
  id: ID!
  fromUser: User!
  toUser: User!
  amountAllowed: BigInt!
  userReserve: UserReserve!
}

type VariableTokenDelegatedAllowance @entity {
  """
  variable + fromuser address + touser address+ reserve address
  """
  id: ID!
  fromUser: User!
  toUser: User!
  amountAllowed: BigInt!
  userReserve: UserReserve!
}
