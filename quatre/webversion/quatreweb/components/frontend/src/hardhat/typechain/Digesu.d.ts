/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DigesuInterface extends ethers.utils.Interface {
  functions: {
    "allPools()": FunctionFragment;
    "cancelBand(uint256)": FunctionFragment;
    "cr()": FunctionFragment;
    "createPrivatePool(uint8,uint16,address[],address,uint256)": FunctionFragment;
    "createPublicPool(uint8,uint8,uint16,uint256,address)": FunctionFragment;
    "creationFee()": FunctionFragment;
    "enquireLiquidation(uint256)": FunctionFragment;
    "getFinance(uint256)": FunctionFragment;
    "joinABand(uint256)": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "manager()": FunctionFragment;
    "minimumPoolAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "payback(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "roundUp(uint256)": FunctionFragment;
    "setParams(address,uint256,address,address)": FunctionFragment;
    "setSupportedTokens(address)": FunctionFragment;
    "supportedToken(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateMinPoolAmount(uint256)": FunctionFragment;
    "updatePublicData(address,address,uint8,uint8)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "allPools", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelBand",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPrivatePool",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPublicPool",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "creationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enquireLiquidation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFinance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinABand",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumPoolAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payback",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMinPoolAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePublicData",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelBand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPrivatePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPublicPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enquireLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFinance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinABand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumPoolAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roundUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMinPoolAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePublicData",
    data: BytesLike
  ): Result;

  events: {
    "AccountLaunched(address,address)": EventFragment;
    "BandCreated(uint256,tuple)": EventFragment;
    "Cancellation(uint256,uint256,address)": EventFragment;
    "GetFinanced(uint256,uint256,address)": EventFragment;
    "Joined(uint256,address,uint256)": EventFragment;
    "NewAccount(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Payback(uint256,uint256,address)": EventFragment;
    "Rekeyed(address,address)": EventFragment;
    "RoundUp(uint256,tuple)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountLaunched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BandCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancellation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetFinanced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Joined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rekeyed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class Digesu extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DigesuInterface;

  functions: {
    allPools(overrides?: CallOverrides): Promise<{
      0: {
        uints: {
          mode: number;
          quorum: BigNumber;
          selector: BigNumber;
          ccr: BigNumber;
          duration: BigNumber;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
        };
        uint256s: {
          unit: BigNumber;
          receivable: BigNumber;
          currentPool: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
        };
        addrs: { asset: string; lastPaid: string; 0: string; 1: string };
        mems: string[];
        allGh: BigNumber;
        0: {
          mode: number;
          quorum: BigNumber;
          selector: BigNumber;
          ccr: BigNumber;
          duration: BigNumber;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
        };
        1: {
          unit: BigNumber;
          receivable: BigNumber;
          currentPool: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
        };
        2: { asset: string; lastPaid: string; 0: string; 1: string };
        3: string[];
        4: BigNumber;
      }[];
    }>;

    "allPools()"(overrides?: CallOverrides): Promise<{
      0: {
        uints: {
          mode: number;
          quorum: BigNumber;
          selector: BigNumber;
          ccr: BigNumber;
          duration: BigNumber;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
        };
        uint256s: {
          unit: BigNumber;
          receivable: BigNumber;
          currentPool: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
        };
        addrs: { asset: string; lastPaid: string; 0: string; 1: string };
        mems: string[];
        allGh: BigNumber;
        0: {
          mode: number;
          quorum: BigNumber;
          selector: BigNumber;
          ccr: BigNumber;
          duration: BigNumber;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
        };
        1: {
          unit: BigNumber;
          receivable: BigNumber;
          currentPool: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
        };
        2: { asset: string; lastPaid: string; 0: string; 1: string };
        3: string[];
        4: BigNumber;
      }[];
    }>;

    cancelBand(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelBand(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cr(overrides?: CallOverrides): Promise<{
      totalValueContributed: BigNumber;
      subscribers: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "cr()"(overrides?: CallOverrides): Promise<{
      totalValueContributed: BigNumber;
      subscribers: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    createPrivatePool(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPrivatePool(uint8,uint16,address[],address,uint256)"(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createPublicPool(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPublicPool(uint8,uint8,uint16,uint256,address)"(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    creationFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "creationFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    enquireLiquidation(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        index: BigNumber;
        who: string;
        expectedRepaymentTime: BigNumber;
        debt: BigNumber;
        colBalInToken: BigNumber;
        0: BigNumber;
        1: string;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
    }>;

    "enquireLiquidation(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        index: BigNumber;
        who: string;
        expectedRepaymentTime: BigNumber;
        debt: BigNumber;
        colBalInToken: BigNumber;
        0: BigNumber;
        1: string;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
    }>;

    getFinance(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getFinance(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    joinABand(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "joinABand(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidate(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidate(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "manager()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    minimumPoolAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minimumPoolAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    payback(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "payback(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    roundUp(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "roundUp(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setParams(
      _token: string,
      _minimumPoolAmount: BigNumberish,
      feeTo: string,
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setParams(address,uint256,address,address)"(
      _token: string,
      _minimumPoolAmount: BigNumberish,
      feeTo: string,
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSupportedTokens(
      newToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSupportedTokens(address)"(
      newToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportedToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportedToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    updateMinPoolAmount(
      newAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMinPoolAmount(uint256)"(
      newAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePublicData(
      feeTo: string,
      token: string,
      penFee: BigNumberish,
      makerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePublicData(address,address,uint8,uint8)"(
      feeTo: string,
      token: string,
      penFee: BigNumberish,
      makerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allPools(
    overrides?: CallOverrides
  ): Promise<
    {
      uints: {
        mode: number;
        quorum: BigNumber;
        selector: BigNumber;
        ccr: BigNumber;
        duration: BigNumber;
        0: number;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
      uint256s: {
        unit: BigNumber;
        receivable: BigNumber;
        currentPool: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
      addrs: { asset: string; lastPaid: string; 0: string; 1: string };
      mems: string[];
      allGh: BigNumber;
      0: {
        mode: number;
        quorum: BigNumber;
        selector: BigNumber;
        ccr: BigNumber;
        duration: BigNumber;
        0: number;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
      1: {
        unit: BigNumber;
        receivable: BigNumber;
        currentPool: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
      2: { asset: string; lastPaid: string; 0: string; 1: string };
      3: string[];
      4: BigNumber;
    }[]
  >;

  "allPools()"(
    overrides?: CallOverrides
  ): Promise<
    {
      uints: {
        mode: number;
        quorum: BigNumber;
        selector: BigNumber;
        ccr: BigNumber;
        duration: BigNumber;
        0: number;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
      uint256s: {
        unit: BigNumber;
        receivable: BigNumber;
        currentPool: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
      addrs: { asset: string; lastPaid: string; 0: string; 1: string };
      mems: string[];
      allGh: BigNumber;
      0: {
        mode: number;
        quorum: BigNumber;
        selector: BigNumber;
        ccr: BigNumber;
        duration: BigNumber;
        0: number;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
      1: {
        unit: BigNumber;
        receivable: BigNumber;
        currentPool: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
      2: { asset: string; lastPaid: string; 0: string; 1: string };
      3: string[];
      4: BigNumber;
    }[]
  >;

  cancelBand(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelBand(uint256)"(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cr(overrides?: CallOverrides): Promise<{
    totalValueContributed: BigNumber;
    subscribers: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "cr()"(overrides?: CallOverrides): Promise<{
    totalValueContributed: BigNumber;
    subscribers: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  createPrivatePool(
    durationIndays: BigNumberish,
    colCoverateRatio: BigNumberish,
    members: string[],
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPrivatePool(uint8,uint16,address[],address,uint256)"(
    durationIndays: BigNumberish,
    colCoverateRatio: BigNumberish,
    members: string[],
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createPublicPool(
    quorum: BigNumberish,
    durationInDays: BigNumberish,
    colCoverageRatio: BigNumberish,
    amount: BigNumberish,
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPublicPool(uint8,uint8,uint16,uint256,address)"(
    quorum: BigNumberish,
    durationInDays: BigNumberish,
    colCoverageRatio: BigNumberish,
    amount: BigNumberish,
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  creationFee(overrides?: CallOverrides): Promise<BigNumber>;

  "creationFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  enquireLiquidation(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    index: BigNumber;
    who: string;
    expectedRepaymentTime: BigNumber;
    debt: BigNumber;
    colBalInToken: BigNumber;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "enquireLiquidation(uint256)"(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    index: BigNumber;
    who: string;
    expectedRepaymentTime: BigNumber;
    debt: BigNumber;
    colBalInToken: BigNumber;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  getFinance(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getFinance(uint256)"(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  joinABand(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "joinABand(uint256)"(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidate(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidate(uint256)"(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  "manager()"(overrides?: CallOverrides): Promise<string>;

  minimumPoolAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumPoolAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  payback(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "payback(uint256)"(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  roundUp(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "roundUp(uint256)"(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setParams(
    _token: string,
    _minimumPoolAmount: BigNumberish,
    feeTo: string,
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setParams(address,uint256,address,address)"(
    _token: string,
    _minimumPoolAmount: BigNumberish,
    feeTo: string,
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSupportedTokens(
    newToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSupportedTokens(address)"(
    newToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportedToken(_token: string, overrides?: CallOverrides): Promise<boolean>;

  "supportedToken(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  updateMinPoolAmount(
    newAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMinPoolAmount(uint256)"(
    newAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePublicData(
    feeTo: string,
    token: string,
    penFee: BigNumberish,
    makerFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePublicData(address,address,uint8,uint8)"(
    feeTo: string,
    token: string,
    penFee: BigNumberish,
    makerFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    allPools(
      overrides?: CallOverrides
    ): Promise<
      {
        uints: {
          mode: number;
          quorum: BigNumber;
          selector: BigNumber;
          ccr: BigNumber;
          duration: BigNumber;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
        };
        uint256s: {
          unit: BigNumber;
          receivable: BigNumber;
          currentPool: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
        };
        addrs: { asset: string; lastPaid: string; 0: string; 1: string };
        mems: string[];
        allGh: BigNumber;
        0: {
          mode: number;
          quorum: BigNumber;
          selector: BigNumber;
          ccr: BigNumber;
          duration: BigNumber;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
        };
        1: {
          unit: BigNumber;
          receivable: BigNumber;
          currentPool: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
        };
        2: { asset: string; lastPaid: string; 0: string; 1: string };
        3: string[];
        4: BigNumber;
      }[]
    >;

    "allPools()"(
      overrides?: CallOverrides
    ): Promise<
      {
        uints: {
          mode: number;
          quorum: BigNumber;
          selector: BigNumber;
          ccr: BigNumber;
          duration: BigNumber;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
        };
        uint256s: {
          unit: BigNumber;
          receivable: BigNumber;
          currentPool: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
        };
        addrs: { asset: string; lastPaid: string; 0: string; 1: string };
        mems: string[];
        allGh: BigNumber;
        0: {
          mode: number;
          quorum: BigNumber;
          selector: BigNumber;
          ccr: BigNumber;
          duration: BigNumber;
          0: number;
          1: BigNumber;
          2: BigNumber;
          3: BigNumber;
          4: BigNumber;
        };
        1: {
          unit: BigNumber;
          receivable: BigNumber;
          currentPool: BigNumber;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
        };
        2: { asset: string; lastPaid: string; 0: string; 1: string };
        3: string[];
        4: BigNumber;
      }[]
    >;

    cancelBand(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "cancelBand(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cr(overrides?: CallOverrides): Promise<{
      totalValueContributed: BigNumber;
      subscribers: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "cr()"(overrides?: CallOverrides): Promise<{
      totalValueContributed: BigNumber;
      subscribers: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    createPrivatePool(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "createPrivatePool(uint8,uint16,address[],address,uint256)"(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createPublicPool(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "createPublicPool(uint8,uint8,uint16,uint256,address)"(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    creationFee(overrides?: CallOverrides): Promise<BigNumber>;

    "creationFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    enquireLiquidation(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      index: BigNumber;
      who: string;
      expectedRepaymentTime: BigNumber;
      debt: BigNumber;
      colBalInToken: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "enquireLiquidation(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      index: BigNumber;
      who: string;
      expectedRepaymentTime: BigNumber;
      debt: BigNumber;
      colBalInToken: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    getFinance(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getFinance(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinABand(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "joinABand(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidate(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "liquidate(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    manager(overrides?: CallOverrides): Promise<string>;

    "manager()"(overrides?: CallOverrides): Promise<string>;

    minimumPoolAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumPoolAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    payback(poolId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "payback(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    roundUp(poolId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "roundUp(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setParams(
      _token: string,
      _minimumPoolAmount: BigNumberish,
      feeTo: string,
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setParams(address,uint256,address,address)"(
      _token: string,
      _minimumPoolAmount: BigNumberish,
      feeTo: string,
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupportedTokens(
      newToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSupportedTokens(address)"(
      newToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedToken(_token: string, overrides?: CallOverrides): Promise<boolean>;

    "supportedToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    updateMinPoolAmount(
      newAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMinPoolAmount(uint256)"(
      newAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePublicData(
      feeTo: string,
      token: string,
      penFee: BigNumberish,
      makerFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePublicData(address,address,uint8,uint8)"(
      feeTo: string,
      token: string,
      penFee: BigNumberish,
      makerFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AccountLaunched(
      undefined: string | null,
      undefined: string | null
    ): EventFilter;

    BandCreated(undefined: null, undefined: null): EventFilter;

    Cancellation(poolId: null, unit: null, alc: null): EventFilter;

    GetFinanced(undefined: null, undefined: null, undefined: null): EventFilter;

    Joined(undefined: null, undefined: null, undefined: null): EventFilter;

    NewAccount(
      undefined: string | null,
      undefined: string | null,
      undefined: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    Payback(
      undefined: null,
      undefined: null,
      undefined: string | null
    ): EventFilter;

    Rekeyed(undefined: string | null, undefined: string | null): EventFilter;

    RoundUp(undefined: null, undefined: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    allPools(overrides?: CallOverrides): Promise<BigNumber>;

    "allPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelBand(poolId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "cancelBand(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cr(overrides?: CallOverrides): Promise<BigNumber>;

    "cr()"(overrides?: CallOverrides): Promise<BigNumber>;

    createPrivatePool(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPrivatePool(uint8,uint16,address[],address,uint256)"(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createPublicPool(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPublicPool(uint8,uint8,uint16,uint256,address)"(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    creationFee(overrides?: CallOverrides): Promise<BigNumber>;

    "creationFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    enquireLiquidation(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "enquireLiquidation(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFinance(poolId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "getFinance(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    joinABand(poolId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "joinABand(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidate(poolId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "liquidate(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    "manager()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumPoolAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumPoolAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    payback(poolId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "payback(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    roundUp(poolId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "roundUp(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setParams(
      _token: string,
      _minimumPoolAmount: BigNumberish,
      feeTo: string,
      _manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setParams(address,uint256,address,address)"(
      _token: string,
      _minimumPoolAmount: BigNumberish,
      feeTo: string,
      _manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSupportedTokens(
      newToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSupportedTokens(address)"(
      newToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportedToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportedToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    updateMinPoolAmount(
      newAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMinPoolAmount(uint256)"(
      newAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePublicData(
      feeTo: string,
      token: string,
      penFee: BigNumberish,
      makerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePublicData(address,address,uint8,uint8)"(
      feeTo: string,
      token: string,
      penFee: BigNumberish,
      makerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allPools()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelBand(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelBand(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPrivatePool(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPrivatePool(uint8,uint16,address[],address,uint256)"(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createPublicPool(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPublicPool(uint8,uint8,uint16,uint256,address)"(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    creationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "creationFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enquireLiquidation(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "enquireLiquidation(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFinance(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getFinance(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    joinABand(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "joinABand(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidate(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "manager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumPoolAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minimumPoolAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payback(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "payback(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    roundUp(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "roundUp(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setParams(
      _token: string,
      _minimumPoolAmount: BigNumberish,
      feeTo: string,
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setParams(address,uint256,address,address)"(
      _token: string,
      _minimumPoolAmount: BigNumberish,
      feeTo: string,
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSupportedTokens(
      newToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSupportedTokens(address)"(
      newToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportedToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportedToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    updateMinPoolAmount(
      newAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMinPoolAmount(uint256)"(
      newAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePublicData(
      feeTo: string,
      token: string,
      penFee: BigNumberish,
      makerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePublicData(address,address,uint8,uint8)"(
      feeTo: string,
      token: string,
      penFee: BigNumberish,
      makerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
