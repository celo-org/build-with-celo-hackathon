/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SimpleProxyContractInterface extends ethers.utils.Interface {
  functions: {
    "addMember(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getTokenAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendTokens(address,uint256)": FunctionFragment;
    "setTokenAddress(address)": FunctionFragment;
    "setWalletMembers(address[])": FunctionFragment;
    "totalMembers()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addMember", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWalletMembers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWalletMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddedMember(address)": EventFragment;
    "Distributed(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReceivedToken(address,uint256)": EventFragment;
    "SetERCToken(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Distributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetERCToken"): EventFragment;
}

export class SimpleProxyContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SimpleProxyContractInterface;

  functions: {
    addMember(
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addMember(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTokenAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getTokenAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    sendTokens(
      _from: string,
      tokens: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "sendTokens(address,uint256)"(
      _from: string,
      tokens: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    setTokenAddress(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenAddress(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWalletMembers(
      members: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWalletMembers(address[])"(
      members: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalMembers(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalMembers()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addMember(
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addMember(address)"(
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenAddress(overrides?: CallOverrides): Promise<string>;

  "getTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  sendTokens(
    _from: string,
    tokens: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "sendTokens(address,uint256)"(
    _from: string,
    tokens: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  setTokenAddress(
    _tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenAddress(address)"(
    _tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWalletMembers(
    members: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWalletMembers(address[])"(
    members: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalMembers(overrides?: CallOverrides): Promise<BigNumber>;

  "totalMembers()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addMember(_account: string, overrides?: CallOverrides): Promise<boolean>;

    "addMember(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAddress(overrides?: CallOverrides): Promise<string>;

    "getTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    sendTokens(
      _from: string,
      tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "sendTokens(address,uint256)"(
      _from: string,
      tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setTokenAddress(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setTokenAddress(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setWalletMembers(
      members: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setWalletMembers(address[])"(
      members: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalMembers(overrides?: CallOverrides): Promise<BigNumber>;

    "totalMembers()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddedMember(_member: null): EventFilter;

    Distributed(_owner: null, _token: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ReceivedToken(_from: null, _tokens: null): EventFilter;

    SetERCToken(token: null): EventFilter;
  };

  estimateGas: {
    addMember(_account: string, overrides?: Overrides): Promise<BigNumber>;

    "addMember(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    sendTokens(
      _from: string,
      tokens: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "sendTokens(address,uint256)"(
      _from: string,
      tokens: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    setTokenAddress(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenAddress(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWalletMembers(
      members: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWalletMembers(address[])"(
      members: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalMembers(overrides?: CallOverrides): Promise<BigNumber>;

    "totalMembers()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMember(
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addMember(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    sendTokens(
      _from: string,
      tokens: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "sendTokens(address,uint256)"(
      _from: string,
      tokens: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    setTokenAddress(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenAddress(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWalletMembers(
      members: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWalletMembers(address[])"(
      members: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalMembers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
