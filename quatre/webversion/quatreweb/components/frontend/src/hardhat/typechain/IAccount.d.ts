/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAccountInterface extends ethers.utils.Interface {
  functions: {
    "clearSubscription(uint256)": FunctionFragment;
    "depositERC20Token(address,uint256)": FunctionFragment;
    "getSpendableBalance(address)": FunctionFragment;
    "getSubscriptionInfo(uint256)": FunctionFragment;
    "initializeInfo(tuple,bool,bool,uint256,uint256,address,address)": FunctionFragment;
    "rekey(address)": FunctionFragment;
    "setStatus(uint256,bool,bool)": FunctionFragment;
    "split(uint256,address,address[],address,uint256,uint256)": FunctionFragment;
    "updateBalancesInUse(address,uint256,bool)": FunctionFragment;
    "updateTurnTime(uint256)": FunctionFragment;
    "withdrawRouterOnly(address,address,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "clearSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20Token",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpendableBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeInfo",
    values: [
      {
        position: BigNumberish;
        payDate: BigNumberish;
        turnTime: BigNumberish;
        owings: BigNumberish;
        reward: BigNumberish;
        colBals: BigNumberish;
        isAdmin: boolean;
        isMember: boolean;
        hasGH: boolean;
      },
      boolean,
      boolean,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "rekey", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStatus",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "split",
    values: [BigNumberish, string, string[], string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBalancesInUse",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTurnTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRouterOnly",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "clearSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpendableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rekey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBalancesInUse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTurnTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRouterOnly",
    data: BytesLike
  ): Result;

  events: {
    "AccountLaunched(address,address)": EventFragment;
    "BandCreated(uint256,tuple)": EventFragment;
    "GetFinanced(uint256,uint256,address)": EventFragment;
    "Joined(uint256,address,uint256)": EventFragment;
    "NewAccount(address,address,uint256)": EventFragment;
    "Payback(uint256,uint256,address)": EventFragment;
    "Rekeyed(address,address)": EventFragment;
    "RoundUp(uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountLaunched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BandCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetFinanced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Joined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rekeyed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundUp"): EventFragment;
}

export class IAccount extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAccountInterface;

  functions: {
    clearSubscription(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "clearSubscription(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositERC20Token(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositERC20Token(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getSpendableBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getSpendableBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getSubscriptionInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        position: BigNumber;
        payDate: BigNumber;
        turnTime: BigNumber;
        owings: BigNumber;
        reward: BigNumber;
        colBals: BigNumber;
        isAdmin: boolean;
        isMember: boolean;
        hasGH: boolean;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: boolean;
        7: boolean;
        8: boolean;
      };
    }>;

    "getSubscriptionInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        position: BigNumber;
        payDate: BigNumber;
        turnTime: BigNumber;
        owings: BigNumber;
        reward: BigNumber;
        colBals: BigNumber;
        isAdmin: boolean;
        isMember: boolean;
        hasGH: boolean;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: boolean;
        7: boolean;
        8: boolean;
      };
    }>;

    initializeInfo(
      arg0: {
        position: BigNumberish;
        payDate: BigNumberish;
        turnTime: BigNumberish;
        owings: BigNumberish;
        reward: BigNumberish;
        colBals: BigNumberish;
        isAdmin: boolean;
        isMember: boolean;
        hasGH: boolean;
      },
      arg1: boolean,
      arg2: boolean,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: string,
      arg6: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initializeInfo((uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,bool),bool,bool,uint256,uint256,address,address)"(
      arg0: {
        position: BigNumberish;
        payDate: BigNumberish;
        turnTime: BigNumberish;
        owings: BigNumberish;
        reward: BigNumberish;
        colBals: BigNumberish;
        isAdmin: boolean;
        isMember: boolean;
        hasGH: boolean;
      },
      arg1: boolean,
      arg2: boolean,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: string,
      arg6: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rekey(arg0: string, overrides?: Overrides): Promise<ContractTransaction>;

    "rekey(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStatus(
      arg0: BigNumberish,
      arg1: boolean,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStatus(uint256,bool,bool)"(
      arg0: BigNumberish,
      arg1: boolean,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    split(
      arg0: BigNumberish,
      arg1: string,
      arg2: string[],
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "split(uint256,address,address[],address,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string[],
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateBalancesInUse(
      arg0: string,
      arg1: BigNumberish,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateBalancesInUse(address,uint256,bool)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateTurnTime(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateTurnTime(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawRouterOnly(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawRouterOnly(address,address,address,uint256,uint256)"(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  clearSubscription(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "clearSubscription(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositERC20Token(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositERC20Token(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getSpendableBalance(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getSpendableBalance(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  getSubscriptionInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    position: BigNumber;
    payDate: BigNumber;
    turnTime: BigNumber;
    owings: BigNumber;
    reward: BigNumber;
    colBals: BigNumber;
    isAdmin: boolean;
    isMember: boolean;
    hasGH: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: boolean;
    7: boolean;
    8: boolean;
  }>;

  "getSubscriptionInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    position: BigNumber;
    payDate: BigNumber;
    turnTime: BigNumber;
    owings: BigNumber;
    reward: BigNumber;
    colBals: BigNumber;
    isAdmin: boolean;
    isMember: boolean;
    hasGH: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: boolean;
    7: boolean;
    8: boolean;
  }>;

  initializeInfo(
    arg0: {
      position: BigNumberish;
      payDate: BigNumberish;
      turnTime: BigNumberish;
      owings: BigNumberish;
      reward: BigNumberish;
      colBals: BigNumberish;
      isAdmin: boolean;
      isMember: boolean;
      hasGH: boolean;
    },
    arg1: boolean,
    arg2: boolean,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: string,
    arg6: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initializeInfo((uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,bool),bool,bool,uint256,uint256,address,address)"(
    arg0: {
      position: BigNumberish;
      payDate: BigNumberish;
      turnTime: BigNumberish;
      owings: BigNumberish;
      reward: BigNumberish;
      colBals: BigNumberish;
      isAdmin: boolean;
      isMember: boolean;
      hasGH: boolean;
    },
    arg1: boolean,
    arg2: boolean,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: string,
    arg6: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rekey(arg0: string, overrides?: Overrides): Promise<ContractTransaction>;

  "rekey(address)"(
    arg0: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStatus(
    arg0: BigNumberish,
    arg1: boolean,
    arg2: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStatus(uint256,bool,bool)"(
    arg0: BigNumberish,
    arg1: boolean,
    arg2: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  split(
    arg0: BigNumberish,
    arg1: string,
    arg2: string[],
    arg3: string,
    arg4: BigNumberish,
    arg5: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "split(uint256,address,address[],address,uint256,uint256)"(
    arg0: BigNumberish,
    arg1: string,
    arg2: string[],
    arg3: string,
    arg4: BigNumberish,
    arg5: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateBalancesInUse(
    arg0: string,
    arg1: BigNumberish,
    arg2: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateBalancesInUse(address,uint256,bool)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateTurnTime(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateTurnTime(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawRouterOnly(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawRouterOnly(address,address,address,uint256,uint256)"(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    clearSubscription(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "clearSubscription(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositERC20Token(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "depositERC20Token(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getSpendableBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getSpendableBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getSubscriptionInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      position: BigNumber;
      payDate: BigNumber;
      turnTime: BigNumber;
      owings: BigNumber;
      reward: BigNumber;
      colBals: BigNumber;
      isAdmin: boolean;
      isMember: boolean;
      hasGH: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: boolean;
      7: boolean;
      8: boolean;
    }>;

    "getSubscriptionInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      position: BigNumber;
      payDate: BigNumber;
      turnTime: BigNumber;
      owings: BigNumber;
      reward: BigNumber;
      colBals: BigNumber;
      isAdmin: boolean;
      isMember: boolean;
      hasGH: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: boolean;
      7: boolean;
      8: boolean;
    }>;

    initializeInfo(
      arg0: {
        position: BigNumberish;
        payDate: BigNumberish;
        turnTime: BigNumberish;
        owings: BigNumberish;
        reward: BigNumberish;
        colBals: BigNumberish;
        isAdmin: boolean;
        isMember: boolean;
        hasGH: boolean;
      },
      arg1: boolean,
      arg2: boolean,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: string,
      arg6: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initializeInfo((uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,bool),bool,bool,uint256,uint256,address,address)"(
      arg0: {
        position: BigNumberish;
        payDate: BigNumberish;
        turnTime: BigNumberish;
        owings: BigNumberish;
        reward: BigNumberish;
        colBals: BigNumberish;
        isAdmin: boolean;
        isMember: boolean;
        hasGH: boolean;
      },
      arg1: boolean,
      arg2: boolean,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: string,
      arg6: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rekey(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "rekey(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    setStatus(
      arg0: BigNumberish,
      arg1: boolean,
      arg2: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setStatus(uint256,bool,bool)"(
      arg0: BigNumberish,
      arg1: boolean,
      arg2: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    split(
      arg0: BigNumberish,
      arg1: string,
      arg2: string[],
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "split(uint256,address,address[],address,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string[],
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateBalancesInUse(
      arg0: string,
      arg1: BigNumberish,
      arg2: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateBalancesInUse(address,uint256,bool)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateTurnTime(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateTurnTime(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawRouterOnly(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdrawRouterOnly(address,address,address,uint256,uint256)"(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AccountLaunched(
      undefined: string | null,
      undefined: string | null
    ): EventFilter;

    BandCreated(undefined: null, undefined: null): EventFilter;

    GetFinanced(undefined: null, undefined: null, undefined: null): EventFilter;

    Joined(undefined: null, undefined: null, undefined: null): EventFilter;

    NewAccount(
      undefined: string | null,
      undefined: string | null,
      undefined: null
    ): EventFilter;

    Payback(
      undefined: null,
      undefined: null,
      undefined: string | null
    ): EventFilter;

    Rekeyed(undefined: string | null, undefined: string | null): EventFilter;

    RoundUp(undefined: null, undefined: null): EventFilter;
  };

  estimateGas: {
    clearSubscription(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "clearSubscription(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositERC20Token(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositERC20Token(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getSpendableBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSpendableBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubscriptionInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeInfo(
      arg0: {
        position: BigNumberish;
        payDate: BigNumberish;
        turnTime: BigNumberish;
        owings: BigNumberish;
        reward: BigNumberish;
        colBals: BigNumberish;
        isAdmin: boolean;
        isMember: boolean;
        hasGH: boolean;
      },
      arg1: boolean,
      arg2: boolean,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: string,
      arg6: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initializeInfo((uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,bool),bool,bool,uint256,uint256,address,address)"(
      arg0: {
        position: BigNumberish;
        payDate: BigNumberish;
        turnTime: BigNumberish;
        owings: BigNumberish;
        reward: BigNumberish;
        colBals: BigNumberish;
        isAdmin: boolean;
        isMember: boolean;
        hasGH: boolean;
      },
      arg1: boolean,
      arg2: boolean,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: string,
      arg6: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rekey(arg0: string, overrides?: Overrides): Promise<BigNumber>;

    "rekey(address)"(arg0: string, overrides?: Overrides): Promise<BigNumber>;

    setStatus(
      arg0: BigNumberish,
      arg1: boolean,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStatus(uint256,bool,bool)"(
      arg0: BigNumberish,
      arg1: boolean,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    split(
      arg0: BigNumberish,
      arg1: string,
      arg2: string[],
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "split(uint256,address,address[],address,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string[],
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateBalancesInUse(
      arg0: string,
      arg1: BigNumberish,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateBalancesInUse(address,uint256,bool)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateTurnTime(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateTurnTime(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawRouterOnly(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawRouterOnly(address,address,address,uint256,uint256)"(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clearSubscription(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "clearSubscription(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositERC20Token(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositERC20Token(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getSpendableBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSpendableBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubscriptionInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeInfo(
      arg0: {
        position: BigNumberish;
        payDate: BigNumberish;
        turnTime: BigNumberish;
        owings: BigNumberish;
        reward: BigNumberish;
        colBals: BigNumberish;
        isAdmin: boolean;
        isMember: boolean;
        hasGH: boolean;
      },
      arg1: boolean,
      arg2: boolean,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: string,
      arg6: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initializeInfo((uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,bool),bool,bool,uint256,uint256,address,address)"(
      arg0: {
        position: BigNumberish;
        payDate: BigNumberish;
        turnTime: BigNumberish;
        owings: BigNumberish;
        reward: BigNumberish;
        colBals: BigNumberish;
        isAdmin: boolean;
        isMember: boolean;
        hasGH: boolean;
      },
      arg1: boolean,
      arg2: boolean,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: string,
      arg6: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rekey(arg0: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "rekey(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStatus(
      arg0: BigNumberish,
      arg1: boolean,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStatus(uint256,bool,bool)"(
      arg0: BigNumberish,
      arg1: boolean,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    split(
      arg0: BigNumberish,
      arg1: string,
      arg2: string[],
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "split(uint256,address,address[],address,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string[],
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateBalancesInUse(
      arg0: string,
      arg1: BigNumberish,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateBalancesInUse(address,uint256,bool)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateTurnTime(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateTurnTime(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawRouterOnly(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawRouterOnly(address,address,address,uint256,uint256)"(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
