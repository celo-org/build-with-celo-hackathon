/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AccountManagerInterface extends ethers.utils.Interface {
  functions: {
    "accountsCounter()": FunctionFragment;
    "activateAccount(address)": FunctionFragment;
    "approvals(address)": FunctionFragment;
    "changeFeeTo(address)": FunctionFragment;
    "createAccount(uint256,address)": FunctionFragment;
    "deactivateAccount(address)": FunctionFragment;
    "factory()": FunctionFragment;
    "getAccount(address)": FunctionFragment;
    "hasAccount(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "rekeyAccount(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAccountCreationFee(uint256)": FunctionFragment;
    "setApproval(address,bool)": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountsCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateAccount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "approvals", values: [string]): string;
  encodeFunctionData(functionFragment: "changeFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateAccount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAccount", values: [string]): string;
  encodeFunctionData(functionFragment: "hasAccount", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rekeyAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproval",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setFactory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountsCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approvals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeFeeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasAccount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rekeyAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AccountLaunched(address,address)": EventFragment;
    "BandCreated(uint256,tuple)": EventFragment;
    "GetFinanced(uint256,uint256,address)": EventFragment;
    "Joined(uint256,address,uint256)": EventFragment;
    "NewAccount(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Payback(uint256,uint256,address)": EventFragment;
    "Rekeyed(address,address)": EventFragment;
    "RoundUp(uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountLaunched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BandCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetFinanced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Joined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rekeyed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundUp"): EventFragment;
}

export class AccountManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AccountManagerInterface;

  functions: {
    accountsCounter(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "accountsCounter()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    activateAccount(
      target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "activateAccount(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approvals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "approvals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    changeFeeTo(
      newFeeTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeFeeTo(address)"(
      newFeeTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createAccount(
      initialAccountBalance: BigNumberish,
      who: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createAccount(uint256,address)"(
      initialAccountBalance: BigNumberish,
      who: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    deactivateAccount(
      target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deactivateAccount(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "factory()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getAccount(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getAccount(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    hasAccount(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasAccount(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    rekeyAccount(
      newAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rekeyAccount(address)"(
      newAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setAccountCreationFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAccountCreationFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApproval(
      newAccount: string,
      _approval: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApproval(address,bool)"(
      newAccount: string,
      _approval: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFactory(
      newFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFactory(address)"(
      newFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accountsCounter(overrides?: CallOverrides): Promise<BigNumber>;

  "accountsCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

  activateAccount(
    target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "activateAccount(address)"(
    target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approvals(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "approvals(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  changeFeeTo(
    newFeeTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeFeeTo(address)"(
    newFeeTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createAccount(
    initialAccountBalance: BigNumberish,
    who: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createAccount(uint256,address)"(
    initialAccountBalance: BigNumberish,
    who: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  deactivateAccount(
    target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deactivateAccount(address)"(
    target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  getAccount(who: string, overrides?: CallOverrides): Promise<string>;

  "getAccount(address)"(
    who: string,
    overrides?: CallOverrides
  ): Promise<string>;

  hasAccount(who: string, overrides?: CallOverrides): Promise<boolean>;

  "hasAccount(address)"(
    who: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  rekeyAccount(
    newAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rekeyAccount(address)"(
    newAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setAccountCreationFee(
    newFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAccountCreationFee(uint256)"(
    newFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApproval(
    newAccount: string,
    _approval: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApproval(address,bool)"(
    newAccount: string,
    _approval: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFactory(
    newFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFactory(address)"(
    newFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accountsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "accountsCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    activateAccount(target: string, overrides?: CallOverrides): Promise<void>;

    "activateAccount(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approvals(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "approvals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeFeeTo(newFeeTo: string, overrides?: CallOverrides): Promise<void>;

    "changeFeeTo(address)"(
      newFeeTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createAccount(
      initialAccountBalance: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createAccount(uint256,address)"(
      initialAccountBalance: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<string>;

    deactivateAccount(target: string, overrides?: CallOverrides): Promise<void>;

    "deactivateAccount(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    getAccount(who: string, overrides?: CallOverrides): Promise<string>;

    "getAccount(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<string>;

    hasAccount(who: string, overrides?: CallOverrides): Promise<boolean>;

    "hasAccount(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    rekeyAccount(
      newAccount: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "rekeyAccount(address)"(
      newAccount: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setAccountCreationFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAccountCreationFee(uint256)"(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApproval(
      newAccount: string,
      _approval: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApproval(address,bool)"(
      newAccount: string,
      _approval: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactory(newFactory: string, overrides?: CallOverrides): Promise<void>;

    "setFactory(address)"(
      newFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AccountLaunched(
      undefined: string | null,
      undefined: string | null
    ): EventFilter;

    BandCreated(undefined: null, undefined: null): EventFilter;

    GetFinanced(undefined: null, undefined: null, undefined: null): EventFilter;

    Joined(undefined: null, undefined: null, undefined: null): EventFilter;

    NewAccount(
      undefined: string | null,
      undefined: string | null,
      undefined: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Payback(
      undefined: null,
      undefined: null,
      undefined: string | null
    ): EventFilter;

    Rekeyed(undefined: string | null, undefined: string | null): EventFilter;

    RoundUp(undefined: null, undefined: null): EventFilter;
  };

  estimateGas: {
    accountsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "accountsCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    activateAccount(target: string, overrides?: Overrides): Promise<BigNumber>;

    "activateAccount(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approvals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "approvals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeFeeTo(newFeeTo: string, overrides?: Overrides): Promise<BigNumber>;

    "changeFeeTo(address)"(
      newFeeTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createAccount(
      initialAccountBalance: BigNumberish,
      who: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createAccount(uint256,address)"(
      initialAccountBalance: BigNumberish,
      who: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    deactivateAccount(
      target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deactivateAccount(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAccount(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getAccount(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAccount(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "hasAccount(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    rekeyAccount(newAccount: string, overrides?: Overrides): Promise<BigNumber>;

    "rekeyAccount(address)"(
      newAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setAccountCreationFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAccountCreationFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApproval(
      newAccount: string,
      _approval: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApproval(address,bool)"(
      newAccount: string,
      _approval: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFactory(newFactory: string, overrides?: Overrides): Promise<BigNumber>;

    "setFactory(address)"(
      newFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountsCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accountsCounter()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activateAccount(
      target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "activateAccount(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approvals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approvals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeFeeTo(
      newFeeTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeFeeTo(address)"(
      newFeeTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createAccount(
      initialAccountBalance: BigNumberish,
      who: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createAccount(uint256,address)"(
      initialAccountBalance: BigNumberish,
      who: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    deactivateAccount(
      target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deactivateAccount(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccount(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccount(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAccount(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasAccount(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rekeyAccount(
      newAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rekeyAccount(address)"(
      newAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setAccountCreationFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAccountCreationFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApproval(
      newAccount: string,
      _approval: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApproval(address,bool)"(
      newAccount: string,
      _approval: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFactory(
      newFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFactory(address)"(
      newFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
