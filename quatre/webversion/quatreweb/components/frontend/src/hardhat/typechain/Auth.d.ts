/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AuthInterface extends ethers.utils.Interface {
  functions: {
    "hasAuthorization()": FunctionFragment;
    "renounceAuthorization()": FunctionFragment;
    "toggleAdminRole(address,uint8)": FunctionFragment;
    "transferAuthorization(address)": FunctionFragment;
    "verifyAdmin(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "hasAuthorization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAuthorization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleAdminRole",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAuthorization",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "verifyAdmin", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "hasAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAdmin",
    data: BytesLike
  ): Result;

  events: {
    "AuthorizationTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizationTransferred"): EventFragment;
}

export class Auth extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AuthInterface;

  functions: {
    hasAuthorization(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "hasAuthorization()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    renounceAuthorization(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceAuthorization()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    toggleAdminRole(
      newAdmin: string,
      cmd: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "toggleAdminRole(address,uint8)"(
      newAdmin: string,
      cmd: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferAuthorization(
      swapTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferAuthorization(address)"(
      swapTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    verifyAdmin(
      target: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "verifyAdmin(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  hasAuthorization(overrides?: CallOverrides): Promise<boolean>;

  "hasAuthorization()"(overrides?: CallOverrides): Promise<boolean>;

  renounceAuthorization(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceAuthorization()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  toggleAdminRole(
    newAdmin: string,
    cmd: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "toggleAdminRole(address,uint8)"(
    newAdmin: string,
    cmd: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferAuthorization(
    swapTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferAuthorization(address)"(
    swapTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  verifyAdmin(target: string, overrides?: CallOverrides): Promise<boolean>;

  "verifyAdmin(address)"(
    target: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    hasAuthorization(overrides?: CallOverrides): Promise<boolean>;

    "hasAuthorization()"(overrides?: CallOverrides): Promise<boolean>;

    renounceAuthorization(overrides?: CallOverrides): Promise<boolean>;

    "renounceAuthorization()"(overrides?: CallOverrides): Promise<boolean>;

    toggleAdminRole(
      newAdmin: string,
      cmd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "toggleAdminRole(address,uint8)"(
      newAdmin: string,
      cmd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAuthorization(
      swapTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferAuthorization(address)"(
      swapTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyAdmin(target: string, overrides?: CallOverrides): Promise<boolean>;

    "verifyAdmin(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AuthorizationTransferred(
      previousAuth: string | null,
      newAuth: string | null
    ): EventFilter;
  };

  estimateGas: {
    hasAuthorization(overrides?: CallOverrides): Promise<BigNumber>;

    "hasAuthorization()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceAuthorization(overrides?: Overrides): Promise<BigNumber>;

    "renounceAuthorization()"(overrides?: Overrides): Promise<BigNumber>;

    toggleAdminRole(
      newAdmin: string,
      cmd: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "toggleAdminRole(address,uint8)"(
      newAdmin: string,
      cmd: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferAuthorization(
      swapTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferAuthorization(address)"(
      swapTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    verifyAdmin(target: string, overrides?: CallOverrides): Promise<BigNumber>;

    "verifyAdmin(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    hasAuthorization(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasAuthorization()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceAuthorization(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceAuthorization()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    toggleAdminRole(
      newAdmin: string,
      cmd: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "toggleAdminRole(address,uint8)"(
      newAdmin: string,
      cmd: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferAuthorization(
      swapTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferAuthorization(address)"(
      swapTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    verifyAdmin(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyAdmin(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
