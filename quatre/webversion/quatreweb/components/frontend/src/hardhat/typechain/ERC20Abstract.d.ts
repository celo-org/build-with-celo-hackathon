/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ERC20AbstractInterface extends ethers.utils.Interface {
  functions: {
    "accountBalances(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "lockFor(address,uint256)": FunctionFragment;
    "lockSpecific(address,uint256,uint16)": FunctionFragment;
    "name()": FunctionFragment;
    "reserved()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tier1(address)": FunctionFragment;
    "tokenData(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unlockAndTransfer(address,address,uint256)": FunctionFragment;
    "unlockFor(address,address,uint256,uint256,uint256)": FunctionFragment;
    "unlockSpecific(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockSpecific",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserved", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "tier1", values: [string]): string;
  encodeFunctionData(functionFragment: "tokenData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockAndTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFor",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockSpecific",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockSpecific",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserved", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tier1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockAndTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockSpecific",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class ERC20Abstract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ERC20AbstractInterface;

  functions: {
    accountBalances(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        spendable: BigNumber;
        locked: BigNumber;
        inSubScription: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    "accountBalances(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        spendable: BigNumber;
        locked: BigNumber;
        inSubScription: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    allowance(
      _owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      _allow: BigNumber;
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      _owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      _allow: BigNumber;
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      bal: BigNumber;
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      bal: BigNumber;
      0: BigNumber;
    }>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subVal: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subVal: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lockFor(
      target: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lockFor(address,uint256)"(
      target: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lockSpecific(
      routeTo: string,
      inValue: BigNumberish,
      lockTil: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lockSpecific(address,uint256,uint16)"(
      routeTo: string,
      inValue: BigNumberish,
      lockTil: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<{
      _name: string;
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      _name: string;
      0: string;
    }>;

    reserved(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "reserved()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      _sym: string;
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      _sym: string;
      0: string;
    }>;

    tier1(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      idleTimeInDays: number;
      lastLockedDate: number;
      reward: BigNumber;
      0: number;
      1: number;
      2: BigNumber;
    }>;

    "tier1(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      idleTimeInDays: number;
      lastLockedDate: number;
      reward: BigNumber;
      0: number;
      1: number;
      2: BigNumber;
    }>;

    tokenData(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        rewardRate: BigNumber;
        tSupply: BigNumber;
        shareActive: boolean;
        name: string;
        symbol: string;
        digesuAddr: string;
        0: BigNumber;
        1: BigNumber;
        2: boolean;
        3: string;
        4: string;
        5: string;
      };
      1: {
        main: BigNumber;
        locked: {
          lockTil: number;
          value: BigNumber;
          routeTo: string;
          0: number;
          1: BigNumber;
          2: string;
        };
        sub: { value: BigNumber; 0: BigNumber };
        0: BigNumber;
        1: {
          lockTil: number;
          value: BigNumber;
          routeTo: string;
          0: number;
          1: BigNumber;
          2: string;
        };
        2: { value: BigNumber; 0: BigNumber };
      };
    }>;

    "tokenData(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        rewardRate: BigNumber;
        tSupply: BigNumber;
        shareActive: boolean;
        name: string;
        symbol: string;
        digesuAddr: string;
        0: BigNumber;
        1: BigNumber;
        2: boolean;
        3: string;
        4: string;
        5: string;
      };
      1: {
        main: BigNumber;
        locked: {
          lockTil: number;
          value: BigNumber;
          routeTo: string;
          0: number;
          1: BigNumber;
          2: string;
        };
        sub: { value: BigNumber; 0: BigNumber };
        0: BigNumber;
        1: {
          lockTil: number;
          value: BigNumber;
          routeTo: string;
          0: number;
          1: BigNumber;
          2: string;
        };
        2: { value: BigNumber; 0: BigNumber };
      };
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      _ts: BigNumber;
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      _ts: BigNumber;
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockAndTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlockAndTransfer(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockFor(
      from: string,
      to: string,
      mintable: BigNumberish,
      amountTo: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlockFor(address,address,uint256,uint256,uint256)"(
      from: string,
      to: string,
      mintable: BigNumberish,
      amountTo: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockSpecific(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlockSpecific(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accountBalances(
    who: string,
    overrides?: CallOverrides
  ): Promise<{
    spendable: BigNumber;
    locked: BigNumber;
    inSubScription: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "accountBalances(address)"(
    who: string,
    overrides?: CallOverrides
  ): Promise<{
    spendable: BigNumber;
    locked: BigNumber;
    inSubScription: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  allowance(
    _owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    _owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subVal: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subVal: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lockFor(
    target: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lockFor(address,uint256)"(
    target: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lockSpecific(
    routeTo: string,
    inValue: BigNumberish,
    lockTil: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lockSpecific(address,uint256,uint16)"(
    routeTo: string,
    inValue: BigNumberish,
    lockTil: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  reserved(overrides?: CallOverrides): Promise<BigNumber>;

  "reserved()"(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tier1(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    idleTimeInDays: number;
    lastLockedDate: number;
    reward: BigNumber;
    0: number;
    1: number;
    2: BigNumber;
  }>;

  "tier1(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    idleTimeInDays: number;
    lastLockedDate: number;
    reward: BigNumber;
    0: number;
    1: number;
    2: BigNumber;
  }>;

  tokenData(
    who: string,
    overrides?: CallOverrides
  ): Promise<{
    0: {
      rewardRate: BigNumber;
      tSupply: BigNumber;
      shareActive: boolean;
      name: string;
      symbol: string;
      digesuAddr: string;
      0: BigNumber;
      1: BigNumber;
      2: boolean;
      3: string;
      4: string;
      5: string;
    };
    1: {
      main: BigNumber;
      locked: {
        lockTil: number;
        value: BigNumber;
        routeTo: string;
        0: number;
        1: BigNumber;
        2: string;
      };
      sub: { value: BigNumber; 0: BigNumber };
      0: BigNumber;
      1: {
        lockTil: number;
        value: BigNumber;
        routeTo: string;
        0: number;
        1: BigNumber;
        2: string;
      };
      2: { value: BigNumber; 0: BigNumber };
    };
  }>;

  "tokenData(address)"(
    who: string,
    overrides?: CallOverrides
  ): Promise<{
    0: {
      rewardRate: BigNumber;
      tSupply: BigNumber;
      shareActive: boolean;
      name: string;
      symbol: string;
      digesuAddr: string;
      0: BigNumber;
      1: BigNumber;
      2: boolean;
      3: string;
      4: string;
      5: string;
    };
    1: {
      main: BigNumber;
      locked: {
        lockTil: number;
        value: BigNumber;
        routeTo: string;
        0: number;
        1: BigNumber;
        2: string;
      };
      sub: { value: BigNumber; 0: BigNumber };
      0: BigNumber;
      1: {
        lockTil: number;
        value: BigNumber;
        routeTo: string;
        0: number;
        1: BigNumber;
        2: string;
      };
      2: { value: BigNumber; 0: BigNumber };
    };
  }>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockAndTransfer(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlockAndTransfer(address,address,uint256)"(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockFor(
    from: string,
    to: string,
    mintable: BigNumberish,
    amountTo: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlockFor(address,address,uint256,uint256,uint256)"(
    from: string,
    to: string,
    mintable: BigNumberish,
    amountTo: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockSpecific(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlockSpecific(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accountBalances(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      spendable: BigNumber;
      locked: BigNumber;
      inSubScription: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "accountBalances(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      spendable: BigNumber;
      locked: BigNumber;
      inSubScription: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    allowance(
      _owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subVal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subVal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockFor(
      target: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockFor(address,uint256)"(
      target: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockSpecific(
      routeTo: string,
      inValue: BigNumberish,
      lockTil: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockSpecific(address,uint256,uint16)"(
      routeTo: string,
      inValue: BigNumberish,
      lockTil: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    reserved(overrides?: CallOverrides): Promise<BigNumber>;

    "reserved()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tier1(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      idleTimeInDays: number;
      lastLockedDate: number;
      reward: BigNumber;
      0: number;
      1: number;
      2: BigNumber;
    }>;

    "tier1(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      idleTimeInDays: number;
      lastLockedDate: number;
      reward: BigNumber;
      0: number;
      1: number;
      2: BigNumber;
    }>;

    tokenData(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        rewardRate: BigNumber;
        tSupply: BigNumber;
        shareActive: boolean;
        name: string;
        symbol: string;
        digesuAddr: string;
        0: BigNumber;
        1: BigNumber;
        2: boolean;
        3: string;
        4: string;
        5: string;
      };
      1: {
        main: BigNumber;
        locked: {
          lockTil: number;
          value: BigNumber;
          routeTo: string;
          0: number;
          1: BigNumber;
          2: string;
        };
        sub: { value: BigNumber; 0: BigNumber };
        0: BigNumber;
        1: {
          lockTil: number;
          value: BigNumber;
          routeTo: string;
          0: number;
          1: BigNumber;
          2: string;
        };
        2: { value: BigNumber; 0: BigNumber };
      };
    }>;

    "tokenData(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        rewardRate: BigNumber;
        tSupply: BigNumber;
        shareActive: boolean;
        name: string;
        symbol: string;
        digesuAddr: string;
        0: BigNumber;
        1: BigNumber;
        2: boolean;
        3: string;
        4: string;
        5: string;
      };
      1: {
        main: BigNumber;
        locked: {
          lockTil: number;
          value: BigNumber;
          routeTo: string;
          0: number;
          1: BigNumber;
          2: string;
        };
        sub: { value: BigNumber; 0: BigNumber };
        0: BigNumber;
        1: {
          lockTil: number;
          value: BigNumber;
          routeTo: string;
          0: number;
          1: BigNumber;
          2: string;
        };
        2: { value: BigNumber; 0: BigNumber };
      };
    }>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unlockAndTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockAndTransfer(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockFor(
      from: string,
      to: string,
      mintable: BigNumberish,
      amountTo: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockFor(address,address,uint256,uint256,uint256)"(
      from: string,
      to: string,
      mintable: BigNumberish,
      amountTo: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockSpecific(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockSpecific(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    accountBalances(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "accountBalances(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      _owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subVal: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subVal: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lockFor(
      target: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "lockFor(address,uint256)"(
      target: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lockSpecific(
      routeTo: string,
      inValue: BigNumberish,
      lockTil: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "lockSpecific(address,uint256,uint16)"(
      routeTo: string,
      inValue: BigNumberish,
      lockTil: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    reserved(overrides?: CallOverrides): Promise<BigNumber>;

    "reserved()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tier1(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tier1(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenData(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenData(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockAndTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlockAndTransfer(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockFor(
      from: string,
      to: string,
      mintable: BigNumberish,
      amountTo: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlockFor(address,address,uint256,uint256,uint256)"(
      from: string,
      to: string,
      mintable: BigNumberish,
      amountTo: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockSpecific(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlockSpecific(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountBalances(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountBalances(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      _owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      _owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subVal: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subVal: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lockFor(
      target: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lockFor(address,uint256)"(
      target: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lockSpecific(
      routeTo: string,
      inValue: BigNumberish,
      lockTil: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lockSpecific(address,uint256,uint16)"(
      routeTo: string,
      inValue: BigNumberish,
      lockTil: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserved(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserved()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tier1(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tier1(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenData(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenData(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockAndTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlockAndTransfer(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockFor(
      from: string,
      to: string,
      mintable: BigNumberish,
      amountTo: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlockFor(address,address,uint256,uint256,uint256)"(
      from: string,
      to: string,
      mintable: BigNumberish,
      amountTo: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockSpecific(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlockSpecific(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
