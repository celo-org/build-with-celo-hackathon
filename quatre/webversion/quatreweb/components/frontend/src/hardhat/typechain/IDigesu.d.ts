/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IDigesuInterface extends ethers.utils.Interface {
  functions: {
    "cancelBand(uint256)": FunctionFragment;
    "createPrivatePool(uint8,uint16,address[],address,uint256)": FunctionFragment;
    "createPublicPool(uint8,uint8,uint16,uint256,address)": FunctionFragment;
    "enquireLiquidation(uint256)": FunctionFragment;
    "getFinance(uint256)": FunctionFragment;
    "joinABand(uint256)": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "payback(uint256)": FunctionFragment;
    "roundUp(uint256)": FunctionFragment;
    "supportedToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelBand",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPrivatePool",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPublicPool",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "enquireLiquidation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFinance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinABand",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payback",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roundUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedToken",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "cancelBand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPrivatePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPublicPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enquireLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFinance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinABand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roundUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportedToken",
    data: BytesLike
  ): Result;

  events: {
    "Cancellation(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancellation"): EventFragment;
}

export class IDigesu extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IDigesuInterface;

  functions: {
    cancelBand(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelBand(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createPrivatePool(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPrivatePool(uint8,uint16,address[],address,uint256)"(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createPublicPool(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPublicPool(uint8,uint8,uint16,uint256,address)"(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enquireLiquidation(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        index: BigNumber;
        who: string;
        expectedRepaymentTime: BigNumber;
        debt: BigNumber;
        colBalInToken: BigNumber;
        0: BigNumber;
        1: string;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
    }>;

    "enquireLiquidation(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        index: BigNumber;
        who: string;
        expectedRepaymentTime: BigNumber;
        debt: BigNumber;
        colBalInToken: BigNumber;
        0: BigNumber;
        1: string;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
    }>;

    getFinance(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getFinance(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    joinABand(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "joinABand(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidate(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidate(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    payback(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "payback(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    roundUp(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "roundUp(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportedToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  cancelBand(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelBand(uint256)"(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createPrivatePool(
    durationIndays: BigNumberish,
    colCoverateRatio: BigNumberish,
    members: string[],
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPrivatePool(uint8,uint16,address[],address,uint256)"(
    durationIndays: BigNumberish,
    colCoverateRatio: BigNumberish,
    members: string[],
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createPublicPool(
    quorum: BigNumberish,
    durationInDays: BigNumberish,
    colCoverageRatio: BigNumberish,
    amount: BigNumberish,
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPublicPool(uint8,uint8,uint16,uint256,address)"(
    quorum: BigNumberish,
    durationInDays: BigNumberish,
    colCoverageRatio: BigNumberish,
    amount: BigNumberish,
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enquireLiquidation(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    index: BigNumber;
    who: string;
    expectedRepaymentTime: BigNumber;
    debt: BigNumber;
    colBalInToken: BigNumber;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "enquireLiquidation(uint256)"(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    index: BigNumber;
    who: string;
    expectedRepaymentTime: BigNumber;
    debt: BigNumber;
    colBalInToken: BigNumber;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  getFinance(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getFinance(uint256)"(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  joinABand(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "joinABand(uint256)"(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidate(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidate(uint256)"(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  payback(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "payback(uint256)"(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  roundUp(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "roundUp(uint256)"(
    poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

  "supportedToken(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    cancelBand(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "cancelBand(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createPrivatePool(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "createPrivatePool(uint8,uint16,address[],address,uint256)"(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createPublicPool(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "createPublicPool(uint8,uint8,uint16,uint256,address)"(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enquireLiquidation(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      index: BigNumber;
      who: string;
      expectedRepaymentTime: BigNumber;
      debt: BigNumber;
      colBalInToken: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "enquireLiquidation(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      index: BigNumber;
      who: string;
      expectedRepaymentTime: BigNumber;
      debt: BigNumber;
      colBalInToken: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    getFinance(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getFinance(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinABand(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "joinABand(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidate(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "liquidate(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    payback(poolId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "payback(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    roundUp(poolId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "roundUp(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

    "supportedToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Cancellation(poolId: null, unit: null, alc: null): EventFilter;
  };

  estimateGas: {
    cancelBand(poolId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "cancelBand(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createPrivatePool(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPrivatePool(uint8,uint16,address[],address,uint256)"(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createPublicPool(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPublicPool(uint8,uint8,uint16,uint256,address)"(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enquireLiquidation(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "enquireLiquidation(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFinance(poolId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "getFinance(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    joinABand(poolId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "joinABand(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidate(poolId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "liquidate(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    payback(poolId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "payback(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    roundUp(poolId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "roundUp(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportedToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelBand(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelBand(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createPrivatePool(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPrivatePool(uint8,uint16,address[],address,uint256)"(
      durationIndays: BigNumberish,
      colCoverateRatio: BigNumberish,
      members: string[],
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createPublicPool(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPublicPool(uint8,uint8,uint16,uint256,address)"(
      quorum: BigNumberish,
      durationInDays: BigNumberish,
      colCoverageRatio: BigNumberish,
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enquireLiquidation(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "enquireLiquidation(uint256)"(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFinance(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getFinance(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    joinABand(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "joinABand(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidate(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    payback(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "payback(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    roundUp(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "roundUp(uint256)"(
      poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportedToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
