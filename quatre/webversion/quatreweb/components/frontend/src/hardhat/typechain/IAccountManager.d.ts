/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAccountManagerInterface extends ethers.utils.Interface {
  functions: {
    "createAccount(uint256,address)": FunctionFragment;
    "getAccount(address)": FunctionFragment;
    "hasAccount(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createAccount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "getAccount", values: [string]): string;
  encodeFunctionData(functionFragment: "hasAccount", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasAccount", data: BytesLike): Result;

  events: {};
}

export class IAccountManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAccountManagerInterface;

  functions: {
    createAccount(
      arg0: BigNumberish,
      arg1: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createAccount(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getAccount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    hasAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasAccount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  createAccount(
    arg0: BigNumberish,
    arg1: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createAccount(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getAccount(arg0: string, overrides?: CallOverrides): Promise<string>;

  "getAccount(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  hasAccount(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "hasAccount(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    createAccount(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createAccount(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getAccount(arg0: string, overrides?: CallOverrides): Promise<string>;

    "getAccount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    hasAccount(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "hasAccount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    createAccount(
      arg0: BigNumberish,
      arg1: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createAccount(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getAccount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getAccount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAccount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "hasAccount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createAccount(
      arg0: BigNumberish,
      arg1: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createAccount(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasAccount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
