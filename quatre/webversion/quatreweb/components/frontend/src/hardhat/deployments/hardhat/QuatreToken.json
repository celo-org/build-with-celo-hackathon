{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "accountBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "spendable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "locked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inSubScription",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20.AccountBalances",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_allow",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deActivateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subVal",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "reqAmts",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        }
      ],
      "name": "dynamicTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lockFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "routeTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "lockTil",
          "type": "uint16"
        }
      ],
      "name": "lockSpecific",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTier1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "panicMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "_sym",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tier1",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "idleTimeInDays",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "lastLockedDate",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "tokenData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rewardRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tSupply",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "shareActive",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "digesuAddr",
              "type": "address"
            }
          ],
          "internalType": "struct IERC20.MetaData",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "main",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "lockTil",
                  "type": "uint32"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "routeTo",
                  "type": "address"
                }
              ],
              "internalType": "struct IERC20.SelfLocked",
              "name": "locked",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IERC20.Subscription",
              "name": "sub",
              "type": "tuple"
            }
          ],
          "internalType": "struct IERC20.Holders",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_ts",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlockAndTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlockFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlockSpecific",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTier1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddr",
          "type": "address"
        }
      ],
      "name": "updateDigesuAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x42cd282e6cb5dd73dc54c04ea4f319192db3c8661d0c2638c0f0b75963cb686e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "2352431",
    "logsBloom": "0x
    "blockHash": "0xdf804f4d685f3f8805dcbf670bb60d23d6e36fd0f9d7b69043c69019cdc01731",
    "transactionHash": "0x42cd282e6cb5dd73dc54c04ea4f319192db3c8661d0c2638c0f0b75963cb686e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x42cd282e6cb5dd73dc54c04ea4f319192db3c8661d0c2638c0f0b75963cb686e",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x000000000000000000000000000000000000000002d7eb3f96e070d970000000",
        "logIndex": 0,
        "blockHash": "0xdf804f4d685f3f8805dcbf670bb60d23d6e36fd0f9d7b69043c69019cdc01731"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x42cd282e6cb5dd73dc54c04ea4f319192db3c8661d0c2638c0f0b75963cb686e",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xdf804f4d685f3f8805dcbf670bb60d23d6e36fd0f9d7b69043c69019cdc01731"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "2352431",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f01f1aa2e2627a9f136b14161ee52bf0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"accountBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"spendable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inSubScription\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20.AccountBalances\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_allow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deActivateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subVal\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"reqAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"}],\"name\":\"dynamicTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"lockTil\",\"type\":\"uint16\"}],\"name\":\"lockSpecific\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTier1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"panicMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_sym\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tier1\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"idleTimeInDays\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"lastLockedDate\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"tokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shareActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"digesuAddr\",\"type\":\"address\"}],\"internalType\":\"struct IERC20.MetaData\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"lockTil\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"routeTo\",\"type\":\"address\"}],\"internalType\":\"struct IERC20.SelfLocked\",\"name\":\"locked\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20.Subscription\",\"name\":\"sub\",\"type\":\"tuple\"}],\"internalType\":\"struct IERC20.Holders\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockSpecific\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTier1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"updateDigesuAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\" For: Quatrefinance  By: Bobeu Github: https://github.com/bobeu Twitter: https://twitter.com/bobman7000\",\"kind\":\"dev\",\"methods\":{\"accountBalances(address)\":{\"details\":\"Return who's balances\",\"params\":{\"who\":\"- Account to enquire for.\"}},\"activateReward()\":{\"details\":\"Activates reward\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf} for more info. Returns total spendable balances of `account`\"},\"burn(uint256)\":{\"details\":\"Burns token of `amount`\"},\"deActivateReward()\":{\"details\":\"Deactivates reward\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subVal`.\"},\"dynamicTransfer(uint256[],address[])\":{\"details\":\"Batch transfer: enables to transfer to multiple recipients. Also flexible enough to allow for dynamic transfer value.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"lockSpecific(address,uint256,uint16)\":{\"details\":\"Moves the balance of an 'amount' from regular to locked to balances\"},\"maxSupply()\":{\"details\":\"Returns max supply\"},\"mint(address,uint256)\":{\"details\":\"Mints token of `amount  \"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"panicMove(address)\":{\"details\":\"Moves the balance of an 'amount' from locked to regular balances\"},\"pause()\":{\"details\":\"Pauses the contract. When called, some functions are halted.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"tokenData(address)\":{\"details\":\"Returns token data plus \\\"who's\\\" profile\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\\\"s tokens of at least `amount`. If called by the farmer, it signifies staking.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlockAndTransfer(address,address,uint256)\":{\"details\":\"Perform dual actions:  1. Unlock subscription balances of 'par.amount'. 2. Move the balance to 'to'. Note : User must initiate a transaction that sends the call otherwise Digesu cannot execute this on its own. Neither can any member of the team nor the deployer is able to influence Digesu to make unintended call.\"},\"unlockSpecific(uint256)\":{\"details\":\"Moves the balance of an 'amount' from locked to regular balances\"},\"unpause()\":{\"details\":\"unpauses the contract.\"}},\"title\":\"QuatreFinance Token is the native token of the Quatrefinance platform. It is a utility token that gives its holders access to Quatrefinance products. Standard: ERC20 Standard. Type: Deflationary. Max Supply: 1_000_000_000. Decimal: 18. For more detail, see ERC20Abstract.sol\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\": Spendable balance is a function of main balance less the  addition of locked balances and balance in subscription.\"},\"lockFor(address,uint256)\":{\"notice\":\"Locks specific amount to `tsrget's` accountCallable only by the Digesu contract on behalf of subscribers on approval. Note : User must initiate a transaction that initiate the call otherise Digesu cannot execute on its own. Neither can any member of the team nor the deployer is able to influence Digesu to make unintended call.\"},\"unlockFor(address,address,uint256,uint256,uint256)\":{\"notice\":\"Callable only by the Digesu contract on behalf of subscribers on approval. Note : User must initiate a transaction that sends the call otherwise Digesu cannot execute this on its own. Neither can any member of the team nor the deployer is able to influence Digesu to make unintended call. o User who successfully complete a circle on Digesu are entitled to mint some QFT based on the amount contributed. For proper reward calculation, see Utils.computeReward(). o Minting reqard is based on whether minting is active or not. o A condition may also warrant transfering penalty charged to other party.    \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/digesu/token/QuatreToken.sol\":\"QuatreToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/digesu/token/ERC20Abstract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**QUATRE FINANCE TOKEN - (Customized)\\r\\n    - Fully compatible and complied with ERC20 token standard.\\r\\n\\r\\n  @author Bobeu\\r\\n    Github: https://github.com/bobeu\\r\\n    NOTE: SOME OF THE DEPENDENCY MODULES AND SUBMODULES RALATED TO THIS CONTRACT ARE IMPORTED AND INSPIRED BY THE \\r\\n            OPENZEPPELIN CONTRACTS. KUDOS TO THE OZ GUYS.\\r\\n\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n        Note: digesuAddr is only a naming convention, and should not be mistaken for how it sounds as it does not in\\r\\n              anyway take custody of token unless a prompt call is initited by the user.\\r\\n */\\r\\n\\r\\nabstract contract ERC20Abstract is Context, IERC20, IERC20Metadata {\\r\\n  using SafeMath for uint256;\\r\\n  \\r\\n  MetaData private meta;\\r\\n\\r\\n  // Incentive mining\\r\\n  uint256 public reserved;\\r\\n\\r\\n  /**@dev Maps holders to tier1.\\r\\n          Note : Holders in this category auto earn from the inbuilt reward\\r\\n                  model.\\r\\n                To earn from this category, holders of QFT must have left their\\r\\n                token in the wallet unmoved for a period of at least 30 days.  \\r\\n   */\\r\\n  mapping(address => Share) public tier1;\\r\\n\\r\\n  ///@dev Maps addresses to their corresponding balances profile.\\r\\n  mapping(address => Holders) private _balances;\\r\\n\\r\\n  // Approvals for addresses to spend on behalf of other addresses.\\r\\n  mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n  // #Constructor\\r\\n  constructor(string memory _name, string memory _symbol, address initTokenRecipient) {\\r\\n    uint decis = 10**18;\\r\\n    meta = MetaData(1.0e18, 0, false, _name, _symbol, address(0));\\r\\n    reserved = 120_000_000 * decis; //Being 12% of max supply\\r\\n    _mint(initTokenRecipient, 880_000_000 * decis);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the name of the token.\\r\\n   */\\r\\n  function name() public view override returns (string memory _name) {\\r\\n    _name = meta.name;\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n   * name.\\r\\n   */\\r\\n  function symbol() public view override returns (string memory _sym) {\\r\\n    _sym = meta.symbol;\\r\\n    return _sym;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of decimals used to get its user representation.\\r\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n   *\\r\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n   * overridden;\\r\\n   *\\r\\n   * NOTE: This information is only used for _display_ purposes: it in\\r\\n   * no way affects any of the arithmetic of the contract, including\\r\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n   */\\r\\n  function decimals() public pure override returns (uint8) {\\r\\n    return 18;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() public view override returns (uint256 _ts) {\\r\\n    _ts = meta.tSupply;\\r\\n    return _ts;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-balanceOf} for more info.\\r\\n        Returns total spendable balances of `account`\\r\\n        @notice : Spendable balance is a function of main balance less the \\r\\n                  addition of locked balances and balance in subscription.\\r\\n   */\\r\\n  function balanceOf(address account) public view override returns (uint256 bal) {\\r\\n    AccountBalances memory acc  = _accountBalances(account);\\r\\n\\r\\n    return acc.spendable.add(acc.locked).add(acc.inSubScription);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-transfer}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `recipient` cannot be the zero address.\\r\\n   * - the caller must have a balance of at least `amount`.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n    _transfer(_msgSender(), recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-allowance}.\\r\\n   */\\r\\n  function allowance(address _owner, address spender) public view override returns (uint256 _allow) {\\r\\n    _allow = _allowances[_owner][spender];\\r\\n    return _allow;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-approve}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-transferFrom}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n   * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `sender` and `recipient` cannot be the zero address.\\r\\n   * - `sender` must have a balance of at least `amount`.\\r\\n   * - the caller must have allowance for ``sender``\\\"s tokens of at least\\r\\n   * `amount`.\\r\\n   * If called by the farmer, it signifies staking.\\r\\n   */\\r\\n  function transferFrom(address sender,address recipient,uint256 amount) public override returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n\\r\\n    uint256 curAllow = _allowances[sender][_msgSender()];\\r\\n    require(curAllow >= amount, \\\"ERC20: Amt exceeds allowance\\\");\\r\\n    unchecked {\\r\\n      _approve(sender, _msgSender(), curAllow - amount);\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {IERC20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n    _beforeTokenTransfer(_msgSender(), spender, addedValue);\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {IERC20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   * - `spender` must have allowance for the caller of at least\\r\\n   * `subVal`.\\r\\n   */\\r\\n  function decreaseAllowance(address spender, uint256 subVal) public returns (bool) {\\r\\n    _beforeTokenTransfer(_msgSender(), spender, subVal);\\r\\n    uint256 curAllow = _allowances[_msgSender()][spender];\\r\\n    require(curAllow >= subVal, \\\"Decreased allowance below zero\\\");\\r\\n    _approve(_msgSender(), spender, curAllow.sub(subVal));\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n   *\\r\\n   * This internal function is equivalent to {transfer}, and can be used to\\r\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `sender` cannot be the zero address.\\r\\n   * - `recipient` cannot be the zero address.\\r\\n   * - `sender` must have a balance of at least `amount`.\\r\\n   * We did a few twist here: This is a generic ERC20 transfer, to keep with the\\r\\n   * standard, balance of sender is deducted from the normal iterated balance\\r\\n   * but we check if recipient has lock in force, preference is given to the extra\\r\\n   * secure layer.\\r\\n   Note: \\r\\n        o If the balance of sender is less than value to send and there is no lock set up,\\r\\n            the transfer fails ie usual ERC20 behavior.\\r\\n        \\r\\n        o If balance of sender is less than value to send and there was lock, the spendable \\r\\n            balance reads to 0 and the locked balance accumulates it.\\r\\n\\r\\n        o If sender's balance can cover the amount to spend, the usual ERC20 transfer is executed.\\r\\n        o If Recipient has lock set up, we give preference by sending to locked spot otherwise regular.\\r\\n\\r\\n        @notice This model however is fully compatible with the ERC20 token standard, and does not \\r\\n                in any way deny holders of right to their token. The system only executes secondary \\r\\n                instructions if the holder had given previous order such as setting\\r\\n                up a locker.\\r\\n\\r\\n        @notice We automatically unlock sender's locked balances when its time.\\r\\n                Asset is forwarded to the escape address provided.\\r\\n   */\\r\\n  function _transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 reqAmt\\r\\n  ) internal virtual {\\r\\n    _beforeTokenTransfer(from, to, reqAmt);\\r\\n    require(to != address(0), \\\"address: zero\\\");\\r\\n    Holders memory fH = _balances[from];\\r\\n    AccountBalances memory accFrom = _accountBalances(from);\\r\\n\\r\\n    if (_now() >= fH.locked.lockTil) {\\r\\n      unchecked {\\r\\n        _balances[from].main = fH.main - accFrom.locked;\\r\\n        _balances[fH.locked.routeTo].main += accFrom.locked;\\r\\n      }\\r\\n      _balances[from].locked.value = 0;\\r\\n    } else { require(accFrom.spendable >= reqAmt, \\\"Insuff bal\\\");}\\r\\n\\r\\n    if (accFrom.spendable >= reqAmt) {\\r\\n      unchecked {\\r\\n        _balances[from].main = fH.main - reqAmt;\\r\\n        _balances[to].main += reqAmt;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Transfer(from, to, reqAmt);\\r\\n  }\\r\\n\\r\\n  ///@dev Try unlock \\\"who's\\\" locked balance\\r\\n  function _tryUnlock(Holders memory hodl, address who, uint256 reqAmt) private returns (uint locked) {\\r\\n    require(hodl.locked.value >= reqAmt, \\\"No prev locked\\\");\\r\\n    if(_now() >= hodl.locked.lockTil) {\\r\\n      unchecked {\\r\\n        _balances[who].locked.value = hodl.locked.value - reqAmt;\\r\\n        _balances[who].main -= reqAmt;\\r\\n        _balances[hodl.locked.routeTo].main += reqAmt;\\r\\n      }\\r\\n      locked = hodl.locked.value;\\r\\n    }\\r\\n    return locked;\\r\\n  }\\r\\n\\r\\n  ///@dev panic moves all balances of `who` to the set escaped address\\r\\n  function _panicMove(address who) internal virtual {\\r\\n    Holders memory hodl = _balances[who];\\r\\n    require(hodl.locked.routeTo != address(0), \\\"Escape addr is empty\\\");\\r\\n    AccountBalances memory acc  = _accountBalances(who);\\r\\n\\r\\n    uint allBal = acc.spendable.add(acc.locked).add(acc.inSubScription);\\r\\n    unchecked {\\r\\n      _balances[hodl.locked.routeTo].main += allBal;\\r\\n    }\\r\\n    _balances[who].main = 0;\\r\\n    _balances[who].locked.value = 0;\\r\\n    _balances[who].sub.value = 0;\\r\\n  }\\r\\n\\r\\n  ///@notice Checks if \\\"who\\\" qualifies for share reward.\\r\\n  function _postShare(address who, uint locked) private {\\r\\n    Share memory sh = tier1[who];\\r\\n    uint earnings;\\r\\n    if(sh.lastLockedDate > 0) {\\r\\n      if(_now() > sh.lastLockedDate){\\r\\n        unchecked {\\r\\n          uint diff = _now() - sh.lastLockedDate;\\r\\n          uint256 _earnRate = meta.rewardRate.mul(10000).div(100.0e18).mul(10 ** 18); // ((meta.rewardRate * 10000) / 100.0e18) * 10**18;\\r\\n          uint earnPerSec = _earnRate.mul(locked).div(10 ** 18).div(10000); // ((_earnRate * locked) / 10**18) / 10000;\\r\\n          earnings = earnPerSec.mul(diff);\\r\\n        }\\r\\n        tier1[who].lastLockedDate = 0;\\r\\n        if(meta.shareActive && reserved >= earnings) {\\r\\n          reserved -= earnings;\\r\\n          _mint(who, earnings);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**User unlocks balance\\r\\n    @param ul : #parameters.\\r\\n              If cmd true, we unlock the selfLocked otherwise unlock the subscription\\r\\n              by reqAmt\\r\\n   */\\r\\n  function _unlock(UnlockParam memory ul) internal virtual {\\r\\n    Holders memory hodl = _balances[ul.who];\\r\\n    uint locked;\\r\\n    if(ul.cmd) locked = _tryUnlock(hodl, ul.who, ul.reqAmt);\\r\\n    if(!ul.cmd) {\\r\\n      require(hodl.sub.value >= ul.reqAmt, \\\"Amount exceed locked\\\");\\r\\n      unchecked {\\r\\n        _balances[ul.who].sub.value -= ul.reqAmt;\\r\\n      }\\r\\n      locked = ul.reqAmt;\\r\\n    }\\r\\n    _postShare(ul.who, locked);\\r\\n    \\r\\n  }\\r\\n\\r\\n  /**Holder or Digesu trsutee account (on permissioned) is able to lock balance\\r\\n      of `_of`.\\r\\n      @param lp : Parameters.\\r\\n      @notice : Amount locked will always be forwarded to `routeTo` when lock\\r\\n                        period is over.\\r\\n      Note: If caller has no lock previously set,`routeTo` must not be an empty address.\\r\\n   */\\r\\n  function _lock(LockParam memory lp) internal virtual {\\r\\n    Holders memory hodl = _balances[lp.who];\\r\\n    Share memory t1 = tier1[lp.who];\\r\\n\\r\\n    if(lp.cmd) {\\r\\n      require(lp.routeTo != address(0) && lp.routeTo != lp.who, \\\"Invalid addr\\\");\\r\\n      hodl.locked.routeTo = lp.routeTo;\\r\\n      _balances[lp.who].locked = SelfLocked(lp.lockTil * 1 days, hodl.locked.value + lp.inValue, lp.routeTo);\\r\\n    } else {\\r\\n      _balances[lp.who].sub = Subscription(hodl.sub.value + lp.inValue);\\r\\n    }\\r\\n    \\r\\n    tier1[lp.who].lastLockedDate = lp.lockTil == 0 ? 0 : t1.lastLockedDate > 0 ? t1.lastLockedDate : _now();\\r\\n  }\\r\\n\\r\\n  ///@dev Returns current Unix time stamp\\r\\n  function _now() internal view returns(uint32) {\\r\\n    return uint32(block.timestamp);\\r\\n  }\\r\\n\\r\\n  ///@dev Returns QFT balance of this contract.\\r\\n  function _balanceThis() internal virtual returns (uint256) {\\r\\n    return _balances[address(this)].main;\\r\\n  }\\r\\n\\r\\n  ///@dev Returns struct of balances relating to `who`\\r\\n  function _accountBalances(address who) internal virtual view returns (AccountBalances memory) {\\r\\n    Holders memory _h = _balances[who];\\r\\n    return AccountBalances(_h.main - (_h.locked.value + _h.sub.value), _h.locked.value, _h.sub.value);\\r\\n  }\\r\\n\\r\\n  \\r\\n  function _maxSupply() internal virtual returns (uint256) {\\r\\n    return 1_000_000_000 * 10 ** 18;\\r\\n  }\\r\\n\\r\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n   * the total supply.\\r\\n   *\\r\\n   * Emits a {Transfer} event with `from` set to the zero address.\\r\\n   \\r\\n   * Requirements:\\r\\n   * - `account` cannot be the zero address.\\r\\n   */\\r\\n  function _mint(address to, uint256 amount) internal virtual {\\r\\n    require(to != address(0), \\\"ERC20: mint zero address?\\\");\\r\\n    require(meta.tSupply + amount <= _maxSupply(), \\\"Max supply ovf\\\");\\r\\n     _beforeTokenTransfer(address(0), to, amount);\\r\\n\\r\\n      meta.tSupply = meta.tSupply.add(amount);\\r\\n      _balances[to].main =  _balances[to].main.add(amount);\\r\\n      emit Transfer(address(0), to, amount);\\r\\n\\r\\n      _afterTokenTransfer(address(0), to, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n   * total supply.\\r\\n   *\\r\\n   * Emits a {Transfer} event with `recipient` set to the zero address.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `account` cannot be the zero address.\\r\\n   * - `account` must have at least `amount` tokens.\\r\\n   */\\r\\n  function _burn(address from, uint256 amount) internal virtual {\\r\\n    require(from != address(0), \\\"ERC20: zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfer(from, address(0), amount);\\r\\n\\r\\n    uint256 alcBal = _balances[from].main;\\r\\n    require(alcBal >= amount, \\\"ERC20: burn exceeds balance\\\");\\r\\n    unchecked {\\r\\n      _balances[from].main = alcBal - amount;\\r\\n    }\\r\\n    meta.tSupply = meta.tSupply.sub(amount);\\r\\n\\r\\n    emit Transfer(from, address(0), amount);\\r\\n\\r\\n    _afterTokenTransfer(from, address(0), amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the `_owner` s tokens.\\r\\n   *\\r\\n   * This internal function is equivalent to `approve`, and can be used to\\r\\n   * e.g. set automatic allowances for certain subsystems, etc.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `_owner` cannot be the zero address.\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function _approve(address _owner,address spender,uint256 amount) internal {\\r\\n    require(_owner != address(0) && spender != address(0), \\\"ERC20: zero address\\\");\\r\\n    _beforeTokenTransfer(_owner, spender, amount);\\r\\n    _allowances[_owner][spender] = amount;\\r\\n    emit Approval(_owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before any transfer of tokens. This includes\\r\\n   * minting and burning.\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``\\\"s tokens\\r\\n   * will be transferred to `to`.\\r\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n   * - when `to` is zero, `amount` of ``from``\\\"s tokens will be burned.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   *\\r\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n   */\\r\\n\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal {}\\r\\n\\r\\n  function _afterTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal {}\\r\\n\\r\\n  /**@dev Pause inbuilt reward\\r\\n  */\\r\\n  function _lockTier1Zone() internal virtual {\\r\\n    meta.shareActive = false;\\r\\n  }\\r\\n\\r\\n  /**@dev unpause inbuilt reward\\r\\n*/\\r\\n  function _unlockTier1Zone() internal virtual {\\r\\n    meta.shareActive = true;\\r\\n  }\\r\\n\\r\\n  ///@dev Returns token data plus \\\"who's\\\" profile\\r\\n  function tokenData(address who) public view override returns (MetaData memory, Holders memory) {\\r\\n    return ( \\r\\n      MetaData(meta.rewardRate, meta.tSupply, meta.shareActive, meta.name, meta.symbol, meta.digesuAddr),\\r\\n      _balances[who]\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ///@dev Fetches digesu contract address\\r\\n  function _digesuAddr() internal view virtual returns (address) {\\r\\n    return meta.digesuAddr;\\r\\n  }\\r\\n\\r\\n  ///@dev Updates digesu contract address\\r\\n  function _setDigesuContract(address newAddr) internal virtual {\\r\\n    require(newAddr != address(0), \\\"Zero Addr\\\");\\r\\n    meta.digesuAddr = newAddr;\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\n//Overdraft\",\"keccak256\":\"0x1aff900c33b0f482230bcbdcde3b97c83da544eb47c742ea2978cd713b50426a\",\"license\":\"MIT\"},\"contracts/digesu/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n     /** @dev Moves token of an 'amount' to the locked\\r\\n    */\\r\\n    function lockSpecific(address routeTo, uint256 inValue, uint16 lockTil) external;\\r\\n\\r\\n    /** @dev Locks `amount` for `target` for subscription purpose\\r\\n    */\\r\\n    function lockFor(address target, uint amount) external;\\r\\n\\r\\n    /** @dev unlocks `amount` for `target` for subscription purpose\\r\\n    */\\r\\n    function unlockFor(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint mintable,\\r\\n        uint amountTo,\\r\\n        uint amount\\r\\n    ) external;\\r\\n\\r\\n\\r\\n    /** @dev Moves 'amount' to regular balance\\r\\n        @param amount - Amount to unloc.\\r\\n     */\\r\\n    function unlockSpecific(uint amount) external ;\\r\\n\\r\\n    /** @dev Return who's balances\\r\\n        @param who - Account to enquire for.\\r\\n     */\\r\\n    function accountBalances(address who) external view returns(AccountBalances memory);\\r\\n   \\r\\n    /**@dev Return QFT's Metadata including the information of `who`.\\r\\n     */\\r\\n    function tokenData(address who) external view returns(MetaData memory, Holders memory);\\r\\n\\r\\n    /// @notice Unlocks and transfer at the same time .\\r\\n    function unlockAndTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint amount\\r\\n    ) external;\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n      * @dev structured data for holding user's balance\\r\\n    */\\r\\n    struct Holders {\\r\\n        uint256 main;\\r\\n        SelfLocked locked;\\r\\n        Subscription sub;\\r\\n    }\\r\\n\\r\\n    struct SelfLocked {\\r\\n        uint32 lockTil;\\r\\n        uint256 value;\\r\\n        address routeTo;\\r\\n    }\\r\\n\\r\\n    struct Subscription {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    struct AccountBalances {\\r\\n        uint256 spendable;\\r\\n        uint256 locked;\\r\\n        uint256 inSubScription;\\r\\n    }\\r\\n\\r\\n    struct Share {\\r\\n        uint8 idleTimeInDays;\\r\\n        uint32 lastLockedDate;\\r\\n        uint256 reward;\\r\\n    }\\r\\n\\r\\n    // READONLY : Standard API for reading QFT metadata \\r\\n    struct MetaData {\\r\\n        uint rewardRate;\\r\\n        uint256 tSupply;\\r\\n        bool shareActive;\\r\\n        string name;\\r\\n        string symbol;\\r\\n        address digesuAddr;\\r\\n    }\\r\\n\\r\\n    struct AutoIncentive {\\r\\n        uint256 budget;\\r\\n    }\\r\\n\\r\\n    struct LockParam {\\r\\n        address who; \\r\\n        address routeTo; \\r\\n        uint256 inValue; \\r\\n        uint16 lockTil; \\r\\n        bool cmd;\\r\\n    }\\r\\n\\r\\n    struct UnlockParam {\\r\\n        address who;\\r\\n        uint256 reqAmt;\\r\\n        bool cmd;\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x307591fb83b3a08d8223a6f92ed86257ea9a8e442720aa97adffd3d565ef0d18\",\"license\":\"MIT\"},\"contracts/digesu/token/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x530e3f4b66e9fa1a9bffe769bea7459c690494424bb8b3c8fbeff3fe19d97102\",\"license\":\"MIT\"},\"contracts/digesu/token/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa2cd51dbf3a2f4c2147d893511f6c8b8d6b38f3a61e8b3af50ab5a8824c23edd\",\"license\":\"MIT\"},\"contracts/digesu/token/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        _requireNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        _requirePaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is paused.\\r\\n     */\\r\\n    function _requireNotPaused() internal view virtual {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is not paused.\\r\\n     */\\r\\n    function _requirePaused() internal view virtual {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x10494eb6bebd18a28df6d60aca165b7ac3f404acdef29517489953927a168497\",\"license\":\"MIT\"},\"contracts/digesu/token/QuatreToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./ERC20Abstract.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n// import \\\"../digesu/interfaces/ICommonParam.sol\\\";\\r\\n\\r\\n/**\\r\\n    @title QuatreFinance Token is the native token of the Quatrefinance platform.\\r\\n            It is a utility token that gives its holders access to Quatrefinance\\r\\n            products.\\r\\n        Standard: ERC20 Standard.\\r\\n        Type: Deflationary.\\r\\n        Max Supply: 1_000_000_000.\\r\\n        Decimal: 18.\\r\\n\\r\\n        For more detail, see ERC20Abstract.sol\\r\\n\\r\\n    @author \\r\\n        For: Quatrefinance \\r\\n        By: Bobeu\\r\\n            Github: https://github.com/bobeu\\r\\n            Twitter: https://twitter.com/bobman7000\\r\\n*/\\r\\ncontract QuatreToken is ERC20Abstract, Pausable, Ownable {\\r\\n    // Reward switcher\\r\\n    bool private rewardActive;\\r\\n\\r\\n    // Action only Digesu can perform.\\r\\n    modifier onlyDigesu() {\\r\\n        address digesu = _digesuAddr();\\r\\n        require(digesu != address(0) && _msgSender() == digesu, \\\"NA\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor () ERC20Abstract(\\\"QuatreFinance Token\\\", \\\"QFT\\\", _msgSender()) { rewardActive = true; }\\r\\n\\r\\n    receive () external payable { payable(_digesuAddr()).transfer(msg.value); } \\r\\n\\r\\n    ///@dev Pauses the contract. When called, some functions are halted.\\r\\n    function pause() public onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    ///@dev unpauses the contract.\\r\\n    function unpause() public onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    ///@dev Moves the balance of an 'amount' from locked to regular balances\\r\\n    function unlockSpecific(uint amount) public override whenNotPaused {\\r\\n        _unlock(UnlockParam(_msgSender(), amount, true));\\r\\n    }\\r\\n\\r\\n    ///@dev Moves the balance of an 'amount' from locked to regular balances\\r\\n    function panicMove(address lostAddress) public whenNotPaused onlyOwner {\\r\\n        _panicMove(lostAddress);\\r\\n    }\\r\\n\\r\\n    ///@dev Moves the balance of an 'amount' from regular to locked to balances\\r\\n    function lockSpecific(address routeTo, uint256 amount, uint16 lockTil) public override whenNotPaused {\\r\\n        require(lockTil > 0, \\\"Zero Days\\\");\\r\\n        _lock(LockParam(_msgSender(), routeTo, amount, lockTil, true));\\r\\n    }\\r\\n\\r\\n    ///@dev Mints token of `amount  \\r\\n    function mint(address to, uint256 amount) public onlyOwner {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    ///@dev Burns token of `amount`\\r\\n    function burn(uint amount) public {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    ///@dev Returns max supply\\r\\n    function maxSupply() public returns (uint) {\\r\\n        return _maxSupply();\\r\\n    }\\r\\n\\r\\n    /** Locks specific amount to `tsrget's` account\\r\\n        @notice Callable only by the Digesu contract on behalf of subscribers on approval.\\r\\n        Note : User must initiate a transaction that initiate the call otherise Digesu cannot execute on its own.\\r\\n                Neither can any member of the team nor the deployer is able to influence Digesu to make unintended call.\\r\\n    */\\r\\n    function lockFor(address target, uint amount) public override onlyDigesu {\\r\\n        _lock(LockParam(target, address(0), amount, 0, false));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Callable only by the Digesu contract on behalf of subscribers on approval.\\r\\n        Note : User must initiate a transaction that sends the call otherwise Digesu cannot execute this on its own.\\r\\n                Neither can any member of the team nor the deployer is able to influence Digesu to make unintended call.\\r\\n            \\r\\n            o User who successfully complete a circle on Digesu are entitled to mint some QFT based on the amount contributed.\\r\\n                For proper reward calculation, see Utils.computeReward().\\r\\n            o Minting reqard is based on whether minting is active or not.\\r\\n            o A condition may also warrant transfering penalty charged to other party.    \\r\\n    */\\r\\n    function unlockFor(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint mintable,\\r\\n        uint amountTo,\\r\\n        uint amount\\r\\n    ) public override onlyDigesu {\\r\\n        _unlock(UnlockParam(from, amount, false));\\r\\n        if(rewardActive) _mint(from, mintable);\\r\\n        if(amountTo > 0) _transfer(from, to, amountTo);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Perform dual actions: \\r\\n            1. Unlock subscription balances of 'par.amount'.\\r\\n            2. Move the balance to 'to'.\\r\\n\\r\\n        Note : User must initiate a transaction that sends the call otherwise Digesu cannot execute this on its own.\\r\\n            Neither can any member of the team nor the deployer is able to influence Digesu to make unintended call.\\r\\n     */\\r\\n    function unlockAndTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint amount\\r\\n    ) external onlyDigesu {\\r\\n        _unlock(UnlockParam(from, amount, false));\\r\\n        _transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    // See ERC20 `_accountBalances`\\r\\n    function accountBalances(address who) public view override returns(AccountBalances memory) {\\r\\n        return _accountBalances(who);\\r\\n    }\\r\\n\\r\\n    //See ERC20 _lockTier1Zone\\r\\n    function lockTier1() public onlyOwner {\\r\\n        _lockTier1Zone();\\r\\n    }\\r\\n\\r\\n    //See ERC20 _unlockTier1Zone\\r\\n    function unlockTier1() public onlyOwner {\\r\\n        _unlockTier1Zone();\\r\\n    }\\r\\n\\r\\n    ///@dev Activates reward\\r\\n    function activateReward() public onlyOwner {\\r\\n        require(!rewardActive, \\\"Not Paused\\\");\\r\\n        rewardActive = true;\\r\\n    }\\r\\n\\r\\n    ///@dev Deactivates reward\\r\\n    function deActivateReward() public onlyOwner {\\r\\n        require(rewardActive, \\\"Paused\\\");\\r\\n        rewardActive = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Batch transfer: enables to transfer to multiple recipients.\\r\\n                Also flexible enough to allow for dynamic transfer value.\\r\\n     */\\r\\n    function dynamicTransfer(uint[] memory reqAmts, address[] memory tos) public {\\r\\n        for (uint i = 0; i < tos.length; i++) {\\r\\n            address to = tos[i];\\r\\n            uint amount = reqAmts[i];\\r\\n            _transfer(_msgSender(), to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //See DigesuAbstract.sol\\r\\n    function updateDigesuAddr(address newAddr) public onlyOwner {\\r\\n        _setDigesuContract(newAddr);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xc9c9a4544857c3cc16e33fae4c68f2f958c179799a4c8eafe59f6ed2fa4d96a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102135760003560e01c8063715018a611610118578063a9059cbb116100a0578063e71cf9241161006f578063e71cf924146106b0578063eef27328146106c5578063f074b3cc146106e5578063f2fde38b14610705578063fe60d12c1461072557600080fd5b8063a9059cbb14610616578063c493ae7c14610636578063d5abeb011461064b578063dd62ed3e1461066a57600080fd5b80638456cb59116100e75780638456cb59146105765780638da5cb5b1461058b57806395d89b41146105c1578063a384b52e146105d6578063a457c2d7146105f657600080fd5b8063715018a614610501578063731f75ae1461051657806377afe8dc1461053657806380381d3e1461055657600080fd5b80633d96e2761161019b57806343bae1ba1161016a57806343bae1ba146104095780635c975abb146104725780636e5339901461048a5780636ff96d171461049f57806370a08231146104e157600080fd5b80633d96e276146103945780633f4ba83a146103b457806340c10f19146103c957806342966c68146103e957600080fd5b806321c05300116101e257806321c05300146102f557806323b872dd1461030a57806327e45c2c1461032a578063313ce56714610358578063395093511461037457600080fd5b806306fdde0314610259578063095ea7b3146102845780630e2c390e146102b457806318160ddd146102d657600080fd5b36610254576005546040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015610251573d6000803e3d6000fd5b50005b600080fd5b34801561026557600080fd5b5061026e61073b565b60405161027b91906120f6565b60405180910390f35b34801561029057600080fd5b506102a461029f366004612125565b6107d0565b604051901515815260200161027b565b3480156102c057600080fd5b506102d46102cf36600461214f565b6107e6565b005b3480156102e257600080fd5b506001545b60405190815260200161027b565b34801561030157600080fd5b506102d46107fa565b34801561031657600080fd5b506102a461032536600461216a565b610863565b34801561033657600080fd5b5061034a61034536600461214f565b6108fe565b60405161027b9291906121a6565b34801561036457600080fd5b506040516012815260200161027b565b34801561038057600080fd5b506102a461038f366004612125565b610b10565b3480156103a057600080fd5b506102d46103af366004612125565b610b4b565b3480156103c057600080fd5b506102d4610bec565b3480156103d557600080fd5b506102d46103e4366004612125565b610bfe565b3480156103f557600080fd5b506102d4610404366004612264565b610c14565b34801561041557600080fd5b5061044e61042436600461214f565b6007602052600090815260409020805460019091015460ff821691610100900463ffffffff169083565b6040805160ff909416845263ffffffff90921660208401529082015260600161027b565b34801561047e57600080fd5b50600a5460ff166102a4565b34801561049657600080fd5b506102d4610c1e565b3480156104ab57600080fd5b506104bf6104ba36600461214f565b610c35565b604080518251815260208084015190820152918101519082015260600161027b565b3480156104ed57600080fd5b506102e76104fc36600461214f565b610c68565b34801561050d57600080fd5b506102d4610c96565b34801561052257600080fd5b506102d461053136600461227d565b610ca8565b34801561054257600080fd5b506102d46105513660046122ca565b610d5e565b34801561056257600080fd5b506102d4610571366004612264565b610df4565b34801561058257600080fd5b506102d4610e30565b34801561059757600080fd5b50600a5461010090046001600160a01b03166040516001600160a01b03909116815260200161027b565b3480156105cd57600080fd5b5061026e610e40565b3480156105e257600080fd5b506102d46105f136600461214f565b610e52565b34801561060257600080fd5b506102a4610611366004612125565b610e6b565b34801561062257600080fd5b506102a4610631366004612125565b610ef8565b34801561064257600080fd5b506102d4610f05565b34801561065757600080fd5b506b033b2e3c9fd0803ce80000006102e7565b34801561067657600080fd5b506102e7610685366004612311565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b3480156106bc57600080fd5b506102d4610f5e565b3480156106d157600080fd5b506102d46106e0366004612421565b610f78565b3480156106f157600080fd5b506102d461070036600461216a565b610fe6565b34801561071157600080fd5b506102d461072036600461214f565b611078565b34801561073157600080fd5b506102e760065481565b60606000600301805461074d906124da565b80601f0160208091040260200160405190810160405280929190818152602001828054610779906124da565b80156107c65780601f1061079b576101008083540402835291602001916107c6565b820191906000526020600020905b8154815290600101906020018083116107a957829003601f168201915b5050505050905090565b60006107dd3384846110fa565b50600192915050565b6107ee6111bd565b6107f78161121d565b50565b6108026111bd565b600a54600160a81b900460ff161561084e5760405162461bcd60e51b815260206004820152600a602482015269139bdd0814185d5cd95960b21b60448201526064015b60405180910390fd5b600a805460ff60a81b1916600160a81b179055565b6000610870848484611281565b6001600160a01b0384166000908152600960209081526040808320338452909152902054828110156108e45760405162461bcd60e51b815260206004820152601c60248201527f45524332303a20416d74206578636565647320616c6c6f77616e6365000000006044820152606401610845565b6108f185338584036110fa565b60019150505b9392505050565b6109426040518060c001604052806000815260200160008152602001600015158152602001606081526020016060815260200160006001600160a01b031681525090565b61094a61205e565b6040805160c0810182526000548152600154602082015260025460ff1615159181019190915260038054606083019190610983906124da565b80601f01602080910402602001604051908101604052809291908181526020018280546109af906124da565b80156109fc5780601f106109d1576101008083540402835291602001916109fc565b820191906000526020600020905b8154815290600101906020018083116109df57829003601f168201915b5050505050815260200160006004018054610a16906124da565b80601f0160208091040260200160405190810160405280929190818152602001828054610a42906124da565b8015610a8f5780601f10610a6457610100808354040283529160200191610a8f565b820191906000526020600020905b815481529060010190602001808311610a7257829003601f168201915b50505091835250506005546001600160a01b039081166020928301529485166000908152600882526040908190208151606080820184528254825283519081018452600183015463ffffffff168152600283015481860152600383015490981688840152808401979097528151928301825260040154825285015293915050565b3360008181526009602090815260408083206001600160a01b038716845290915281205490916107dd918590610b4690866110ee565b6110fa565b6000610b5f6005546001600160a01b031690565b90506001600160a01b03811615801590610b815750336001600160a01b038216145b610b9d5760405162461bcd60e51b815260040161084590612515565b610be76040518060a00160405280856001600160a01b0316815260200160006001600160a01b03168152602001848152602001600061ffff1681526020016000151581525061146d565b505050565b610bf46111bd565b610bfc611727565b565b610c066111bd565b610c108282611779565b5050565b6107f733826118b9565b610c266111bd565b610bfc6002805460ff19169055565b610c5960405180606001604052806000815260200160008152602001600081525090565b610c62826119e1565b92915050565b600080610c74836119e1565b6040810151602082015182519293506108f792610c90916110ee565b906110ee565b610c9e6111bd565b610bfc6000611ac0565b6000610cbc6005546001600160a01b031690565b90506001600160a01b03811615801590610cde5750336001600160a01b038216145b610cfa5760405162461bcd60e51b815260040161084590612515565b610d296040518060600160405280886001600160a01b0316815260200184815260200160001515815250611b1a565b600a54600160a81b900460ff1615610d4557610d458685611779565b8215610d5657610d56868685611281565b505050505050565b610d66611c3c565b60008161ffff1611610da65760405162461bcd60e51b81526020600482015260096024820152685a65726f204461797360b81b6044820152606401610845565b610be76040518060a00160405280610dbb3390565b6001600160a01b03168152602001856001600160a01b031681526020018481526020018361ffff1681526020016001151581525061146d565b610dfc611c3c565b6107f76040518060600160405280610e113390565b6001600160a01b03168152602081018490526001604090910152611b1a565b610e386111bd565b610bfc611c82565b60606000600401805461074d906124da565b610e5a611c3c565b610e626111bd565b6107f781611cbf565b3360009081526009602090815260408083206001600160a01b038616845290915281205482811015610edf5760405162461bcd60e51b815260206004820152601e60248201527f44656372656173656420616c6c6f77616e63652062656c6f77207a65726f00006044820152606401610845565b610eee3385610b468487611def565b5060019392505050565b60006107dd338484611281565b610f0d6111bd565b600a54600160a81b900460ff16610f4f5760405162461bcd60e51b815260206004820152600660248201526514185d5cd95960d21b6044820152606401610845565b600a805460ff60a81b19169055565b610f666111bd565b610bfc6002805460ff19166001179055565b60005b8151811015610be7576000828281518110610f9857610f98612531565b602002602001015190506000848381518110610fb657610fb6612531565b60200260200101519050610fd1610fca3390565b8383611281565b50508080610fde9061255d565b915050610f7b565b6000610ffa6005546001600160a01b031690565b90506001600160a01b0381161580159061101c5750336001600160a01b038216145b6110385760405162461bcd60e51b815260040161084590612515565b6110676040518060600160405280866001600160a01b0316815260200184815260200160001515815250611b1a565b611072848484611281565b50505050565b6110806111bd565b6001600160a01b0381166110e55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610845565b6107f781611ac0565b60006108f78284612578565b6001600160a01b0383161580159061111a57506001600160a01b03821615155b61115c5760405162461bcd60e51b815260206004820152601360248201527245524332303a207a65726f206164647265737360681b6044820152606401610845565b6001600160a01b0383811660008181526009602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600a546001600160a01b03610100909104163314610bfc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610845565b6001600160a01b03811661125f5760405162461bcd60e51b81526020600482015260096024820152682d32b9379020b2323960b91b6044820152606401610845565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166112c75760405162461bcd60e51b815260206004820152600d60248201526c616464726573733a207a65726f60981b6044820152606401610845565b6001600160a01b0380841660009081526008602090815260408083208151606080820184528254825283519081018452600183015463ffffffff1681526002830154818601526003830154909616868401528084019590955281519283018252600401548252830152611339856119e1565b60208301515190915063ffffffff164263ffffffff16106113a3576020808201805184516001600160a01b03808a166000818152600887526040808220959094038555945195880151830151909116845290832080549094019093559181526002909101556113e1565b80518311156113e15760405162461bcd60e51b815260206004820152600a602482015269125b9cdd59998818985b60b21b6044820152606401610845565b805183116114195781516001600160a01b03808716600090815260086020526040808220938790039093559086168152208054840190555b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161145e91815260200190565b60405180910390a35050505050565b80516001600160a01b039081166000908152600860209081526040808320815160608082018452825482528351808201855260018085015463ffffffff908116835260028601548389015260038601548a1683880152848801929092528551808801875260049095015485528386019490945288519097168652600785529483902083519586018452805460ff811687526101009004909616938501939093529390930154928201929092526080830151156116705760208301516001600160a01b031615801590611559575082600001516001600160a01b031683602001516001600160a01b031614155b6115945760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b21030b2323960a11b6044820152606401610845565b602080840151908301516001600160a01b03909116604091820152805160608082019092529084015181906115d09061ffff1662015180612590565b62ffffff1663ffffffff16815260200184604001518460200151602001516115f89190612578565b81526020858101516001600160a01b039081169282019290925285518216600090815260088252604090819020845160018201805463ffffffff191663ffffffff9092169190911790559184015160028301559290920151600390920180546001600160a01b031916929091169190911790556116b7565b604051806020016040528084604001518460400151600001516116939190612578565b905283516001600160a01b0316600090815260086020526040902090516004909101555b606083015161ffff16156116e7576000816020015163ffffffff16116116dd57426116ea565b80602001516116ea565b60005b92516001600160a01b03166000908152600760205260409020805463ffffffff949094166101000264ffffffff0019909416939093179092555050565b61172f611dfb565b600a805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166117cf5760405162461bcd60e51b815260206004820152601960248201527f45524332303a206d696e74207a65726f20616464726573733f000000000000006044820152606401610845565b6b033b2e3c9fd0803ce80000006001546117ea908390612578565b11156118295760405162461bcd60e51b815260206004820152600e60248201526d26b0bc1039bab838363c9037bb3360911b6044820152606401610845565b60015461183690826110ee565b6001556001600160a01b03821660009081526008602052604090205461185c90826110ee565b6001600160a01b0383166000818152600860205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906118ad9085815260200190565b60405180910390a35050565b6001600160a01b0382166119055760405162461bcd60e51b815260206004820152601360248201527245524332303a207a65726f206164647265737360681b6044820152606401610845565b6001600160a01b0382166000908152600860205260409020548181101561196e5760405162461bcd60e51b815260206004820152601b60248201527f45524332303a206275726e20657863656564732062616c616e636500000000006044820152606401610845565b6001600160a01b038316600090815260086020526040902082820390556001546119989083611def565b6001556040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b611a0560405180606001604052806000815260200160008152602001600081525090565b6001600160a01b038083166000908152600860209081526040918290208251606080820185528254825284518082018652600184015463ffffffff168152600284015481860152600384015490961686860152818401958652845180850186526004909301548352818501928352845190810190945290515193519091015190928291611a929190612578565b8351611a9e91906125bb565b8152602083810151810151908201526040928301515192019190915292915050565b600a80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b0390811660009081526008602090815260408083208151606080820184528254825283519081018452600183015463ffffffff16815260028301548186015260038301549096168684015280840195909552815192830182526004015482528381019190915283015115611ba757611ba48284600001518560200151611e44565b90505b8260400151611c305760208301516040830151511015611c005760405162461bcd60e51b8152602060048201526014602482015273105b5bdd5b9d08195e18d95959081b1bd8dad95960621b6044820152606401610845565b506020808301805184516001600160a01b0316600090815260089093526040909220600401805492909203909155515b8251610be79082611ef6565b600a5460ff1615610bfc5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610845565b611c8a611c3c565b600a805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861175c3390565b6001600160a01b038082166000908152600860209081526040918290208251606080820185528254825284519081018552600183015463ffffffff1681526002830154818501526003830154861681860152818401908152845193840185526004909201548352808401929092525190910151909116611d785760405162461bcd60e51b8152602060048201526014602482015273457363617065206164647220697320656d70747960601b6044820152606401610845565b6000611d83836119e1565b90506000611daa8260400151610c90846020015185600001516110ee90919063ffffffff16565b6020938401516040908101516001600160a01b039081166000908152600890965281862080549093019092559416835250509081208181556002810182905560040155565b60006108f782846125bb565b600a5460ff16610bfc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610845565b6000818460200151602001511015611e8f5760405162461bcd60e51b815260206004820152600e60248201526d139bc81c1c995d881b1bd8dad95960921b6044820152606401610845565b60208401515163ffffffff164263ffffffff16106108f75750602092830180518401516001600160a01b0393841660009081526008865260408082209285900360028401558254859003909255825182015190941684529092208054909101905551015190565b6001600160a01b03821660009081526007602090815260408083208151606081018352815460ff81168252610100900463ffffffff169381018490526001909101549181019190915291901561107257602082015163ffffffff164263ffffffff1611156110725760008260200151611f6c4290565b0363ffffffff1690506000611fb5670de0b6b3a7640000611faf68056bc75e2d63100000611fa9612710600080015461204690919063ffffffff16565b90612052565b90612046565b90506000611fd3612710611fa9670de0b6b3a764000081868b612046565b9050611fdf8184612046565b6001600160a01b0388166000908152600760205260409020805464ffffffff001916905560025490945060ff169250508115905061201f57508060065410155b1561107257806006600082825461203691906125bb565b9091555061107290508482611779565b60006108f782846125d2565b60006108f782846125f1565b6040805160608082018352600080835283519182018452808252602082810182905293820152909182019081526020016120a46040518060200160405280600081525090565b905290565b6000815180845260005b818110156120cf576020818501810151868301820152016120b3565b818111156120e1576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006108f760208301846120a9565b80356001600160a01b038116811461212057600080fd5b919050565b6000806040838503121561213857600080fd5b61214183612109565b946020939093013593505050565b60006020828403121561216157600080fd5b6108f782612109565b60008060006060848603121561217f57600080fd5b61218884612109565b925061219660208501612109565b9150604084013590509250925092565b60c08152825160c0820152602083015160e0820152604083015115156101008201526000606084015160c06101208401526121e56101808401826120a9565b9050608085015160bf198483030161014085015261220382826120a9565b60a08701516001600160a01b031661016086015292506108f7915050602083018480518252602080820151805163ffffffff168285015290810151604080850191909152908101516001600160a01b03166060840152015151608090910152565b60006020828403121561227657600080fd5b5035919050565b600080600080600060a0868803121561229557600080fd5b61229e86612109565b94506122ac60208701612109565b94979496505050506040830135926060810135926080909101359150565b6000806000606084860312156122df57600080fd5b6122e884612109565b925060208401359150604084013561ffff8116811461230657600080fd5b809150509250925092565b6000806040838503121561232457600080fd5b61232d83612109565b915061233b60208401612109565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561238357612383612344565b604052919050565b600067ffffffffffffffff8211156123a5576123a5612344565b5060051b60200190565b600082601f8301126123c057600080fd5b813560206123d56123d08361238b565b61235a565b82815260059290921b840181019181810190868411156123f457600080fd5b8286015b848110156124165761240981612109565b83529183019183016123f8565b509695505050505050565b6000806040838503121561243457600080fd5b823567ffffffffffffffff8082111561244c57600080fd5b818501915085601f83011261246057600080fd5b813560206124706123d08361238b565b82815260059290921b8401810191818101908984111561248f57600080fd5b948201945b838610156124ad57853582529482019490820190612494565b965050860135925050808211156124c357600080fd5b506124d0858286016123af565b9150509250929050565b600181811c908216806124ee57607f821691505b6020821081141561250f57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600290820152614e4160f01b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561257157612571612547565b5060010190565b6000821982111561258b5761258b612547565b500190565b600062ffffff808316818516818304811182151516156125b2576125b2612547565b02949350505050565b6000828210156125cd576125cd612547565b500390565b60008160001904831182151516156125ec576125ec612547565b500290565b60008261260e57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220ac6ae32ccebf811f91a4e8eeaaee5bc8c6087a4591992da03bdd70681715951064736f6c63430008090033",
  "devdoc": {
    "author": " For: Quatrefinance  By: Bobeu Github: https://github.com/bobeu Twitter: https://twitter.com/bobman7000",
    "kind": "dev",
    "methods": {
      "accountBalances(address)": {
        "details": "Return who's balances",
        "params": {
          "who": "- Account to enquire for."
        }
      },
      "activateReward()": {
        "details": "Activates reward"
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf} for more info. Returns total spendable balances of `account`"
      },
      "burn(uint256)": {
        "details": "Burns token of `amount`"
      },
      "deActivateReward()": {
        "details": "Deactivates reward"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subVal`."
      },
      "dynamicTransfer(uint256[],address[])": {
        "details": "Batch transfer: enables to transfer to multiple recipients. Also flexible enough to allow for dynamic transfer value."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "lockSpecific(address,uint256,uint16)": {
        "details": "Moves the balance of an 'amount' from regular to locked to balances"
      },
      "maxSupply()": {
        "details": "Returns max supply"
      },
      "mint(address,uint256)": {
        "details": "Mints token of `amount  "
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "panicMove(address)": {
        "details": "Moves the balance of an 'amount' from locked to regular balances"
      },
      "pause()": {
        "details": "Pauses the contract. When called, some functions are halted."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "tokenData(address)": {
        "details": "Returns token data plus \"who's\" profile"
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\"s tokens of at least `amount`. If called by the farmer, it signifies staking."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlockAndTransfer(address,address,uint256)": {
        "details": "Perform dual actions:  1. Unlock subscription balances of 'par.amount'. 2. Move the balance to 'to'. Note : User must initiate a transaction that sends the call otherwise Digesu cannot execute this on its own. Neither can any member of the team nor the deployer is able to influence Digesu to make unintended call."
      },
      "unlockSpecific(uint256)": {
        "details": "Moves the balance of an 'amount' from locked to regular balances"
      },
      "unpause()": {
        "details": "unpauses the contract."
      }
    },
    "title": "QuatreFinance Token is the native token of the Quatrefinance platform. It is a utility token that gives its holders access to Quatrefinance products. Standard: ERC20 Standard. Type: Deflationary. Max Supply: 1_000_000_000. Decimal: 18. For more detail, see ERC20Abstract.sol",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": ": Spendable balance is a function of main balance less the  addition of locked balances and balance in subscription."
      },
      "lockFor(address,uint256)": {
        "notice": "Locks specific amount to `tsrget's` accountCallable only by the Digesu contract on behalf of subscribers on approval. Note : User must initiate a transaction that initiate the call otherise Digesu cannot execute on its own. Neither can any member of the team nor the deployer is able to influence Digesu to make unintended call."
      },
      "unlockFor(address,address,uint256,uint256,uint256)": {
        "notice": "Callable only by the Digesu contract on behalf of subscribers on approval. Note : User must initiate a transaction that sends the call otherwise Digesu cannot execute this on its own. Neither can any member of the team nor the deployer is able to influence Digesu to make unintended call. o User who successfully complete a circle on Digesu are entitled to mint some QFT based on the amount contributed. For proper reward calculation, see Utils.computeReward(). o Minting reqard is based on whether minting is active or not. o A condition may also warrant transfering penalty charged to other party.    "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15247,
        "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
        "label": "meta",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(MetaData)16723_storage"
      },
      {
        "astId": 15249,
        "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
        "label": "reserved",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15255,
        "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
        "label": "tier1",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Share)16710_storage)"
      },
      {
        "astId": 15261,
        "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
        "label": "_balances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Holders)16686_storage)"
      },
      {
        "astId": 15267,
        "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 16901,
        "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
        "label": "_paused",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 16778,
        "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
        "label": "_owner",
        "offset": 1,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 17005,
        "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
        "label": "rewardActive",
        "offset": 21,
        "slot": "10",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Holders)16686_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IERC20.Holders)",
        "numberOfBytes": "32",
        "value": "t_struct(Holders)16686_storage"
      },
      "t_mapping(t_address,t_struct(Share)16710_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IERC20.Share)",
        "numberOfBytes": "32",
        "value": "t_struct(Share)16710_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Holders)16686_storage": {
        "encoding": "inplace",
        "label": "struct IERC20.Holders",
        "members": [
          {
            "astId": 16679,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "main",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16682,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "locked",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(SelfLocked)16693_storage"
          },
          {
            "astId": 16685,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "sub",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Subscription)16696_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(MetaData)16723_storage": {
        "encoding": "inplace",
        "label": "struct IERC20.MetaData",
        "members": [
          {
            "astId": 16712,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "rewardRate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16714,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "tSupply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16716,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "shareActive",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 16718,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 16720,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "symbol",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 16722,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "digesuAddr",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(SelfLocked)16693_storage": {
        "encoding": "inplace",
        "label": "struct IERC20.SelfLocked",
        "members": [
          {
            "astId": 16688,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "lockTil",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 16690,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16692,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "routeTo",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Share)16710_storage": {
        "encoding": "inplace",
        "label": "struct IERC20.Share",
        "members": [
          {
            "astId": 16705,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "idleTimeInDays",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 16707,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "lastLockedDate",
            "offset": 1,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 16709,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "reward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Subscription)16696_storage": {
        "encoding": "inplace",
        "label": "struct IERC20.Subscription",
        "members": [
          {
            "astId": 16695,
            "contract": "contracts/digesu/token/QuatreToken.sol:QuatreToken",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}