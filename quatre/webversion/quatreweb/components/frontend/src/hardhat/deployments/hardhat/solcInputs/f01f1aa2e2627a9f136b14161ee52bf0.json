{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/finance/VestingWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/VestingWallet.sol)\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/utils/SafeERC20.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @title VestingWallet\n * @dev This contract handles the vesting of Eth and ERC20 tokens for a given beneficiary. Custody of multiple tokens\n * can be given to this contract, which will release the token to the beneficiary following a given vesting schedule.\n * The vesting schedule is customizable through the {vestedAmount} function.\n *\n * Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\n * be immediately releasable.\n */\ncontract VestingWallet is Context {\n    event EtherReleased(uint256 amount);\n    event ERC20Released(address indexed token, uint256 amount);\n\n    uint256 private _released;\n    mapping(address => uint256) private _erc20Released;\n    address private immutable _beneficiary;\n    uint64 private immutable _start;\n    uint64 private immutable _duration;\n\n    /**\n     * @dev Set the beneficiary, start timestamp and vesting duration of the vesting wallet.\n     */\n    constructor(\n        address beneficiaryAddress,\n        uint64 startTimestamp,\n        uint64 durationSeconds\n    ) payable {\n        require(beneficiaryAddress != address(0), \"VestingWallet: beneficiary is zero address\");\n        _beneficiary = beneficiaryAddress;\n        _start = startTimestamp;\n        _duration = durationSeconds;\n    }\n\n    /**\n     * @dev The contract should be able to receive Eth.\n     */\n    receive() external payable virtual {}\n\n    /**\n     * @dev Getter for the beneficiary address.\n     */\n    function beneficiary() public view virtual returns (address) {\n        return _beneficiary;\n    }\n\n    /**\n     * @dev Getter for the start timestamp.\n     */\n    function start() public view virtual returns (uint256) {\n        return _start;\n    }\n\n    /**\n     * @dev Getter for the vesting duration.\n     */\n    function duration() public view virtual returns (uint256) {\n        return _duration;\n    }\n\n    /**\n     * @dev Amount of eth already released\n     */\n    function released() public view virtual returns (uint256) {\n        return _released;\n    }\n\n    /**\n     * @dev Amount of token already released\n     */\n    function released(address token) public view virtual returns (uint256) {\n        return _erc20Released[token];\n    }\n\n    /**\n     * @dev Getter for the amount of releasable eth.\n     */\n    function releasable() public view virtual returns (uint256) {\n        return vestedAmount(uint64(block.timestamp)) - released();\n    }\n\n    /**\n     * @dev Getter for the amount of releasable `token` tokens. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function releasable(address token) public view virtual returns (uint256) {\n        return vestedAmount(token, uint64(block.timestamp)) - released(token);\n    }\n\n    /**\n     * @dev Release the native token (ether) that have already vested.\n     *\n     * Emits a {EtherReleased} event.\n     */\n    function release() public virtual {\n        uint256 amount = releasable();\n        _released += amount;\n        emit EtherReleased(amount);\n        Address.sendValue(payable(beneficiary()), amount);\n    }\n\n    /**\n     * @dev Release the tokens that have already vested.\n     *\n     * Emits a {ERC20Released} event.\n     */\n    function release(address token) public virtual {\n        uint256 amount = releasable(token);\n        _erc20Released[token] += amount;\n        emit ERC20Released(token, amount);\n        SafeERC20.safeTransfer(IERC20(token), beneficiary(), amount);\n    }\n\n    /**\n     * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\n     */\n    function vestedAmount(uint64 timestamp) public view virtual returns (uint256) {\n        return _vestingSchedule(address(this).balance + released(), timestamp);\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\n     */\n    function vestedAmount(address token, uint64 timestamp) public view virtual returns (uint256) {\n        return _vestingSchedule(IERC20(token).balanceOf(address(this)) + released(token), timestamp);\n    }\n\n    /**\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\n     * an asset given its total historical allocation.\n     */\n    function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal view virtual returns (uint256) {\n        if (timestamp < start()) {\n            return 0;\n        } else if (timestamp > start() + duration()) {\n            return totalAllocation;\n        } else {\n            return (totalAllocation * (timestamp - start())) / duration();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/ERC777.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC777/ERC777.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC777.sol\";\nimport \"./IERC777Recipient.sol\";\nimport \"./IERC777Sender.sol\";\nimport \"../ERC20/IERC20.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/IERC1820Registry.sol\";\n\n/**\n * @dev Implementation of the {IERC777} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * Support for ERC20 is included in this contract, as specified by the EIP: both\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\n * movements.\n *\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\n * are no special restrictions in the amount of tokens that created, moved, or\n * destroyed. This makes integration with ERC20 applications seamless.\n */\ncontract ERC777 is Context, IERC777, IERC20 {\n    using Address for address;\n\n    IERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    mapping(address => uint256) private _balances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\"ERC777TokensSender\");\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\n    address[] private _defaultOperatorsArray;\n\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\n    mapping(address => bool) private _defaultOperators;\n\n    // For each account, a mapping of its operators and revoked default operators.\n    mapping(address => mapping(address => bool)) private _operators;\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n\n    // ERC20-allowances\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    /**\n     * @dev `defaultOperators` may be an empty array.\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address[] memory defaultOperators_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n\n        _defaultOperatorsArray = defaultOperators_;\n        for (uint256 i = 0; i < defaultOperators_.length; i++) {\n            _defaultOperators[defaultOperators_[i]] = true;\n        }\n\n        // register interfaces\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n    }\n\n    /**\n     * @dev See {IERC777-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC777-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {ERC20-decimals}.\n     *\n     * Always returns 18, as per the\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\n     */\n    function decimals() public pure virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC777-granularity}.\n     *\n     * This implementation always returns `1`.\n     */\n    function granularity() public view virtual override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @dev See {IERC777-totalSupply}.\n     */\n    function totalSupply() public view virtual override(IERC20, IERC777) returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\n     */\n    function balanceOf(address tokenHolder) public view virtual override(IERC20, IERC777) returns (uint256) {\n        return _balances[tokenHolder];\n    }\n\n    /**\n     * @dev See {IERC777-send}.\n     *\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n     */\n    function send(\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\n     * interface if it is a contract.\n     *\n     * Also emits a {Sent} event.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _send(_msgSender(), recipient, amount, \"\", \"\", false);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC777-burn}.\n     *\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n     */\n    function burn(uint256 amount, bytes memory data) public virtual override {\n        _burn(_msgSender(), amount, data, \"\");\n    }\n\n    /**\n     * @dev See {IERC777-isOperatorFor}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {\n        return\n            operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n    }\n\n    /**\n     * @dev See {IERC777-authorizeOperator}.\n     */\n    function authorizeOperator(address operator) public virtual override {\n        require(_msgSender() != operator, \"ERC777: authorizing self as operator\");\n\n        if (_defaultOperators[operator]) {\n            delete _revokedDefaultOperators[_msgSender()][operator];\n        } else {\n            _operators[_msgSender()][operator] = true;\n        }\n\n        emit AuthorizedOperator(operator, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC777-revokeOperator}.\n     */\n    function revokeOperator(address operator) public virtual override {\n        require(operator != _msgSender(), \"ERC777: revoking self as operator\");\n\n        if (_defaultOperators[operator]) {\n            _revokedDefaultOperators[_msgSender()][operator] = true;\n        } else {\n            delete _operators[_msgSender()][operator];\n        }\n\n        emit RevokedOperator(operator, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC777-defaultOperators}.\n     */\n    function defaultOperators() public view virtual override returns (address[] memory) {\n        return _defaultOperatorsArray;\n    }\n\n    /**\n     * @dev See {IERC777-operatorSend}.\n     *\n     * Emits {Sent} and {IERC20-Transfer} events.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    ) public virtual override {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n        _send(sender, recipient, amount, data, operatorData, true);\n    }\n\n    /**\n     * @dev See {IERC777-operatorBurn}.\n     *\n     * Emits {Burned} and {IERC20-Transfer} events.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    ) public virtual override {\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n        _burn(account, amount, data, operatorData);\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     *\n     * Note that operator and allowance concepts are orthogonal: operators may\n     * not have allowance, and accounts with allowance may not be operators\n     * themselves.\n     */\n    function allowance(address holder, address spender) public view virtual override returns (uint256) {\n        return _allowances[holder][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Note that accounts cannot have allowance issued by their operators.\n     */\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\n        address holder = _msgSender();\n        _approve(holder, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Note that operator and allowance concepts are orthogonal: operators cannot\n     * call `transferFrom` (unless they have allowance), and accounts with\n     * allowance cannot call `operatorSend` (unless they are operators).\n     *\n     * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\n     */\n    function transferFrom(\n        address holder,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(holder, spender, amount);\n        _send(holder, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with the caller address as the `operator` and with\n     * `userData` and `operatorData`.\n     *\n     * See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits {Minted} and {IERC20-Transfer} events.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function _mint(\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    ) internal virtual {\n        _mint(account, amount, userData, operatorData, true);\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * If `requireReceptionAck` is set to true, and if a send hook is\n     * registered for `account`, the corresponding function will be called with\n     * `operator`, `data` and `operatorData`.\n     *\n     * See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits {Minted} and {IERC20-Transfer} events.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function _mint(\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    ) internal virtual {\n        require(account != address(0), \"ERC777: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, amount);\n\n        // Update state variables\n        _totalSupply += amount;\n        _balances[account] += amount;\n\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\n\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Send tokens\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _send(\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    ) internal virtual {\n        require(from != address(0), \"ERC777: transfer from the zero address\");\n        require(to != address(0), \"ERC777: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n\n        _move(operator, from, to, amount, userData, operatorData);\n\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n\n    /**\n     * @dev Burn tokens\n     * @param from address token holder address\n     * @param amount uint256 amount of tokens to burn\n     * @param data bytes extra information provided by the token holder\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _burn(\n        address from,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    ) internal virtual {\n        require(from != address(0), \"ERC777: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n\n        _beforeTokenTransfer(operator, from, address(0), amount);\n\n        // Update state variables\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC777: burn amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Burned(operator, from, amount, data, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n\n    function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    ) private {\n        _beforeTokenTransfer(operator, from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC777: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n\n    /**\n     * @dev See {ERC20-_approve}.\n     *\n     * Note that accounts cannot have allowance issued by their operators.\n     */\n    function _approve(\n        address holder,\n        address spender,\n        uint256 value\n    ) internal virtual {\n        require(holder != address(0), \"ERC777: approve from the zero address\");\n        require(spender != address(0), \"ERC777: approve to the zero address\");\n\n        _allowances[holder][spender] = value;\n        emit Approval(holder, spender, value);\n    }\n\n    /**\n     * @dev Call from.tokensToSend() if the interface is registered\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    ) private {\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n\n    /**\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\n     * tokensReceived() was not registered for the recipient\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    ) private {\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {IERC20-Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC777: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC777/IERC777.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777Token standard as defined in the EIP.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {ERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\n     *\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\n     */\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    /**\n     * @dev Emitted when `operator` destroys `amount` tokens from `account`.\n     *\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\n     */\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    /**\n     * @dev Emitted when `operator` is made operator for `tokenHolder`.\n     */\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    /**\n     * @dev Emitted when `operator` is revoked its operator status for `tokenHolder`.\n     */\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Sender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Sender.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\n *\n * {IERC777} Token holders can be notified of operations performed on their\n * tokens by having a contract implement this interface (contract holders can be\n * their own implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Sender {\n    /**\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\n     * is conveyed by `to` being the zero address or not.\n     *\n     * This call occurs _before_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/IERC1820Registry.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(\n        address account,\n        bytes32 _interfaceHash,\n        address implementer\n    ) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     * @param account Address of the contract for which to update the cache.\n     * @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     * @notice Checks whether a contract implements an ERC165 interface or not.\n     * If the result is not cached a direct lookup on the contract address is performed.\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     * {updateERC165Cache} with the contract address.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     * @notice Checks whether a contract implements an ERC165 interface or not without using or updating the cache.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/bootstrapped/Greeter.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract Greeter {\r\n    event newGreeting(string greeting, address sender);\r\n\r\n    string private greeting;\r\n\r\n    constructor(string memory _greet) {\r\n        console.log(\"Deploying a Greeter with greeting:\", _greet);\r\n        greeting = _greet;\r\n    }\r\n\r\n    function greet() public view returns (string memory) {\r\n        return greeting;\r\n    }\r\n\r\n    function setGreeting(string calldata _greeting) external {\r\n        console.log(\"Changing greeting from '%s' to '%s'\", greeting, _greeting);\r\n        greeting = _greeting;\r\n        emit newGreeting(_greeting, msg.sender);\r\n    }\r\n\r\n    // function greetingsAvailable() public returns (string memory,string memory, string memory){\r\n    //     return (\"Morning sunshine\", \"Good day\", \"Have a nice night\");\r\n    // }\r\n}\r\n"
    },
    "contracts/bootstrapped/Oracle.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// import \"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\";\r\n\r\n// You can find more details about RedStone oracles here: https://tinyurl.com/redstone-celo-docs\r\n\r\n/**\r\n * @title Oracle\r\n * @dev Read data from RedStone oracle protocol\r\n */\r\ncontract Oracle {\r\n    // /**\r\n    //  * @dev Calculates amount of CELO tokens equal to a given USD amount\r\n    //  * @return amount of CELO tokens corresponding to a given USD amount\r\n    //  */\r\n    // function getCELOAmountForUSDAmount(uint256 usdAmount) public view returns (uint256) {\r\n    //     // You can use `getPriceFromMsg` in non-view contract functions as well\r\n    //     // But you always need to wrap your ethers.js contract instance using RedStone wrapper\r\n    //     // in your JS interface\r\n    //     uint256 celoPrice = getPriceFromMsg(bytes32(\"CELO\"));\r\n    //     return usdAmount * (10 ** 8) / celoPrice;\r\n    // }\r\n\r\n    // function isSignerAuthorized(address _receviedSigner)\r\n    //     public\r\n    //     override\r\n    //     virtual\r\n    //     view\r\n    //     returns (bool)\r\n    // {\r\n    //     // You can check check evm addresses for providers at: https://api.redstone.finance/providers\r\n    //     return _receviedSigner == 0x0C39486f770B26F5527BBBf942726537986Cd7eb; // redstone main demo provider\r\n    // }\r\n}\r\n"
    },
    "contracts/bootstrapped/SimpleERC115.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract SimpleERC115 is ERC1155, Ownable {\r\n    using Strings for uint256;\r\n\r\n    bool public publicSaleActive;\r\n\r\n    uint256 public constant MAX_SUPPLY = 10;\r\n\r\n    uint256 public mintPrice = 0.01 ether;\r\n\r\n    uint256 private _tokenIds;\r\n\r\n    string[MAX_SUPPLY] private _tokenUris;\r\n\r\n    modifier whenPublicSaleActive() {\r\n        require(publicSaleActive, \"Public sale is not active\");\r\n        _;\r\n    }\r\n\r\n    constructor() ERC1155(\"https://www.trashpanda.racoon/metadata/{id}.json\") {}\r\n\r\n    function addTokenUri(uint256 tokenId, string memory tokenUri)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _tokenUris[tokenId] = tokenUri;\r\n    }\r\n\r\n    function uri(uint256 _id) public view override returns (string memory) {\r\n        if (bytes(_tokenUris[_id]).length > 0) {\r\n            return _tokenUris[_id];\r\n        }\r\n\r\n        return string(super.uri(_id));\r\n    }\r\n\r\n    function startPublicSale() external onlyOwner {\r\n        require(!publicSaleActive, \"Public sale has already begun\");\r\n        publicSaleActive = true;\r\n    }\r\n\r\n    function pausePublicSale() external onlyOwner whenPublicSaleActive {\r\n        publicSaleActive = false;\r\n    }\r\n\r\n    function mint(uint256 numNfts) external payable whenPublicSaleActive {\r\n        require(\r\n            _tokenIds + numNfts <= MAX_SUPPLY,\r\n            \"Minting would exceed max supply\"\r\n        );\r\n        require(numNfts > 0, \"Must mint at least one NFT\");\r\n        require(\r\n            mintPrice * numNfts <= msg.value,\r\n            \"Ether value sent is not correct\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < numNfts; i++) {\r\n            _mint(msg.sender, _tokenIds, 1, \"\");\r\n            _tokenIds += 1;\r\n        }\r\n    }\r\n\r\n    function mintTo(uint256 numNfts, address toAddress)\r\n        external\r\n        onlyOwner\r\n        whenPublicSaleActive\r\n    {\r\n        require(\r\n            _tokenIds + numNfts <= MAX_SUPPLY,\r\n            \"Minting would exceed max supply\"\r\n        );\r\n        require(numNfts > 0, \"Must mint at least one NFT\");\r\n\r\n        for (uint256 i = 0; i < numNfts; i++) {\r\n            _mint(toAddress, _tokenIds, 1, \"\");\r\n            _tokenIds += 1;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/bootstrapped/SimpleERC777.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/token/ERC777/ERC777.sol\";\r\n\r\n/**\r\n * @title Simple777Token\r\n * @dev Very simple ERC777 Token example, where all tokens are pre-assigned to the creator.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `ERC20` or `ERC777` functions.\r\n */\r\ncontract SimpleERC777 is ERC777 {\r\n    address payable owner;\r\n\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     */\r\n    constructor() ERC777(\"Simple777Token\", \"S7\", new address[](0)) {\r\n        _mint(msg.sender, 10000 * 10**18, \"\", \"\");\r\n        owner = payable(msg.sender);\r\n    }\r\n}\r\n"
    },
    "contracts/bootstrapped/SimpleProxyContract.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\ncontract SimpleProxyContract is Ownable {\r\n    using SafeMath for uint256;\r\n    IERC20 cont;\r\n    address tokenAddress;\r\n    address[] walletAddresses;\r\n\r\n    event ReceivedToken(address _from, uint256 _tokens);\r\n    event Distributed(address _owner, uint256 _token);\r\n    event AddedMember(address _member);\r\n    event SetERCToken(address token);\r\n\r\n    function setTokenAddress(address _tokenAddress)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        assert(_tokenAddress != address(0));\r\n        tokenAddress = _tokenAddress;\r\n        cont = IERC20(_tokenAddress);\r\n        emit SetERCToken(_tokenAddress);\r\n        return true;\r\n    }\r\n\r\n    function setWalletMembers(address[] calldata members)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            assert(members[i] != address(0));\r\n            walletAddresses.push(members[i]);\r\n            emit AddedMember(members[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function sendTokens(address _from, uint256 tokens)\r\n        external\r\n        payable\r\n        returns (bool)\r\n    {\r\n        uint256 split;\r\n        assert(walletAddresses.length > 0);\r\n        assert(tokenAddress != address(0));\r\n        //if(tokens < walletAddresses.length) throw;\r\n        assert(tokens >= walletAddresses.length);\r\n\r\n        if (cont.balanceOf(_from) < tokens) revert();\r\n\r\n        split = tokens.div(walletAddresses.length);\r\n        for (uint256 i = 0; i < walletAddresses.length; i++) {\r\n            if (cont.transferFrom(_from, walletAddresses[i], split)) {\r\n                emit Distributed(walletAddresses[i], split);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _account) external view returns (uint256) {\r\n        return cont.balanceOf(_account);\r\n    }\r\n\r\n    function addMember(address _account) external onlyOwner returns (bool) {\r\n        assert(_account != address(0));\r\n        walletAddresses.push(_account);\r\n        emit AddedMember(_account);\r\n        return true;\r\n    }\r\n\r\n    function totalMembers() external view returns (uint256) {\r\n        return walletAddresses.length;\r\n    }\r\n\r\n    function getTokenAddress() external view returns (address) {\r\n        return tokenAddress;\r\n    }\r\n}\r\n"
    },
    "contracts/bootstrapped/SimpleVestingWallet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/finance/VestingWallet.sol\";\r\n\r\ncontract SimpleVestingWallet is VestingWallet {\r\n    constructor(address beneficiaryAddress, uint64 durationSeconds)\r\n        VestingWallet(\r\n            beneficiaryAddress,\r\n            uint64(block.timestamp),\r\n            uint64(durationSeconds)\r\n        )\r\n    {}\r\n\r\n    function releaseToken() public virtual {\r\n        require(checkExpiry(), \"Expired!\");\r\n        release();\r\n    }\r\n\r\n    function checkExpiry() public view returns (bool success) {\r\n        uint256 x = VestingWallet.start() + VestingWallet.duration();\r\n        if (x >= uint256(block.timestamp)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/bootstrapped/Storage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title Storage\r\n * @dev Store & retrieve value in a variable\r\n */\r\ncontract Storage {\r\n\r\n    event newNumber(uint256 number, address sender);\r\n\r\n    uint256 private number = 1;\r\n\r\n    /**\r\n     * @dev Store value in variable\r\n     * @param num value to store\r\n     */\r\n    function store(uint256 num) external {\r\n        number = num;\r\n        emit newNumber(num, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Return value \r\n     * @return value of 'number'\r\n     */\r\n    function retrieve() public view returns (uint256){\r\n        return number;\r\n    }\r\n}\r\n"
    },
    "contracts/bootstrapped/SupportToken.sol": {
      "content": "// contracts/SupportToken.sol\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n/**\r\n * @notice A simple ERC20 Token implementation that also accepts donation for the project\r\n */\r\ncontract SupportToken is ERC20 {\r\n    uint sentIn;\r\n    address payable owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() ERC20(\"Support Token\", \"STT\") {\r\n        /// @notice mint 10000 tokens to the owner\r\n        _mint(msg.sender, 10000e18);\r\n        owner = payable(msg.sender);\r\n        sentIn = 0;\r\n    }\r\n\r\n    function acceptDonation(uint amount)\r\n        public\r\n        payable\r\n        returns (bool accepted)\r\n    {\r\n        require(amount == msg.value, \"Invalid amount!\");\r\n\r\n        sentIn += msg.value;\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawChest() public onlyOwner returns (bool) {\r\n        bool success = owner.send(address(this).balance);\r\n\r\n        if (success) return true;\r\n\r\n        return false;\r\n    }\r\n}\r\n"
    },
    "contracts/digesu/account/Account.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\n// import \"../libs/Context.sol\";\r\n// import \"../interfaces/IERC20.sol\";\r\nimport \"../interfaces/IAccount.sol\";\r\nimport \"../interfaces/IDigesu.sol\";\r\nimport \"../libs/Utils.sol\";\r\nimport \"../libs/Ownable.sol\";\r\nimport \"../libs/ReentrancyGuard.sol\";\r\nimport \"../libs/Address.sol\";\r\n\r\n/**\r\n  @title Account: \r\n    Interactive account is a separate entity distinct fron the owner. \r\n    They are able to interact with most Digesu's products. Routers interact directly with\r\n    accounts, not the owner. They own power to approve or disapprove transactions.\r\n    Routers read and push information to accounts only on trigger by the owner.\r\n      - An exceptional case is where funds need to be moved to the next person.\r\n      - In such case, the owner must have pay back and approve Router to spend \r\n         from their account. Usually, Router locks the amount in user's account\r\n         until the need for it arise.\r\n    Note: Routers don't take actions unless triggered by the owner.\r\n\r\n  Error Code:\r\n    1. Token not supported.\r\n    2. Trying to deposit zero value.\r\n    3. UnAuthorizedCaller.\r\n*/\r\ncontract Account is IAccount, Context, Ownable, ReentrancyGuard {\r\n  using Utils for *;\r\n\r\n  // Address of Router\r\n  address payable private router;\r\n\r\n  //Manager contract\r\n  address public manager;\r\n\r\n  // Address of the Mother branchup\r\n  address private branchUp;\r\n\r\n  //Total amount engaged at any time\r\n  uint private engaged;\r\n\r\n  // Control contract execution\r\n  bool private _pause;\r\n\r\n  // Supported assets\r\n  address[] private supportedAssets;\r\n\r\n  // Mapping of added supported assets\r\n  mapping (address=>bool) public added;\r\n\r\n  // All Subscriptions\r\n  mapping (uint=>Info) public subscriptionInfo;\r\n\r\n  /**@dev Stores balances related to erc20 addresses at anytime\r\n   * both withdrawable and engaged balances.\r\n  */\r\n  mapping (address=>mapping(Balances=>uint)) public balances;\r\n\r\n  /**@dev Initializes state variables.\r\n   *  o We set factory as the router with exclusive access to certain \r\n   *      sensitive functions.\r\n   *  o @param newOwner : i.e the calling EOA is set as the sole owner.\r\n   */\r\n  constructor (address newOwner, address router_) payable {\r\n    router = payable(router_);\r\n    _pause = false;\r\n    manager = payable(_msgSender());\r\n    transferOwnership(newOwner);\r\n  }\r\n\r\n  /**@dev\r\n   * Owner cannot withdraw if account is engaged.\r\n   * This type restriction is enforced to avoid replay && DOS attack \r\n   * by the owner in certain conditions.\r\n   * Both currencies are by default gated.\r\n  */\r\n  modifier syncBalances(address token, uint _amtToWithdraw, uint optionalArg) {\r\n    if(token == address(0)) revert ZeroAddress(token);\r\n    _syncBalances(token, optionalArg);\r\n    uint withdrawable = balances[token][Balances.WITHDAWABLE];\r\n    if(_amtToWithdraw > withdrawable) revert InsufficientFund(\r\n      withdrawable, _amtToWithdraw\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier whenNotPaused() {\r\n    if(_pause) revert ExecutionStopped();\r\n    _;\r\n  }\r\n\r\n  /**@dev\r\n   *  Only supported assets are allowed i.e NATIVE or ERC20\r\n   * @param erc20Address Incoming token address\r\n   * Note Address must not be the zero address.\r\n  */\r\n  modifier isSupportedToken(address erc20Address) {\r\n    if(erc20Address == address(0)) revert ZeroAddress(erc20Address);\r\n    if(!IDigesu(_router()).supportedToken(erc20Address)) revert UnsupportedAsset(erc20Address);\r\n    if(!added[erc20Address]) {\r\n      added[erc20Address] = true;\r\n      supportedAssets.push(erc20Address);\r\n    }\r\n    _;\r\n  }\r\n\r\n  modifier onlyRouter() {\r\n    require(_msgSender() == _router(), \"Account.sol: OnlyRouter\");\r\n    _;\r\n  }\r\n\r\n  // Fallback\r\n  receive() external payable { \r\n    revert IDoNotAcceptEtherIFYouForceItLost();\r\n  }\r\n\r\n  // /**@dev Returns subscrition detail for the pool at 'poolId'\r\n  //  * Note: Read information from this Account based on 'poolId'.\r\n  //  * @param poolId - Exact pool index.\r\n  //  */\r\n  // function getSubscription(uint poolId) external view returns (Info memory _sub) { _sub = subscriptionInfo[poolId]; }\r\n\r\n  // /**@dev\r\n  //  * \r\n  //  */\r\n  // function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\r\n  \r\n  /**@dev Utility to upgrage to a new account.\r\n   * Note : New account must be approved from the accout manager\r\n   *        before they can be upgraded.\r\n   */\r\n  function rekey(address newAccount) external returns(bool) {\r\n    require(_msgSender() == manager, \"NA\");\r\n    address[] memory _assets = supportedAssets;\r\n    for (uint i = 0; i < _assets.length; i++) {\r\n      address asset = supportedAssets[i];\r\n      uint bal = IERC20(asset).balanceOf(address(this));\r\n      if(bal > 0) {\r\n        require(IERC20(asset).transfer(newAccount, bal), \"Error\");\r\n      }\r\n    }\r\n    Address.functionCallWithValue(\r\n      newAccount,\r\n      abi.encodeWithSelector(\r\n        bytes4(keccak256(bytes(\"accept(address[] memory)\"))), \r\n        _assets\r\n      ),\r\n      address(this).balance\r\n    );\r\n    transferOwnership(manager);\r\n    haltExecution();\r\n\r\n    return true;\r\n    // SafeCallAccount.safeTransferData(newAccount, _assets);\r\n  }\r\n\r\n  function haltExecution() private  {\r\n    _pause = true;\r\n  }\r\n\r\n  // Returns router - Gas saving.\r\n  function _router() internal view returns(address _fetched) { _fetched = router; }\r\n\r\n  /**\r\n   * @notice Alternate function to deposit netork asset. \r\n   * Note Public function, no restriction.\r\n  */\r\n  // function depositNative() external payable { require(msg.value > 0, \"2\"); }\r\n\r\n  /**@dev Synchronizes balances. We update both balances each time this \r\n      function is called.\r\n      @param token : Address of the ERC20 supported asset.\r\n      @param optionalArg : is any value that should be deducted along with the actual\r\n                            value sent in call such as makerFee or Router commission.\r\n   */\r\n  function _syncBalances(address token, uint optionalArg) private {\r\n    uint _balInUse = balances[token][Balances(1)];\r\n    balances[token][Balances.WITHDAWABLE] = token == address(this)? address(this).balance : IERC20(token).balanceOf(address(this));\r\n    balances[token][Balances.WITHDAWABLE] -= ( _balInUse + optionalArg );\r\n  }\r\n\r\n  /**\r\n   * @notice Utility to deposit ERC20 token \r\n   * Note Public function, no restriction. Only that token must be supported.\r\n   * @param erc20Address Address of the depositing token.\r\n   * @param amount Deposit amount.\r\n   * @return null\r\n  */\r\n  function depositERC20Token(address erc20Address, uint256 amount) \r\n    external\r\n    whenNotPaused\r\n    isSupportedToken(erc20Address) \r\n    returns(bool) \r\n  {\r\n    IERC20(erc20Address).transferFrom(_msgSender(), address(this), amount).assertUnchained('Transfer Failed');\r\n    _syncBalances(erc20Address, 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  // /**\r\n  //  * @notice Utility to withdraw network asset.\r\n  //  * Note Restricted\r\n  // */\r\n  // function withdrawNativeOnlyRouter(\r\n  //   uint amount, \r\n  //   uint fee, \r\n  //   address to, \r\n  //   address feeTo\r\n  //   ) external onlyRouter nonReentrant syncBalances(address(this), amount, fee){\r\n  //   (bool j,) = feeTo.call{value: fee}(\"\");\r\n  //   (bool i,) = to.call{value: amount}(\"\");\r\n\r\n  //   require(i && j, \"Transfered failed\");\r\n  // }\r\n\r\n  // function withdrawNativeOnlyOwner(uint amount) \r\n  //   public\r\n  //   onlyOwner\r\n  //   syncBalances(address(this), amount, 0)\r\n  // {\r\n  //   payable(owner()).transfer(amount);\r\n  // }\r\n\r\n  /**\r\n   * @notice Get the balance ERC20 token \r\n   * Note Public function, no restriction. Only that token must be supported.\r\n   * @param erc20Address Address of the depositing token.\r\n   * @return _balances \r\n  */\r\n  function erc20Balances(address erc20Address) external view returns(uint256 _balances) {\r\n    require(added[erc20Address], \"NotSupported\");\r\n    return _balances = IERC20(erc20Address).balanceOf(address(this));\r\n  }\r\n\r\n  /**\r\n   * @notice Get the balance ERC20 token \r\n   * Note Public function, no restriction. Only that token must be supported.\r\n  */\r\n  function withdrawERC20TokenOnlyOwner(\r\n    address erc20Address, \r\n    uint amount\r\n  ) \r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    isSupportedToken(erc20Address) \r\n  {\r\n    _withdraw(erc20Address, owner(), amount, 0);\r\n  }\r\n\r\n  function _withdraw(\r\n    address asset, \r\n    address to, \r\n    uint amount,\r\n    uint optArg\r\n  ) private nonReentrant syncBalances(asset, amount, optArg) {\r\n    IERC20(asset).transfer(to, amount);\r\n    _updateBalancesInUse(asset, amount, true);\r\n  }\r\n\r\n  function withdrawRouterOnly(\r\n    address token, \r\n    address to,\r\n    address feeTo,\r\n    uint amount, \r\n    uint fee) external whenNotPaused onlyRouter  returns(bool) {\r\n      _withdraw(token, to, amount, fee);\r\n      _withdraw(token, feeTo, fee, 0);\r\n\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns subscription information for owner relating to poolId\r\n   * Note For every pool the owner has subscribed to, they can fetch data relating to each band.\r\n   * @param poolId index of band.\r\n   * @return Info\r\n  */\r\n  function getSubscriptionInfo(uint poolId) external view returns(Info memory) {\r\n    return subscriptionInfo[poolId];\r\n  }\r\n\r\n  function setStatus(\r\n    uint poolId,\r\n    bool isAdmin, \r\n    bool isMember\r\n  ) external whenNotPaused onlyRouter returns(bool) {\r\n   _setStatus(poolId, isAdmin, isMember);\r\n   \r\n    return true;\r\n  }\r\n\r\n  function _setStatus(\r\n    uint poolId,\r\n    bool isAdmin, \r\n    bool isMember\r\n  ) private {\r\n    subscriptionInfo[poolId].isAdmin = isAdmin;\r\n    subscriptionInfo[poolId].isMember = isMember;\r\n  }\r\n\r\n\r\n  /**@dev Router updates balance in use. \r\n   * Note Callable only by the Mother branchup.\r\n  */\r\n  function updateBalancesInUse(address asset, uint value, bool reduce) \r\n    external \r\n    whenNotPaused \r\n    onlyRouter returns(bool) \r\n  {\r\n    _updateBalancesInUse(asset, value, reduce);\r\n    return true;\r\n  }\r\n\r\n  function _updateBalancesInUse(address asset, uint value, bool reduce) private {\r\n    reduce? balances[asset][Balances.INUSE] -= value : balances[asset][Balances.INUSE] += value;\r\n  }\r\n\r\n  function getSpendableBalance(address token) external view returns(uint _withdrawable, uint _engaged, uint _mostRecent) {\r\n    _withdrawable = balances[token][Balances.WITHDAWABLE];\r\n    _engaged = balances[token][Balances.INUSE];\r\n    _mostRecent = token == address(0) ? IERC20(token).balanceOf(address(this)) : address(this).balance;\r\n  }\r\n\r\n  function approve(address erc20Address, uint amount)\r\n    public\r\n    whenNotPaused\r\n    onlyOwner \r\n    isSupportedToken(erc20Address) {\r\n      IERC20(erc20Address).approve(_router(), amount);\r\n  }\r\n\r\n  function updateTurnTime(uint poolId) external whenNotPaused returns(bool) {\r\n    subscriptionInfo[poolId].turnTime = block.timestamp + 1 hours;\r\n    return true;\r\n  }\r\n  \r\n  function initializeInfo(\r\n    Info memory info, \r\n    bool lock,\r\n    bool reduceBalance,\r\n    uint poolId,\r\n    uint value,\r\n    address asset,\r\n    address to\r\n  ) external whenNotPaused returns(bool) {\r\n    subscriptionInfo[poolId] = info;\r\n    if(lock) {\r\n      _updateBalancesInUse(asset, value, reduceBalance);\r\n    } else {\r\n      _withdraw(asset, to, value, 0);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function clearSubscription(uint poolId) \r\n    external \r\n    whenNotPaused \r\n    onlyRouter returns(bool) {\r\n      delete subscriptionInfo[poolId];\r\n      return true;\r\n  }\r\n\r\n  function split(\r\n    uint poolId,\r\n    address asset,\r\n    address[] memory members,\r\n    address closeTo,\r\n    uint unitAmount, \r\n    uint _balance) external whenNotPaused onlyRouter returns(bool) \r\n    {\r\n      _setStatus(poolId, false, false);\r\n      uint _bal = _balance;\r\n      for(uint i = 0; i < members.length; i++) {\r\n        _bal -= unitAmount;\r\n        _withdraw(\r\n          asset, \r\n          members[i], \r\n          unitAmount,\r\n          0\r\n        );\r\n      }\r\n      if(_bal > 0) _withdraw(  asset,   closeTo,   unitAmount,  0);\r\n\r\n      return true;\r\n  }\r\n\r\n\r\n}"
    },
    "contracts/digesu/account/AccountManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"../interfaces/ICommon.sol\";\r\nimport \"./Account.sol\";\r\nimport \"../interfaces/IAccount.sol\";\r\nimport \"../interfaces/IAccountManager.sol\";\r\n\r\n/**@title AccountManager: standalone contract that manages account creation, \r\n   deletion, including read and write data.\r\n\r\n   Author: Bobeu\r\n   Github: https://github.com/bobeu\r\n */\r\ncontract AccountManager is IAccountManager, ICommon, Ownable {\r\n  uint public accountsCounter;\r\n\r\n  // Acount creation fee\r\n  uint private accountCreationFee;\r\n\r\n  //Address to receive fee\r\n  address private feeTo;\r\n\r\n  // Digesu factory contract address\r\n  address public factory;\r\n\r\n  //Approvals to upgrade to a new account\r\n  mapping(address=>bool) public approvals;\r\n\r\n  ///@dev Users mapped to records\r\n  mapping (address=>Accounts) private accounts;\r\n\r\n  // constructor () {}\r\n\r\n  modifier scrutinizeAccount(address who, bool value, string memory errorMessage) {\r\n    require(hasAccount(who) ==  value, errorMessage);\r\n    _;\r\n  }\r\n  \r\n  /**@dev Return true if \"who's\" account status is not empty\r\n       otherwise false.\r\n   */\r\n  function hasAccount(address who) public view override returns (bool) {\r\n    return accounts[who].active != address(0);\r\n  }\r\n\r\n  // Set account creation fee : Should be called only by the multisig account\r\n  function setAccountCreationFee(uint newFee) public onlyOwner {\r\n    accountCreationFee = newFee;\r\n  }\r\n  \r\n  // Returns account for 'who'\r\n  function getAccount(address who) external view returns (address) { \r\n    return accounts[who].active; \r\n  }\r\n  \r\n  /**@dev Launches new INTERACTIVE account for 'who'.\r\n   * If fee is applied, msg.value must meet minimum creationFee otherwise, creation fail.\r\n   * Owner can prefund account at construction if they wish do so. They only have to increase the msgValue\r\n   * above minimum accountCreationFee.\r\n  */\r\n  function createAccount(uint initialAccountBalance, address who)\r\n    external \r\n    payable\r\n    scrutinizeAccount(who, false, \"User exist\")\r\n    returns(address newAlc) \r\n  {\r\n    require(msg.value >= accountCreationFee && feeTo != address(0), \"3\");\r\n    accountsCounter ++;\r\n    newAlc = address(new Account{value: initialAccountBalance}(who, _getFactory()));\r\n    accounts[_msgSender()].active = newAlc;\r\n\r\n    emit AccountLaunched(newAlc, _msgSender());\r\n  }\r\n\r\n  // Reset address to receive fee : only by owner account.\r\n  function changeFeeTo(address newFeeTo) public onlyOwner {\r\n    if(newFeeTo == address(0)) revert ZeroAddress(newFeeTo);\r\n    feeTo = newFeeTo;\r\n  }\r\n\r\n  //Reset factory address : onlyOwner\r\n  function setFactory(address newFactory) public onlyOwner {\r\n    if(newFactory == address(0)) revert ZeroAddress(newFactory);\r\n    factory = newFactory;\r\n  }\r\n\r\n  /**@dev Upgrade to a new account.\r\n   * @param newAccount : New account to upgrade to.\r\n   * Note : newAccount must be approved prior to this call\r\n   */\r\n  function rekeyAccount(address newAccount) \r\n    external\r\n    scrutinizeAccount(_msgSender(), true, \"User not exist\")\r\n    returns(bool) \r\n  {\r\n    if(!approvals[newAccount]) revert AccountNotApproved();\r\n    address oldAlc = accounts[_msgSender()].active;\r\n    require(factory != address(0) && _msgSender() == factory, \"Denied\");\r\n    if(!IAccount(oldAlc).rekey(newAccount)) revert SomethingWentWrong();\r\n\r\n    emit Rekeyed(oldAlc, newAccount);\r\n    return true;\r\n  }\r\n\r\n  /**@dev Approves new account for upgrade\r\n   * Note : Same utility can also disapprove\r\n  */\r\n  function setApproval(address newAccount, bool _approval) public onlyOwner {\r\n    if(approvals[newAccount] == _approval) revert StatusAlreadyUpdated();\r\n    approvals[newAccount] = _approval;\r\n  }\r\n\r\n  ///@dev Deactivate account for 'target'\r\n  function deactivateAccount(address target) \r\n    public\r\n    onlyOwner\r\n    scrutinizeAccount(target, true, \"User is deactivated\")\r\n  {\r\n    Accounts memory alcs = accounts[target];\r\n    accounts[target] = Accounts(alcs.deactivated, alcs.active);\r\n  }\r\n\r\n  ///@dev Aactivate account for 'target'\r\n  function activateAccount(address target) \r\n    public\r\n    onlyOwner\r\n    scrutinizeAccount(target, false, \"User is deactivated\")\r\n  {\r\n    Accounts memory alcs = accounts[target];\r\n    if(alcs.deactivated == address(0)) revert TargetHasNoAccount();\r\n    accounts[target] = Accounts(alcs.deactivated, alcs.active);\r\n  }\r\n\r\n  function _getFactory() internal returns(address _fact) {\r\n    factory = _fact;\r\n  }\r\n}"
    },
    "contracts/digesu/Digesu.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"./DigesuLib.sol\";\r\n\r\n\r\n/**AUTHOR: ISAAC JESSE \r\n * GITHUB: \"https://github.com/bobeu\"\r\n * LINKEDIN: \"https://linkedin.com/\r\n*/\r\n\r\n\r\n/** \r\n  Digesu\r\n    ======\r\n    A multi-peer finance structure that allows many parties come together, contribute money\r\n    in equal amount for the purpose of financing themselves in a rotational manner. All the \r\n    participant is lender and borrower same time. Each beneficiary pays back with very minimal\r\n    maker rate that's almost insignificant ranging between as little as 0.1 to 5%. The maker \r\n    rate being an amount charged in favor of the platform.\r\n\r\n    For every successful circle, all the participant is entitled to farming reward in QFT, with \r\n    which they can make more profit. We also bountily reward best performing band every 3 months. \r\n\r\n      Example: A 3-man band (A, B, C) created with unit amount 1 ETH.\r\n              - 'A' launches the band with a commitment of 1 ETH, becomes the admin\r\n              - 'A' is added to slot 1, and a trustee is created for the band.\r\n              - 1 ETH is forwarded to trustee.\r\n              - 'B' joins with commitment of 1 ETH, added to slot 2.\r\n              - 'C' joins with commitment of 1 ETH, added to slot 3.\r\n              - There is 3 ETH locked with Trustee, and \"A's\" time to withdraw is now.\r\n              - Join function is disabled, and 'GetFinance' is unlocked.\r\n              - 3 ETH is available to 'B' to withdraw.\r\n              - 'B's wallet is screened for enough collateral (QFT).\r\n                o If true, 3 ETH is sent to 'B' otherwise operation failed.\r\n                o If time for 'B' to withdraw has passed, any member of the band\r\n                  who is the current caller will replace \"B's\" position, and claim\r\n                  the fund.\r\n                o Assume 'C' calls, \"C's\" position is swapped with \"B's\".\r\n\r\n                    CIRCUIT BREAK\r\n                    -------------\r\n                    o There is a circuit break when any member of such band explicitly call the roundUp().\r\n                    o This can only be done when all the participants has successfully 'GETFINANCED'.\r\n\r\n                PAYBACK: \r\n                ======\r\n                o Any member that 'GETFINANCE' has a payback period which was initially specified \r\n                  by the admin.\r\n                o If the payback period elapsed, nothing is done, until someone calls to liquidate\r\n                  the defaulter.\r\n                o If after time elapsed, the beneficiary calls, they're surcharge with 5% of the \r\n                  collateral balance (in token value). The penalty is charged in favor of the next\r\n                  on the queue to 'GETFINANCE', and his/her account is credited. The balance being\r\n                  the amount left after 5% deduction is released to the owner.\r\n                o If the beneficiary stays within expected repayment time (ERP), the above shall not\r\n                  apply. Their collateral balance is unlocked immediately.\r\n                \r\n                LIQUIDATION\r\n                ==========\r\n                o Anyone (either a member or outsider) can liquidate the defaulter. When this happens,\r\n                  the liquidator absorbs the current debt (exact amount or greater must be sent along\r\n                  with the call). They absorbs fully the profile of the defaulter including the collateral\r\n                  balances. The circle then continues.\r\n\r\n     ERROR CODE\r\n     ==========\r\n  1. Function not available.\r\n  2. Value is below minimum.\r\n  3. Not a member.\r\n  4. Pool not ready.\r\n  5. No debt found.\r\n  6. User is yet to default payment.\r\n  7. Address is empty.\r\n  8. Price is empty.\r\n  9. Members exceed limit.\r\n  10. Already a member of this band.\r\n  11. Value out of bound.\r\n\r\n    1. Amount exists\r\n  2. Not an Owner\r\n  3. Insufficient balance\r\n  4. Out of bound.\r\n  5. Pool is filled.\r\n  6. Function locked.\r\n  7. User not a member in this band.\r\n  8. Value less than expected.\r\n  9. Invalid pool id.\r\n  10. User already getFinance.\r\n  11. User is yet to default payment.\r\n  12. Address is empty.\r\n  13. Invalid positioning.\r\n  14. Anomally detected: User not paid;\r\n  15. Cannot cancel at this time. Pool already more than 1.\r\n  16. All members yet to GetFinance.\r\n  17. Cannot have admin in multiple places.\r\n  18. User cannot replicate in a band.\r\n  19. Invalid input.\r\n  20. Operation failed.\r\n */\r\n\r\ncontract Digesu is IDigesu, Currency, FuncHandler, Pausable, Ownable {\r\n  using Utils for bool;\r\n  using DigesuLib for *;\r\n\r\n  Data private data;\r\n\r\n    // Creation fee\r\n  uint public creationFee;\r\n\r\n  // Minimum amount that can be contributed\r\n  uint public minimumPoolAmount;\r\n\r\n  IAccountManager public manager;\r\n\r\n    /**Other statistical data - Read-only\r\n      o Total Values contributed todate;\r\n      o Total subscribers;\r\n  */\r\n  CR public cr;\r\n\r\n  modifier validateId(uint poolId) {\r\n    data.pools.comparePoolSize(poolId);\r\n    _;\r\n  }\r\n  \r\n  // Only when user is a member.\r\n  modifier memberStatus(uint poolId, address who, bool value, Mode mode) {\r\n    data.pools.assertIsMember(poolId, who, value);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n    @dev Compares number of participants.\r\n      @param quorum - Number that should make up the required participants.\r\n  */\r\n  modifier validateQuorum(uint8 quorum) {\r\n    if(quorum == 0) revert InvalidInput();\r\n    if(quorum > type(uint8).max) revert InvalidInput();\r\n    // bool(quorum > 0).assertChained2(quorum <= type(uint8).max, \"9\");\r\n    _;\r\n  }\r\n\r\n  /**@dev Scrutinize account from _msgSender if it exist\r\n   * or not. \r\n   * Note: Execution depends on the 'value'\r\n   */\r\n  modifier checkIfAccountExist(address who, bool value) {\r\n    _check(value, who);\r\n    _;\r\n  }\r\n\r\n  modifier checkIfAddressesAreSet(address _token, address feeTo,address _manager) {\r\n    require(_token != address(0) && feeTo != address(0) && _manager != address(0), \"Addresses not set\");\r\n    _;\r\n  }\r\n\r\n  modifier validateList(address[] memory members, Mode mode) {\r\n    if(mode == Mode.STRICT) {\r\n      if(members.length <= 1) revert InsufficientQuorum();\r\n      // require(members.length > 1, \"19\");\r\n    }\r\n    require(members[0] ==_msgSender(), \"19\");\r\n    _;\r\n  }\r\n\r\n  function setParams(\r\n    address _token, \r\n    uint _minimumPoolAmount, \r\n    address feeTo,\r\n    address _manager\r\n  ) \r\n    public onlyOwner  checkIfAddressesAreSet( _token,  feeTo, _manager )\r\n  {\r\n    data.pcd.token = _token;\r\n    data.pcd.feeTo = feeTo;\r\n    minimumPoolAmount = _minimumPoolAmount;\r\n    manager = IAccountManager(_manager);\r\n  }\r\n\r\n  //Fallback - Forward unsolicited Ether.\r\n  receive() external payable {\r\n    Address.sendValue(payable(data.pcd.feeTo), msg.value);\r\n  }\r\n\r\n  //Return account belonging to 'who';\r\n  function _account(address who) internal view returns(address alc) {\r\n    alc = manager.getAccount(who);\r\n  }\r\n\r\n  /**@dev If 'value' is true, 'who' must not already own an account\r\n   * otherwise, 'who' must own an account before now.\r\n   */\r\n  function _check(bool value, address who) internal view {\r\n    value? require(_account(who) == address(0), \"1\") : require(_account(who) != address(0), \"2\");\r\n  }\r\n\r\n  /**\r\n    @dev Launches a public band - Native currency i.e ETH or Platform currency.\r\n      @param quorum - Required number of participants to form a band. \r\n      @param durationInDays - The maximum time limit (from when the turn time begins) with which a participant\r\n                                will take custody of the loan before repayment.\r\n      @param colCoverageRatio - Collateral factor - determinant of the amount of collateral to require of gFer.\r\n                                  This is expressed as a multiple index of total loanable amount.\r\n      @param amount - Unit contribution.\r\n      @param asset - address of the ERC20 standard asset to use.\r\n                Note: asset must be supported by digesu.\r\n  */\r\n  function createPublicPool(\r\n    uint8 quorum, \r\n    uint8 durationInDays, \r\n    uint16 colCoverageRatio, \r\n    uint amount,\r\n    address asset) \r\n      external\r\n      whenNotPaused\r\n      validateQuorum(quorum)\r\n      checkIfAccountExist(_msgSender(), false) \r\n      onlySupportedToken(asset)\r\n      // checkIfAddressesAreSet(data.pcd.token,  data.pcd.feeTo, address(manager) )\r\n      returns (bool)\r\n  {\r\n      address[] memory addrs = new address[](1);\r\n      addrs[0] = _msgSender();\r\n      (uint newPoolId) = data.createPublicPool(P1\r\n        (\r\n          uint8(quorum),\r\n          durationInDays,\r\n          colCoverageRatio,\r\n          amount,\r\n          addrs,\r\n          asset\r\n        ),\r\n        _account,\r\n        _unlock\r\n      );\r\n    require(data.pcd.token != address(0) && data.pcd.feeTo != address(0) && address(manager) != address(0), \"Addresses not set\");\r\n    emit BandCreated (newPoolId, data.pools._fetchPoolData(newPoolId));\r\n    return true;\r\n  }\r\n\r\n   /**\r\n    @dev Launches a public band - Native currency i.e ETH or Platform currency.\r\n      @param durationIndays - The maximum time limit (from when the turn time begins) with which a participant\r\n                                will take custody of the loan before repayment.\r\n      @param colCoverateRatio - Collateral factor - determinant of the amount of collateral to require of gFer.\r\n                                  This is expressed as a multiple index of total loanable amount.\r\n      @param members- List of expected members.\r\n      @param asset - Asset's contract address.\r\n      @param amount - Contribution amount.\r\n  */\r\n  function createPrivatePool(\r\n    uint8 durationIndays, \r\n    uint16 colCoverateRatio, \r\n    address[] memory members, \r\n    address asset,\r\n    uint amount) \r\n      external \r\n      whenNotPaused\r\n      validateQuorum(uint8(members.length))\r\n      checkIfAccountExist(_msgSender(), false) \r\n      onlySupportedToken(asset)\r\n      validateList(members, Mode.STRICT)\r\n      returns(bool)\r\n  {\r\n    uint newPoolId = data.createPrivatePool(P1\r\n      (\r\n        uint8(members.length),\r\n        durationIndays,\r\n        colCoverateRatio,\r\n        amount,\r\n        members,\r\n        asset\r\n      ),\r\n      _account,\r\n      _check,\r\n      _unlock\r\n    );\r\n    emit BandCreated (newPoolId, data.pools._fetchPoolData(newPoolId));\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n    @dev Updates minimum amount contribution amount\r\n      Note: Only Owner have the privilege to call this function.\r\n  */\r\n  function updateMinPoolAmount(uint256 newAmount) public onlyOwner {\r\n    minimumPoolAmount = newAmount;\r\n  }\r\n  \r\n  /**@dev Add new member.\r\n      @param poolId : Band index.\r\n        Note: We set up a trustee to hold all funds in the pool at poolId in trust \r\n                  for all members.\r\n   */\r\n  function joinABand(uint poolId) \r\n    external\r\n    whenNotPaused\r\n    validateId(poolId)\r\n    checkIfAccountExist(_msgSender(), false)\r\n    memberStatus(poolId, _account(_msgSender()), false, data.pools._getMode(poolId))\r\n    checkFunctionPass(poolId, FuncTag.ADD)\r\n    returns(bool)\r\n    {\r\n      (Pool memory _p, address alc) = data.pools.joinABand(poolId, _account);\r\n      cr.totalValueContributed += _p.uint256s.unit;\r\n      cr.subscribers ++;\r\n      if(_p.mems.length == _p.uints.quorum) {\r\n        _lock(poolId, FuncTag.ADD);\r\n        _unlock(poolId, FuncTag.GET);\r\n        if(!IAccount(alc).updateTurnTime(poolId)) revert Failed();\r\n        // require(IAccount(alc).updateTurnTime(poolId), \"Failed\");\r\n      }\r\n\r\n      emit Joined(poolId, alc, _p.uint256s.unit);\r\n\r\n      return true;\r\n  }\r\n\r\n  \r\n  /**@dev Members of a pool can pick up the contributed fund when certain coditions\r\n          are met.\r\n      @param poolId : Band's Id which caller belong to.\r\n        Note:\r\n  */\r\n  function getFinance(uint poolId) \r\n    external\r\n    whenNotPaused \r\n    validateId(poolId)\r\n    checkIfAccountExist(_msgSender(), false) \r\n    memberStatus(poolId, _account(_msgSender()), true, data.pools._getMode(poolId))\r\n    checkFunctionPass(poolId, FuncTag.GET)\r\n    returns(bool)\r\n  {\r\n   (address valueTo, uint position) = data.getFinance(ICommon.CreateParam(poolId, _lock, _account, _getQFTPriceInETH));\r\n\r\n    emit GetFinanced(poolId, position, valueTo);\r\n    return true;\r\n  }\r\n\r\n   /**\r\n    @dev Utility to payback borrowed fund.\r\n      @param poolId : Pool number.\r\n      Note: We are only concerned about who is to pay back and not \r\n              who is paying back meaning any of the members can pay \r\n              on behalf of another.\r\n   */\r\n  function payback(uint poolId) \r\n    external \r\n    whenNotPaused\r\n    checkIfAccountExist(_msgSender(), false)\r\n    validateId(poolId)\r\n    memberStatus(poolId, _account(_msgSender()), true, data.pools._getMode(poolId))\r\n    returns(bool)\r\n  {\r\n    (GCB memory gcb, address alc) = data.payback(\r\n      poolId, \r\n      _account, \r\n      _lock, \r\n      _unlock\r\n    );\r\n    CR memory _cr = cr;\r\n    gcb.cr = _cr;\r\n    Utils.unlockCollateral(gcb);\r\n\r\n    emit Payback(poolId, gcb.cr2.valueContributed, alc);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  @dev Liquidates defaulter.\r\n    Note: The expected repayment time for last paid must have passed.\r\n  */\r\n  function liquidate(uint poolId) \r\n    external \r\n    whenNotPaused\r\n    checkIfAccountExist(_msgSender(), false)\r\n    returns(bool)\r\n  {\r\n    (address liq, uint amount) = data.liquidate(poolId, _msgSender(), _account);\r\n    emit Payback(poolId, amount, liq);\r\n\r\n    return true;\r\n  }\r\n\r\n  // See SubMain._enquireLiquidation(pid);\r\n  function enquireLiquidation(uint poolId) external view returns(Liquidation memory)  { \r\n    return data.pools.enquireLiquidation(poolId); \r\n  }\r\n\r\n   //See SubMain.sol\r\n  function roundUp(uint poolId) \r\n    external\r\n    whenNotPaused \r\n    checkFunctionPass(poolId, FuncTag.COMPLETE)\r\n    validateId(poolId)\r\n    checkIfAccountExist(_msgSender(), false)\r\n    memberStatus(poolId, _account(_msgSender()), true, data.pools._getMode(poolId))\r\n    returns(bool)\r\n  { \r\n    ICommon.Pool memory pool = data.roundUp(poolId);\r\n    emit ICommon.RoundUp(poolId, pool);\r\n\r\n    return true;\r\n  }\r\n\r\n  ///@dev Pauses contract\r\n  function pause() public onlyOwner {\r\n    _pause();\r\n  }\r\n\r\n  ///@dev Unpauses contract\r\n  function unpause() public onlyOwner {\r\n    _unpause();\r\n  }\r\n\r\n  ///@dev Updates penalty fee.\r\n  function updatePublicData(\r\n    address feeTo,\r\n    address token,\r\n    uint8 penFee,\r\n    uint8 makerFee\r\n  ) public onlyOwner \r\n  {\r\n    data.updatePublicData( feeTo, token, penFee, makerFee );\r\n  }\r\n\r\n  // See SubMain.cancelBand(pid, who);\r\n  function cancelBand(uint poolId) \r\n    external\r\n    whenNotPaused\r\n    validateId(poolId)\r\n    checkIfAccountExist(_msgSender(), false)\r\n    memberStatus(poolId, _account(_msgSender()), true, data.pools._getMode(poolId))\r\n    returns(bool)\r\n  {\r\n    (uint value, address alc) = data.cancelBand(poolId, _account);\r\n    emit Cancellation(poolId, value, alc);\r\n    \r\n    return true;\r\n  }\r\n\r\n  // See SubMain._getPools()\r\n  function allPools() public view returns(Pool[] memory) {\r\n    return data.getPools();\r\n  }\r\n\r\n  function setSupportedTokens(address newToken) public override onlyOwner {\r\n    super.setSupportedTokens(newToken);\r\n  }\r\n\r\n  function supportedToken(address _token) external view returns(bool) {\r\n    return _supportedToken(_token);\r\n  }\r\n\r\n  // Get the token ptice\r\n  function _getQFTPriceInETH() internal pure returns (uint _price) {\r\n    _price = 1e15 wei; // ================================================> We use oracle here\r\n  }\r\n\r\n}"
    },
    "contracts/digesu/DigesuLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"./interfaces/IDigesu.sol\";\r\nimport \"./interfaces/ICommon.sol\";\r\nimport \"./libs/Utils.sol\";\r\nimport \"./peripherals/FuncHandler.sol\";\r\nimport \"./account/AccountManager.sol\";\r\nimport \"./peripherals/Currency.sol\";\r\nimport \"./interfaces/IAccountManager.sol\";\r\n\r\n/**\r\n  ERROR CODE\r\n  ==========\r\n  1. Amount exists\r\n  2. Not an Owner\r\n  3. Insufficient balance\r\n  4. Out of bound.\r\n  5. Pool is filled.\r\n  6. Function locked.\r\n  7. User not a member in this band.\r\n  8. Value less than expected.\r\n  9. Invalid pool id.\r\n  10. User already getFinance.\r\n  11. User is yet to default payment.\r\n  12. Address is empty.\r\n  13. Invalid positioning.\r\n  14. Anomally detected: User not paid;\r\n  15. Cannot cancel at this time. Pool already more than 1.\r\n  16. All members yet to GetFinance.\r\n  17. Cannot have admin in multiple places.\r\n  18. User cannot replicate in a band.\r\n  19. Invalid input.\r\n  20. Operation failed.\r\n */\r\n\r\nstruct Data {\r\n  //Other miscellaneous data. \r\n  IDigesu.PublicData pcd;\r\n\r\n  //Pool container\r\n  ICommon.Pool[] pools;\r\n    /**\r\n  @dev Tracks unit contribution.\r\n    @notice User cannot launch a pool with amount \r\n              already active until such band is filled or cancelled. \r\n  */\r\n  mapping(uint256 => bool) amountExist;\r\n}\r\n\r\nlibrary DigesuLib {\r\n  using Utils for *;\r\n\r\n  ///@dev Checks if @param who { caller } belongs to pool poolId\r\n  function assertIsMember(ICommon.Pool[] storage self, uint poolId, address who, bool value) internal view {\r\n    uint pos = _fetchPosition(poolId, who);\r\n    bool isMember = self[poolId].mems[pos] == who;\r\n    bool(isMember == value).assertUnchained(\"7\");\r\n  }\r\n\r\n  /**@dev Returns tracker Id\r\n      @param poolId - Group index.\r\n   */\r\n  function _getTracker(ICommon.Pool[] storage self,  uint poolId) internal view returns (uint8 _return) {\r\n    _return = uint8(self[poolId].mems.length);\r\n  }\r\n\r\n  ///@dev Returns all uint256s related data in pool at poolId.\r\n  function _fetchPoolData(ICommon.Pool[] storage self, uint poolId) internal view returns (ICommon.Pool memory _return) {\r\n    _return = self[poolId];\r\n  }\r\n\r\n  function _msgSender() internal view returns(address _sender) {\r\n    _sender = msg.sender;\r\n  }\r\n\r\n  ///@dev Returns total pool\r\n  function getPools(Data storage self) public view returns (ICommon.Pool[] memory) {\r\n    return self.pools;\r\n  }\r\n\r\n  function comparePoolSize(ICommon.Pool[] storage self, uint poolId) internal view {\r\n    bool(poolId < self.length).assertUnchained(\"9\");\r\n  }\r\n\r\n  ///@dev Generates new Id for new pool\r\n  function _generateGroupIndex(ICommon.Pool[] storage self) internal view returns (uint _return) {\r\n    _return = uint(self.length);\r\n  }\r\n\r\n  //@dev Adds new member\r\n  function _addNewMember(ICommon.Pool[] storage self, uint poolId, address who) private returns( uint position) {\r\n    // tracker = _getTracker(poolId);\r\n    position = self[poolId].mems.length;\r\n    self[poolId].mems.push(who);\r\n    // if(who == _account(_msgSender())) pools[poolId].uints.tracker ++;\r\n  }\r\n\r\n  function _createPool(\r\n    Data storage self, \r\n    ICommon.P1 memory p1, \r\n    ICommon.Mode mode, \r\n    uint poolId,\r\n    function (uint, ICommon.FuncTag) internal _unlock\r\n    ) private {\r\n      bool(p1.duration > 0).assertChained3(p1.members.length > 0, p1.duration < type(uint8).max, \"4\");\r\n      self.pools.push();\r\n      self.pools[poolId].uints = ICommon.Uints(mode, p1.quorum, 0, p1.ccr, p1.duration * 1 days);\r\n      self.pools[poolId].uint256s =  ICommon.Uint256s(p1.value, 0, p1.value);\r\n      self.pools[poolId].addrs = ICommon.Addresses(p1.asset, address(0));\r\n      _unlock(poolId, ICommon.FuncTag.ADD);\r\n      // _unlock(poolId, FuncTag.ADD);\r\n  }\r\n\r\n  /**@dev Launches a new public band\r\n      @param p1 : Encapsulates parameters required by this function.\r\n    Note: We explicitly added the band creator to 2nd position.\r\n   */\r\n  function createPublicPool( \r\n    Data storage self, \r\n    ICommon.P1 memory p1,\r\n    function (address) internal view returns(address) _account,\r\n    // function (bool, address) internal view _check,\r\n    function (uint, ICommon.FuncTag) internal _unlock\r\n    // function (address, address, uint) internal _screenBalance\r\n  )\r\n    internal\r\n    returns (uint poolId)\r\n  {\r\n    address alc = _account(p1.members[0]);\r\n    self.amountExist[p1.value].assertNotUnchained(\"1\");\r\n    _screenBalance(p1.asset, alc, p1.value);\r\n    poolId = _generateGroupIndex(self.pools);\r\n    bool(p1.duration > 0).assertChained2(p1.duration < type(uint16).max, \"4\");\r\n    _createPool(self, p1, ICommon.Mode(0), poolId, _unlock);\r\n    _initializeAccount(self.pools, alc, p1.asset, address(0), true, poolId, true, true, p1.value);\r\n    \r\n  }\r\n\r\n  /**@dev Launches a new private band\r\n      @param p1 : Encapsulates parameters required by this function.\r\n      Note: Caller must correspond to address at position 2 in the address array.\r\n   */\r\n  function createPrivatePool(\r\n    Data storage self, \r\n    ICommon.P1 memory p1,\r\n    function (address) internal view returns(address) _account,\r\n    function (bool, address) internal view _check,\r\n    function (uint, ICommon.FuncTag) internal _unlock\r\n  ) \r\n    internal\r\n    returns (uint poolId) \r\n  {\r\n    _screenBalance(p1.asset, _account(_msgSender()), p1.value);\r\n    poolId = _generateGroupIndex(self.pools);\r\n    _createPool(self, p1, ICommon.Mode(1), poolId, _unlock);\r\n\r\n    for (uint i = 0; i < p1.members.length; i++) {\r\n      bool isAdmin = true;\r\n      bool reduce = false;\r\n      uint value = p1.value;\r\n      address alc = _account(p1.members[i]);\r\n      bool(alc != address(0)).assertUnchained(\"17\");\r\n      if(i > 0) {\r\n        isAdmin = false;\r\n        _check(false, alc);\r\n        value = 0;\r\n        bool(alc != _account(_msgSender())).assertUnchained(\"17\");\r\n      }\r\n      _initializeAccount(self.pools, alc, p1.asset, address(0), true, poolId, isAdmin, reduce, value);\r\n    }\r\n  }\r\n\r\n  function _initializeAccount(\r\n    ICommon.Pool[] storage self,\r\n    address alc, \r\n    address token,\r\n    address transferTo,\r\n    bool lock, \r\n    uint poolId, \r\n    bool isAdmin,\r\n    bool reduce,\r\n    uint value\r\n  ) private {\r\n    poolId.safeInitializeInfo(\r\n      ICommon.Info(_addNewMember(self, poolId, alc), 0, 0, 0, 0, 0, isAdmin, true, false), \r\n      lock,\r\n      reduce,\r\n      IAccount(alc),\r\n      value,\r\n      token,\r\n      transferTo\r\n    );\r\n  }\r\n\r\n  function _screenBalance(address token, address alc, uint value) private view {\r\n    (, uint _engaged, uint _mostRecent) = IAccount(alc).getSpendableBalance(token);\r\n    require(_mostRecent > _engaged &&  (_mostRecent - _engaged) >= value , \"3\");\r\n  }\r\n\r\n  /**@dev\r\n    Internal: Instantiates a new band.\r\n   */\r\n  function joinABand(\r\n    ICommon.Pool[] storage self, \r\n    uint poolId,\r\n    function (address) internal view returns(address) _account\r\n  )\r\n    internal\r\n    returns (ICommon.Pool memory _pool, address alc) \r\n  {\r\n    ICommon.Pool memory pool = _fetchPoolData(self, poolId);\r\n    alc = _account(_msgSender());\r\n    _screenBalance(pool.addrs.asset, alc, pool.uint256s.unit);\r\n    bool(pool.mems.length < pool.uints.quorum).assertUnchained(\"5\");\r\n    \r\n    if (pool.uints.mode == ICommon.Mode.STRICT) {\r\n      bool(pool.mems[_fetchPosition(poolId, alc)] == alc).assertUnchained(\"7\");\r\n    }\r\n    _initializeAccount(\r\n      self,\r\n      alc,\r\n      pool.addrs.asset,\r\n      pool.mems[0],\r\n      false,\r\n      poolId,\r\n      false,\r\n      false, // 'reduce' is really immeterial here\r\n      pool.uint256s.unit\r\n    );\r\n    require(IAccount(pool.mems[0]).updateBalancesInUse(pool.addrs.asset, pool.uint256s.unit, true), \"Sub: Failed\");\r\n\r\n    self[poolId].uint256s.currentPool += pool.uint256s.unit;\r\n    _pool = _fetchPoolData(self, poolId);\r\n  }\r\n\r\n  function _getMode(ICommon.Pool[] storage self, uint poolId) internal view returns(ICommon.Mode mode) {\r\n    mode = _fetchPoolData(self, poolId).uints.mode;\r\n  }\r\n\r\n   ///@dev Returns current timestamp (unix).\r\n  function _now() internal view returns (uint) {\r\n    return block.timestamp;\r\n  }\r\n\r\n  function _fetchPosition(uint poolId, address alc) internal view returns(uint pos) {\r\n    pos = IAccount(alc).getSubscriptionInfo(poolId).position;\r\n  } \r\n\r\n  ///@dev Modifies member's information \r\n  function _updateMemberData(\r\n    Data storage self, \r\n    ICommon.UpdateParam memory upr,\r\n    function (address) internal view returns(address) _account\r\n  ) \r\n    private \r\n    returns (address valueTo, uint position) \r\n  {\r\n    self.pools[upr.poolId].uint256s.currentPool = 0;\r\n    // address _actual = _account(_msgSender());\r\n    valueTo = upr.expected;\r\n    \r\n    ICommon.Info memory exp = IAccount(valueTo).getSubscriptionInfo(upr.poolId);\r\n    position = exp.position;\r\n    if (_account(_msgSender()) != upr.expected) {\r\n      if (_now() > exp.turnTime + 1 hours) {\r\n        assertIsMember(self.pools, upr.poolId, _account(_msgSender()), true);\r\n        valueTo = _account(_msgSender());\r\n        exp = _swapPosition(valueTo, upr.pool.addrs.asset, upr.poolId, exp, valueTo);\r\n        position = exp.position;\r\n      }\r\n    }\r\n    bool reduce;\r\n    uint val = upr.pool.uint256s.currentPool;\r\n\r\n    if(valueTo == upr.pool.mems[0]) {\r\n      reduce = true;\r\n    } else {\r\n      val = upr.owings + upr.makerFee;\r\n      upr.pool.addrs.asset.safeWithdrawRouterOnly(\r\n        IAccount(upr.pool.addrs.lastPaid),\r\n        valueTo, \r\n        self.pcd.feeTo, \r\n        upr.pool.uint256s.currentPool, \r\n        upr.makerFee\r\n      );\r\n    }\r\n\r\n    upr.poolId.safeInitializeInfo(\r\n        ICommon.Info(exp.position, _now() + upr.pool.uints.duration, 0, upr.owings, 0, upr.colBals, exp.isAdmin, true, true),\r\n        true,\r\n        reduce,\r\n        IAccount(valueTo),\r\n        val,\r\n        upr.pool.addrs.asset,\r\n        address(0)\r\n      );\r\n    \r\n    self.pools[upr.poolId].uints.selector ++;\r\n  }\r\n\r\n  function _swapPosition(\r\n    address actual,\r\n    address asset,\r\n    uint poolId,\r\n    ICommon.Info memory expected,\r\n    address valueTo\r\n  ) private \r\n    returns(ICommon.Info memory _expected) \r\n  {\r\n    ICommon.Info memory act = IAccount(actual).getSubscriptionInfo(poolId);\r\n    uint posActual = act.position;\r\n    act.position = expected.position;\r\n    expected.position = posActual;\r\n    _expected = act;\r\n    \r\n    require(\r\n      IAccount(valueTo).initializeInfo(\r\n        expected, \r\n        true,\r\n        false,\r\n        poolId, \r\n        0, \r\n        asset,\r\n        address(0)\r\n      ), \r\n    \"20\"\r\n    );\r\n  }\r\n\r\n  /**\r\n    @dev Penalizes an user for late repayment\r\n          @notice Defaulter is surcharged.\r\n                  Penalty is credited to the account of next member to GH.\r\n  */\r\n  function _computePenalty(IDigesu.PublicData storage self, uint poolId, address user) internal view returns (uint256) {\r\n    if (self.penFee == 0) return 0;\r\n\r\n    return Utils.mulDivOp(IAccount(user).getSubscriptionInfo(poolId).colBals, self.penFee);\r\n  }\r\n\r\n  /**@dev Can update the penalty rate. Should be restricted to the owner or authorized admin. */\r\n  function updatePenFee(IDigesu.PublicData storage self, uint8 newRate) internal {\r\n    require(newRate <= type(uint8).max, \"Invalid rate\");\r\n    self.penFee = newRate;\r\n  }\r\n\r\n  /**Utility to get finance\r\n    @param self : Storage\r\n    @param crp : Parameters.\r\n  */\r\n  function getFinance(\r\n    Data storage self,\r\n    ICommon.CreateParam memory crp\r\n    // uint poolId,\r\n    // function (uint, ICommon.FuncTag) internal _lock,\r\n    // function (address) internal view returns(address) _account,\r\n    // function () internal returns(uint) _getQFTPriceInETH\r\n  ) \r\n    internal\r\n    returns(address valueTo, uint position)\r\n  {\r\n    crp._lock(crp.poolId, ICommon.FuncTag.GET);\r\n    ICommon.Pool memory pool = _fetchPoolData(self.pools, crp.poolId);\r\n    if(pool.allGh == pool.uints.quorum) revert ICommon.AllMemberIsPaid();\r\n    bool(pool.uint256s.currentPool >= ( pool.uint256s.unit * pool.uints.quorum)).assertUnchained(\"4\");\r\n    (uint mFee, uint owings) = ICommon.CMF(pool.uint256s.currentPool, self.pcd.makerFee).computeMakerFee();\r\n    (valueTo, position) = _updateMemberData(\r\n        self, \r\n        ICommon.UpdateParam(\r\n        pool.mems[pool.uints.selector], \r\n        crp.poolId,\r\n        owings,\r\n        mFee,\r\n        ICommon.CC(\r\n            self.pcd.token, \r\n            crp._account(_msgSender()), \r\n            pool.uints.ccr, \r\n            crp._getQFTPriceInETH(), \r\n            pool.uint256s.currentPool\r\n          ).computeCollateral(),\r\n        pool\r\n      ),\r\n      crp._account\r\n    );\r\n    self.pools[crp.poolId].allGh ++;\r\n  }\r\n\r\n  ///@dev Returns info if current beneficiary has defaulted otherwise an empty struct is returned.\r\n  function enquireLiquidation(ICommon.Pool[] storage self, uint poolId) internal view returns (ICommon.Liquidation memory) {\r\n    ICommon.Pool memory _p = _fetchPoolData(self, poolId);\r\n    ICommon.Info memory info = IAccount(_p.addrs.lastPaid).getSubscriptionInfo(poolId);\r\n    return _now() > info.payDate ? ICommon.Liquidation(\r\n      info.position, \r\n      _p.addrs.lastPaid,\r\n      info.payDate,\r\n      info.owings, \r\n      info.colBals\r\n    ) : ICommon.Liquidation(0, address(0), 0, 0, 0);\r\n  }\r\n\r\n\r\n  /**\r\n    @dev Liquidates defaulter.\r\n          - If the current beneficiary defaults, they're liquidated.\r\n          - Their collateral balances is forwarded to the liquidator.\r\n\r\n  */\r\n  function liquidate(\r\n    Data storage self, \r\n    uint poolId, \r\n    address who,\r\n    function (address) internal view returns(address) _account\r\n  ) \r\n    internal \r\n    returns (address _liq, uint amount)\r\n  {\r\n    ICommon.Liquidation memory liq = enquireLiquidation(self.pools, poolId);\r\n    address alc_who = _account(who);\r\n    _liq = liq.who;\r\n\r\n    ICommon.Info memory info_liq = IAccount(_liq).getSubscriptionInfo(poolId);\r\n    if(_liq == address(0)) revert(\"11\");\r\n    address token = _fetchPoolData(self.pools, poolId).addrs.asset;\r\n    _screenBalance(token, alc_who, liq.debt);\r\n    amount = poolId;\r\n    info_liq.owings = 0;\r\n    require(IAccount(_liq).clearSubscription(poolId), \"20\");\r\n    amount.safeInitializeInfo(\r\n        info_liq,\r\n        true, // Locks the value in user's wallet until we need to move to the next person\r\n        true, \r\n        IAccount(alc_who),\r\n        liq.debt,\r\n        token,\r\n        address(0)\r\n    );\r\n\r\n    self.pools[poolId].addrs.lastPaid = alc_who;\r\n    amount = info_liq.owings;\r\n    self.pcd.token.moveCollateral(alc_who, _liq, info_liq.colBals);\r\n  }\r\n\r\n  /**\r\n    @dev Cancels recent unfil band.\r\n      Only admin of a band can cancel only if no one has join the band.\r\n  */\r\n  function cancelBand(\r\n    Data storage self,\r\n    uint poolId,\r\n    function (address) internal view returns(address) _account\r\n  ) \r\n    internal\r\n    returns (uint value, address alc)\r\n  {\r\n    ICommon.Pool memory _p = _fetchPoolData(self.pools, poolId);\r\n    alc = _account(_msgSender());\r\n    // uint8 quorum = uint8(pools[poolId].uints.quorum);\r\n    if(_p.uints.mode == ICommon.Mode.NONSTRICT) {\r\n      bool(_p.mems.length == 1).assertUnchained(\"15\");\r\n      delete self.amountExist[_p.uint256s.unit];\r\n    }\r\n    if(_p.uints.mode == ICommon.Mode.STRICT) bool(_p.uint256s.currentPool == _p.uint256s.unit).assertUnchained(\"15\");\r\n    _p.addrs.asset.safeUpdateBalancesInUse(\r\n      IAccount(alc),\r\n      _p.uint256s.unit, \r\n      true\r\n    );\r\n    value = _p.uint256s.unit;\r\n\r\n  }\r\n\r\n  /**@dev Payback borrowed fund.\r\n      Note: We are only concerned about who is to pay back and not \r\n              who is paying back. Ordianrily, any of the members can pay \r\n              on behalf of another.\r\n  */\r\n  function payback(\r\n    Data storage self,\r\n    uint poolId,\r\n    function (address) internal view returns(address) _account,\r\n    function (uint, ICommon.FuncTag) internal _lock,\r\n    function (uint, ICommon.FuncTag) internal _unlock\r\n  ) \r\n    internal\r\n    returns(ICommon.GCB memory _return, address alc) \r\n  {\r\n    ICommon.Pool memory _p = _fetchPoolData(self.pools, poolId);\r\n    ICommon.Info memory _info = IAccount(_account(_msgSender())).getSubscriptionInfo(poolId);\r\n    (, uint _engaged, uint _mostRecent) = IAccount(_account(_msgSender())).getSpendableBalance(_p.addrs.asset);\r\n    bool(_info.owings > 0).assertChained2((_mostRecent - _engaged) >= _info.owings, \"5\"); // <=====\r\n\r\n    _return = ICommon.GCB(\r\n      _p.addrs.asset, \r\n      _account(_msgSender()), \r\n      address(0), \r\n      _info.colBals,\r\n      0,\r\n      ICommon.CR(0, 0),\r\n      ICommon.CR2(_info.payDate, _p.uint256s.unit)\r\n    );\r\n\r\n    _info.turnTime = 0;\r\n    _info.owings = 0;\r\n    _info.payDate = 0;\r\n    if(_p.allGh == _p.uints.quorum) {\r\n      _lock(poolId, ICommon.FuncTag.PAYBACK);\r\n      _unlock(poolId, ICommon.FuncTag.COMPLETE);\r\n    }\r\n    uint _poolId = poolId;\r\n    alc = _account(_msgSender());\r\n    _poolId.safeInitializeInfo(\r\n      _info,\r\n      true, // Locks the value in user's wallet until we need to move to the next person\r\n      true, \r\n      IAccount(_account(_msgSender())),\r\n      _info.owings,\r\n      _p.addrs.asset,\r\n      address(0)\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n    Completes the current round.\r\n    - Only member of the band can call.\r\n  */\r\n  function roundUp(\r\n    Data storage self,\r\n    uint poolId\r\n    // address who\r\n  ) \r\n    internal\r\n    returns(ICommon.Pool memory pool)\r\n  {\r\n    pool = _fetchPoolData(self.pools, poolId);\r\n    bool(pool.allGh == pool.uints.quorum).assertUnchained(\"16\");\r\n    address lastPaid = pool.addrs.lastPaid;\r\n    if(pool.uints.mode == ICommon.Mode.NONSTRICT) delete self.amountExist[pool.uint256s.unit];\r\n    uint _poolId = poolId;\r\n    _poolId.safeSplit(\r\n        IAccount(lastPaid),\r\n        pool.addrs.asset,\r\n        pool.mems,\r\n        self.pcd.feeTo,\r\n        pool.uint256s.unit, \r\n        IAccount(lastPaid).getSubscriptionInfo(_poolId).owings\r\n    );\r\n  }\r\n\r\n  function updatePublicData(\r\n    Data storage self,\r\n    address feeTo,\r\n    address token,\r\n    uint8 penFee,\r\n    uint8 makerFee\r\n  ) internal {\r\n    if(feeTo == address(0)) revert ICommon.ZeroAddress(feeTo);\r\n    if(token == address(0)) revert ICommon.ZeroAddress(token);\r\n    bool(penFee < type(uint8).max).assertChained2(makerFee < type(uint8).max, \"19\");\r\n    self.pcd = IDigesu.PublicData(feeTo, token, penFee, makerFee);\r\n  }\r\n\r\n  // function setSupportedTokens(\r\n  //   address newToken,\r\n  //   function (address) internal _setSupportedToken \r\n  // ) public override onlyOwner {\r\n  //   _setSupportedTokens(newToken);\r\n  // }\r\n\r\n\r\n}"
    },
    "contracts/digesu/interfaces/IAccount.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"./ICommon.sol\";\r\n\r\ninterface IAccount is ICommon {\r\n  function rekey(address) external returns(bool);\r\n  function depositERC20Token(address, uint) external returns(bool);\r\n  function withdrawRouterOnly(address, address, address, uint, uint) external returns(bool);\r\n  function getSubscriptionInfo(uint) external view returns(Info memory);  \r\n  function updateBalancesInUse(address, uint, bool) external returns(bool);\r\n  function getSpendableBalance(address) external view returns(uint, uint, uint);\r\n  function initializeInfo(Info memory, bool,bool,uint,uint,address,address) external returns(bool);\r\n  function updateTurnTime(uint) external returns(bool);\r\n  function clearSubscription(uint) external returns(bool);\r\n  function setStatus(uint, bool, bool) external returns(bool);\r\n  function split(uint,address ,address[] memory,address,uint, uint) external returns(bool);\r\n}\r\n"
    },
    "contracts/digesu/interfaces/IAccountManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface IAccountManager {\r\n  function getAccount(address) external view returns(address);\r\n  function hasAccount(address) external view returns(bool);\r\n  function createAccount(uint, address) external payable returns(address);\r\n}"
    },
    "contracts/digesu/interfaces/ICommon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface ICommon {\r\n  event GetFinanced(uint, uint, address);\r\n  event AccountLaunched(address indexed, address indexed);\r\n  event Payback(uint, uint, address indexed);\r\n  event NewAccount( address indexed,  address indexed, uint);\r\n\r\n  event Joined(uint, address, uint);\r\n  event BandCreated (uint, Pool);\r\n  event RoundUp(uint, Pool);\r\n  event Rekeyed(address indexed, address indexed);\r\n\r\n  error AllMemberIsPaid();\r\n  error InvalidParameter();\r\n  error SystemNotRunning();\r\n  error ExecutionStopped();\r\n  error UnsupportedToken();\r\n  error InSufficientValue();\r\n  error NoAccountDetected();\r\n  error UnAuthorizedCaller();\r\n  error AccountNotApproved();\r\n  error SomethingWentWrong();\r\n  error ZeroAddress(address);\r\n  error TargetHasNoAccount();\r\n  error WithdrawalRestricted();\r\n  error SystemAlreadyRunning();\r\n  error StatusAlreadyUpdated();\r\n  error InconsistentArrayValue();\r\n  error UnsupportedAsset(address);\r\n  error AccountAlreadyDeactivated();\r\n  error InsufficientFund(uint, uint);\r\n  error IDoNotAcceptEtherIFYouForceItLost();\r\n\r\n  // #Enums\r\n  enum Mode { NONSTRICT, STRICT }\r\n  \r\n  // Balances types\r\n  enum Balances { WITHDAWABLE, INUSE }\r\n\r\n    // error NonInContext();\r\n  enum FuncTag { ADD, GET, PAYBACK, COMPLETE }\r\n\r\n  enum Access { DENIED, ALLOWED }\r\n\r\n  struct Pool {\r\n    Uints uints;\r\n    Uint256s uint256s;\r\n    Addresses addrs;\r\n    address[] mems;\r\n    uint allGh;\r\n  }\r\n\r\n  struct Param2 {\r\n    uint pid;\r\n    uint value;\r\n    address newUser;\r\n  }\r\n\r\n  struct Param {\r\n    address from;\r\n    address to;\r\n    uint amount;\r\n    uint amountTo;\r\n    uint mintable;\r\n  }\r\n\r\n  struct CC {\r\n    address token;\r\n    address who;\r\n    uint expectedCcr;\r\n    uint assetPriceInETH;\r\n    uint loanValueInETH;\r\n  }\r\n\r\n  struct Param3 {\r\n    address gh;\r\n    uint8 position;\r\n    uint poolId;\r\n    uint256 owings;\r\n    uint256 colBal;\r\n  }\r\n  \r\n  struct Uint256s {\r\n    uint unit;\r\n    uint receivable;\r\n    uint currentPool;\r\n  }\r\n\r\n  struct Uints {\r\n    Mode mode;\r\n    uint quorum;\r\n    uint selector;\r\n    uint ccr; // colCoverageRatio\r\n    uint duration;\r\n  }\r\n  \r\n  struct Addresses {\r\n    address asset;\r\n    address lastPaid;\r\n  }\r\n  \r\n  struct CR {\r\n    uint totalValueContributed;\r\n    uint subscribers;\r\n  }\r\n\r\n  struct CR2 {\r\n    uint erd; \r\n    uint valueContributed;\r\n  }\r\n\r\n    /**\r\n  @dev Structured data types to easily work with\r\n      data and parameters.  \r\n   */\r\n  struct P1 {\r\n    uint quorum;\r\n    uint duration;\r\n    uint ccr;\r\n    uint value;\r\n    address[] members;\r\n    address asset;\r\n  }\r\n\r\n  struct GCB {\r\n    address token;\r\n    address who;\r\n    address to;\r\n    uint amount;\r\n    uint amountTo;\r\n    CR cr;\r\n    CR2 cr2;\r\n  }\r\n\r\n  struct MC {\r\n    address token;\r\n    address to;\r\n    address from;\r\n    uint256 amount;\r\n  }\r\n\r\n  struct Return1 {\r\n    uint collateralBalanceInETH;\r\n    uint collateralBalanceInToken;\r\n    uint actualCollateralCoverageRatio;\r\n  }\r\n\r\n  struct Add {\r\n    uint by;\r\n    uint pid;\r\n    address who;\r\n  }\r\n\r\n  struct Return2 {\r\n    address trustee;\r\n    uint quorum;\r\n    uint tracker;\r\n  }\r\n\r\n  struct Liquidation {\r\n    uint index;\r\n    address who;\r\n    uint expectedRepaymentTime;\r\n    uint debt;\r\n    uint colBalInToken;\r\n  }\r\n\r\n  // struct LiqParam {\r\n  //   uint64 pid;\r\n  //   address msgSender;\r\n  // }\r\n\r\n  struct CMF {\r\n    uint amount;\r\n    uint16 makerRate;\r\n  }\r\n\r\n  struct Param1 {\r\n    address to;\r\n    address from;\r\n    uint amount;\r\n  }\r\n\r\n  struct Info {\r\n    uint position;\r\n    uint payDate;\r\n    uint turnTime;\r\n    uint owings;\r\n    uint reward;\r\n    uint colBals;\r\n    bool isAdmin;\r\n    bool isMember;\r\n    bool hasGH;\r\n  }\r\n\r\n  struct UpdateParam {\r\n    address expected; \r\n    uint poolId; \r\n    uint owings;\r\n    uint makerFee;\r\n    uint colBals;\r\n    Pool pool;\r\n  }\r\n\r\n  struct CreateParam {\r\n    uint poolId;\r\n    function (uint, FuncTag) internal _lock;\r\n    function (address) internal view returns(address) _account;\r\n    function () internal returns(uint) _getQFTPriceInETH;\r\n  }\r\n\r\n  struct Accounts {\r\n    address active;\r\n    address deactivated;\r\n  }\r\n\r\n}"
    },
    "contracts/digesu/interfaces/IDigesu.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"./ICommon.sol\";\r\n\r\ninterface IDigesu {\r\n  error InsufficientQuorum();\r\n  error InvalidInput();\r\n  error Failed();\r\n\r\n  event Cancellation(uint poolId, uint unit, address alc);\r\n\r\n  function joinABand(uint poolId) external returns(bool);\r\n  function getFinance(uint poolId) external returns(bool);\r\n  function payback(uint poolId) external returns(bool);\r\n  function liquidate(uint poolId) external returns(bool);\r\n  function roundUp(uint poolId) external returns(bool);\r\n  function enquireLiquidation(uint poolId) external view returns(ICommon.Liquidation calldata);\r\n  function cancelBand(uint poolId) external returns(bool);\r\n  function supportedToken(address token) external view returns(bool);\r\n  \r\n  function createPublicPool(\r\n    uint8 quorum, \r\n    uint8 durationInDays, \r\n    uint16 colCoverageRatio, \r\n    uint amount,\r\n    address asset) external returns(bool);\r\n\r\n  function createPrivatePool(\r\n    uint8 durationIndays,\r\n    uint16 colCoverateRatio, \r\n    address[] memory members, \r\n    address asset,\r\n    uint amount) external returns(bool);\r\n  \r\n  struct Statistics {\r\n    uint totalValueInERC20;\r\n    uint96 subscribers;\r\n  }\r\n\r\n  struct PublicData {\r\n    address feeTo;\r\n    address token;\r\n    uint8 penFee;\r\n    uint8 makerFee;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** In save and invest, we do not handle investment for users \r\n    We simply provide the tools for backend and frontend to interact with it.\r\n      - An user creates an investment account.\r\n      - Fund it with an initial amount.\r\n      - Set the configuration themselves.\r\n      - Provides Approve external investors to withdraw from the account.\r\n\r\n      Uses: \r\n        o A hybrid exchange.\r\n        o An easy way to singleHandedly fund projects.\r\n        o Provide liquidity to projects from personal account.\r\n        o Sells directly to anyone from the account.\r\n        o Can save.\r\n\r\n        Switches:\r\n          o User will be able to switch to save mode.\r\n          o Liquid mode.\r\n          o Borrow mode.\r\n          o Lending mode.\r\n          o Funding mode.\r\n  */\r\n"
    },
    "contracts/digesu/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "contracts/digesu/libs/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/digesu/libs/Auth.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"./Context.sol\";\r\n\r\n\r\nabstract contract Auth is Context {\r\n    event AuthorizationTransferred(address indexed previousAuth, address indexed newAuth);\r\n    bytes32 constant private AUTHORIZATION = keccak256(\"AUTHORIZED\");\r\n    struct Authorization {\r\n        uint8 renouncing;\r\n        bytes32 authorization;\r\n    }\r\n    mapping(address=>Authorization) private auths; \r\n    mapping(address=>bool) private isAdmin;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier isAuthorized(address target) {\r\n        bytes32 auth = AUTHORIZATION; //Gas saving\r\n        require(auths[target].authorization == auth, \"No authorization detected\");\r\n        _;\r\n    \r\n    }\r\n    \r\n    /**\r\n     * @dev Throws if called by any account other than the admin.\r\n     */\r\n   modifier onlyAdmin() {\r\n        require(isAdmin[_msgSender()], \"Ownable: not an admin\");\r\n        _;\r\n    }\r\n\r\n    constructor (uint8 ren) {\r\n        _authorize(_msgSender(), ren);\r\n        isAdmin[_msgSender()] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if caller has authorization.\r\n     */\r\n    function hasAuthorization() public view virtual returns (bool) {\r\n        return auths[_msgSender()].authorization == AUTHORIZATION;\r\n    }\r\n\r\n    /**\r\n     * @dev renounces authorization. It will not be possible to call\r\n     * `isAuthorized` tagged functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing authorization will leave the contract without control,\r\n     * thereby removing any functionality that is only available to the Authorized.\r\n     * Renouncing is guarded hence accidentally authorization is not possible. So it can still be reinstated.\r\n     * Gas saving\r\n     */\r\n    function renounceAuthorization() public virtual isAuthorized(_msgSender()) returns(bool) {\r\n        uint8 _renouncing = auths[_msgSender()].renouncing;\r\n        if(_renouncing == 3) {\r\n            auths[_msgSender()] = Authorization(3, keccak256(\"\"));\r\n            return true;\r\n        } else {\r\n            if(_renouncing < 3) {\r\n                auths[_msgSender()].renouncing = _renouncing + 1;\r\n                return true;\r\n            }\r\n        }\r\n        return true;\r\n        // _setOwner(address(0), true);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers authorization of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferAuthorization(address swapTo) public virtual isAuthorized(_msgSender()) {\r\n        require(swapTo != address(0), \"SwapTo: zero address\");\r\n        renounceAuthorization();\r\n        if(auths[_msgSender()].renouncing >= 3) _authorize(swapTo, 0);\r\n        emit AuthorizationTransferred(_msgSender(), swapTo);\r\n    }\r\n\r\n    ///@dev Private: passes authorization to @param newSoull\r\n    function _authorize(address newAuth, uint8 ren) private {\r\n        require(newAuth != address(0), \"newAuth is the zero address\");\r\n        auths[newAuth] = Authorization({\r\n            renouncing: ren,\r\n            authorization: AUTHORIZATION\r\n        });\r\n    }\r\n\r\n    /**@dev Toggles admin role to true or false.\r\n       @param cmd - Will activate newAdmin else deactivates\r\n       @param newAdmin - New address to add as admin\r\n     */\r\n    function toggleAdminRole(address newAdmin, uint8 cmd) public virtual isAuthorized(_msgSender()) {\r\n        isAdmin[newAdmin] = cmd == 0 ? true : false;\r\n    }\r\n\r\n    function verifyAdmin(address target) public view returns(bool) {\r\n        return isAdmin[target];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Auth(4) {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function pause() public whenNotPaused isAuthorized(_msgSender()) {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function unpause() public whenPaused isAuthorized(_msgSender()) {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n"
    },
    "contracts/digesu/libs/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n    // \"@openzeppelin/contracts\": \"^4.3.3\",\r\n    // \"@openzeppelin/contracts-upgradeable\": \"^4.3.3\","
    },
    "contracts/digesu/libs/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n"
    },
    "contracts/digesu/libs/DexLib.sol": {
      "content": "  // SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\nlibrary DexLib {\r\n  using SafeMath for uint256;\r\n\r\n//   ///@dev Call router\r\n//   function safeCall(address poolAddr, address user, uint value, bytes4 selector) internal {\r\n//     require(poolAddr != address(0), \"Pool addresss empty\");\r\n//     bytes memory data = abi.encodeWithSelector(selector, user);\r\n//     (bool thisSuccess, ) = poolAddr.call{value:value}(data);\r\n//     require(thisSuccess, \"Proxy: operation failed\");\r\n//   }\r\n\r\n  function checkAndWithdraw(address target, address approver, uint expColInToken) internal returns(uint allow) {\r\n    allow = IERC20(target).allowance(approver, address(this));\r\n    if(allow >= expColInToken) {\r\n        require(IERC20(target).transferFrom(approver, address(this), allow), \"Transfer failed\");\r\n    } else {\r\n        revert(\"Collateral too low\");\r\n    }\r\n    return allow;\r\n  }\r\n\r\n  /**@dev Returns calculated collateral\r\n  */\r\n  function calculateExpectedCollateralInStable(uint poolSize, int price, uint collacteralFactor) internal pure  returns(uint) {\r\n    return poolSize.mul(uint(price)).mul(collacteralFactor).mul(1e18 wei).div(10**18);\r\n  }\r\n\r\n  ///@dev computes and return interests\r\n  function calculateInterest(uint averageBlockPerDay, uint128 apr, uint _unit, uint16 duration) internal pure returns(uint intOnLoan, uint intPBlk) {\r\n      uint ratePBlk = uint(apr).div(100.0e18).div(averageBlockPerDay * 365);\r\n      intPBlk = ratePBlk.mul(_unit.mul(4)).div(1e18 wei);\r\n      intOnLoan = intPBlk.mul(averageBlockPerDay * duration);\r\n      \r\n      return (intOnLoan, intPBlk);\r\n  }\r\n\r\n  function transferHelper(address token, address to, uint value) internal {\r\n    require(IERC20(token).transfer(to, value), \"Transfer failed\");\r\n  }\r\n\r\n}"
    },
    "contracts/digesu/libs/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "contracts/digesu/libs/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "contracts/digesu/libs/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"./Pausable.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"
    },
    "contracts/digesu/libs/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\n abstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n"
    },
    "contracts/digesu/libs/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n"
    },
    "contracts/digesu/libs/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n    /**\r\n     * @dev Returns the downcasted uint224 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint224).\r\n     *\r\n     * Counterpart to Solidity's `uint224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     */\r\n    function toUint224(uint256 value) internal pure returns (uint224) {\r\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\r\n        return uint224(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint96).\r\n     *\r\n     * Counterpart to Solidity's `uint96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     */\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\r\n        return uint96(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\r\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n"
    },
    "contracts/digesu/libs/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/digesu/libs/Utils.sol": {
      "content": "    // SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"../token/IERC20.sol\";\r\nimport \"./Address.sol\";\r\nimport \"../interfaces/ICommon.sol\";\r\nimport \"../interfaces/IAccount.sol\";\r\n\r\nlibrary Utils {\r\n    using Address for address;\r\n    // using SafeMath for uint256;\r\n\r\n    ///@dev Requires the three conditions to be true\r\n    function assertChained3(bool a, bool b, bool c, string memory errorMessage) internal pure {\r\n        require(a && b && c, errorMessage);\r\n    }\r\n\r\n    ///@dev Requires the three conditions to be true\r\n    function assertChained4(bool a, bool b, bool c, bool d, string memory errorMessage) internal pure {\r\n        require(a && b && c && d, errorMessage);\r\n    }\r\n\r\n    ///@dev Requires the three conditions to be true \r\n    function assertChained2(bool a, bool b, string memory errorMessage) internal pure {\r\n        require(a && b, errorMessage);\r\n    }\r\n\r\n    ///@dev Requires the three conditions to be true \r\n    function assertEither(bool a, bool b, string memory errorMessage) internal pure {\r\n        require(a || b, errorMessage);\r\n    }\r\n\r\n    ///@dev Requires conditions to be true \r\n    function assertUnchained(bool condition, string memory errorMessage) internal pure {\r\n        require(condition, errorMessage);\r\n    }\r\n\r\n    ///@dev Requires conditions to be true \r\n    function assertNotUnchained(bool condition, string memory errorMessage) internal pure {\r\n        require(!condition, errorMessage);\r\n    }\r\n\r\n    ///@dev Asserts condition is true, and the callback is executed\r\n    function ifTrueCallBack(bool condition, function(uint64, address) internal callback, uint64 pid, address user) internal {\r\n        if(condition) callback(pid, user);\r\n    }\r\n\r\n    // Simple arithmetic : Multiplication and division\r\n    function mulDivOp(uint256 value, uint8 numerator) internal pure returns (uint _return) {\r\n        if(value == 0 || numerator == 0) return 0; \r\n        _return = (value * numerator) / 100;\r\n    }\r\n    \r\n    // Enquire and return the collateral balances of `who` in QFT.\r\n    function getCollateralBalance(address token, address who) internal view returns(uint256) {\r\n        IERC20.AccountBalances memory acc = IERC20(token).accountBalances(who);\r\n\r\n        return acc.spendable;\r\n    }\r\n\r\n    ///@dev Checks allowance from user `p1.from`\r\n    function screenAllowance(ICommon.MC memory p1) internal view returns(ICommon.MC memory) {\r\n        uint amount = IERC20(p1.token).allowance(p1.from, p1.to);\r\n        require(amount >= p1.amount, \"No allowance found\");\r\n        p1.amount = amount;\r\n        return p1;\r\n    }\r\n\r\n    ///@dev Withdraws allowance from user `p1.from`\r\n    function getDeposit(ICommon.MC memory p1, address to) internal returns (uint) {\r\n        require(IERC20(p1.token).transferFrom(p1.from, to, p1.amount), \"Transfer failed\");\r\n        return p1.amount;\r\n    }\r\n\r\n       // ///@dev Returns balance of who\r\n    // function getBalance(Params.TokenParams memory p1) internal view returns(Params.TokenParams memory) {\r\n    //     p1.amount = IERC20(p1.token).balanceOf(p1.subject);\r\n    //     return p1;\r\n    // }\r\n\r\n    ///@dev transfer Assets\r\n    function transfer(ICommon.MC memory p1) internal {\r\n        require(IERC20(p1.token).transfer(p1.to, p1.amount), \"Withdrawal failed\");\r\n    }\r\n\r\n    ///@dev Withdraws \r\n    function forwardAsset(ICommon.MC memory p1) internal {\r\n        require(IERC20(p1.token).transfer(p1.to, p1.amount), \"Withdrawal failed\");\r\n    }\r\n\r\n    // Restricts `param.who` from moving token of amount `param.amount`\r\n    function lockCollateral(address token, address who, uint amount) internal {\r\n        IERC20(token).lockFor(who, amount);\r\n        // bytes memory data = abi.encodeWithSignature(\"lockFor(address,uint)\", param.who, param.amount);\r\n        // (bool s, bytes memory returndata) = param.token.call(data);\r\n        // Address.verifyCallResult(s, returndata, \"failed\");\r\n    }\r\n\r\n    // Restricts `param.who` from moving token of amount `param.amount`\r\n    function unlockCollateral(ICommon.GCB memory param) internal {\r\n        Address.functionCall(param.token, abi.encodeWithSelector(\r\n            bytes4(\r\n                keccak256(\r\n                    bytes(\r\n                        \"unlockFor(address,address,uint,uint,uint)\"\r\n                        )\r\n                    )\r\n                ), \r\n               param.who, param.to, computeReward(param.cr, param.cr2), param.amount, param.amountTo));\r\n    }\r\n\r\n    /** \r\n        Reward calculator\r\n        ================\r\n        o CA = User's contributed amount.\r\n        o TC = Total contribution at the time of call.\r\n        o TS = Total subscribers.\r\n        o ERD = Expected repayment duration (in days).\r\n\r\n        Reward = CA.div(TC).mul(TS).mul(ERD)\r\n    \r\n     */\r\n    function computeReward(ICommon.CR memory param, ICommon.CR2 memory param2) internal pure returns (uint) {\r\n        uint mantissa = 10**10;\r\n        // return param2.valueContributed.mul(mantissa).div(param.totalValueContributed).mul(param.subscribers).mul(param2.erd).div(mantissa);\r\n        return ((((param2.valueContributed * mantissa) / param.totalValueContributed) * param.subscribers) * param2.erd) / mantissa;\r\n    }\r\n\r\n    // Restricts `param.who` from moving token of amount `param.amount`\r\n    function moveCollateral(address token, address to, address from, uint amount) internal {\r\n        Address.functionCall(token, abi.encodeWithSelector(bytes4(keccak256(bytes(\"unlockAndTransfer(address,address,uint)\"))), from, to, amount));\r\n    }\r\n\r\n    // Compute and return collateral value\r\n    function computeCollateral(ICommon.CC memory param) internal returns (uint) {\r\n        uint discAssetValueInETH;\r\n        uint256 discAssetValueInToken = getCollateralBalance(param.token, param.who);\r\n        discAssetValueInETH = discAssetValueInToken * param.assetPriceInETH;\r\n        assertUnchained(discAssetValueInETH >= param.loanValueInETH, \"Insufficient Collateral\");\r\n        discAssetValueInToken = param.loanValueInETH / param.assetPriceInETH;\r\n        uint ccr = (discAssetValueInETH * 100) / param.loanValueInETH;\r\n        assertUnchained(ccr >= param.expectedCcr, \"Ratio is low\");\r\n        lockCollateral(param.token, param.who, discAssetValueInToken);\r\n        \r\n        return discAssetValueInToken;\r\n        // return Params.Return1(discAssetValueInETH, discAssetValueInToken, ccr);\r\n    }\r\n\r\n    ///@dev Distributes capital to all members, clears trustee.\r\n    function _clearTrustee(address trustee, address[50] memory addresses)internal {\r\n        Address.functionCall(trustee, abi.encodeWithSelector(bytes4(keccak256(bytes(\"distribute(address[])\"))), addresses));\r\n    }\r\n\r\n    /**\r\n        @dev Computes maker fee.\r\n            Note : Maker rate must be in denomination of 1000 e.g 1010, 1100 etc.\r\n        Example: 1015 = 1.5%. 1150 = 15%, 1500 = 150%.\r\n    */\r\n    function computeMakerFee(ICommon.CMF memory cmf) internal pure returns (uint mFee, uint owings) {\r\n        mFee = (((cmf.makerRate * 10**10) / 1000) * cmf.amount) / 10**10;\r\n        owings = mFee + cmf.amount;\r\n        // return uint(cmf.makerRate).mul(10 ** 10).div(1000).mul(cmf.amount).div(10 ** 10).add(cmf.amount);\r\n    }\r\n\r\n    function zeroAddress(address which) internal pure {\r\n        require(which != address(0), \"Zero address\");\r\n    }\r\n\r\n     function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    // function safePermit(\r\n    //     IERC20Permit token,\r\n    //     address owner,\r\n    //     address spender,\r\n    //     uint256 value,\r\n    //     uint256 deadline,\r\n    //     uint8 v,\r\n    //     bytes32 r,\r\n    //     bytes32 s\r\n    // ) internal {\r\n    //     uint256 nonceBefore = token.nonces(owner);\r\n    //     token.permit(owner, spender, value, deadline, v, r, s);\r\n    //     uint256 nonceAfter = token.nonces(owner);\r\n    //     require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    // }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     */\r\n    function _callOptionalReturnAccount(IAccount account, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(account).functionCall(data, \"SafeCall: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeCall: Account operation did not succeed\");\r\n        }\r\n    }\r\n\r\n    function safeSetStatus(\r\n        uint poolId,\r\n        bool isAdmin,\r\n        bool isMember,\r\n        IAccount account\r\n    ) internal {\r\n        _callOptionalReturnAccount(\r\n          account, \r\n          abi.encodeWithSelector(\r\n            account.setStatus.selector, \r\n            isAdmin, \r\n            isMember,\r\n            poolId\r\n          )\r\n        );\r\n    }\r\n\r\n    function safeWithdrawRouterOnly(\r\n        address token,\r\n        IAccount account,\r\n        address to, \r\n        address feeTo, \r\n        uint amount, \r\n        uint fee\r\n    ) internal {\r\n        _callOptionalReturnAccount(\r\n          account, \r\n          abi.encodeWithSelector(\r\n            account.withdrawRouterOnly.selector, \r\n            token, \r\n            to,\r\n            feeTo,\r\n            amount,\r\n            fee\r\n          )\r\n        );\r\n    }\r\n\r\n    function safeUpdateBalancesInUse(\r\n        address asset,\r\n        IAccount account,\r\n        uint value, \r\n        bool reduce\r\n    ) internal {\r\n        _callOptionalReturnAccount(account, abi.encodeWithSelector(\r\n          account.updateBalancesInUse.selector, \r\n          asset, \r\n          value,\r\n          reduce\r\n        )\r\n      );\r\n    }\r\n\r\n    function safeInitializeInfo(\r\n        uint poolId, \r\n        ICommon.Info memory info,\r\n        bool lock,\r\n        bool reduceBalance,\r\n        IAccount account,\r\n        uint value,\r\n        address asset,\r\n        address to\r\n    ) internal {\r\n        _callOptionalReturnAccount(account, abi.encodeWithSelector(\r\n          account.initializeInfo.selector,\r\n          info,\r\n          lock,\r\n          reduceBalance,\r\n          poolId,\r\n          value,\r\n          asset,\r\n          to\r\n        )\r\n      );\r\n    }\r\n\r\n    function safeClearSubscrition(\r\n        uint poolId,\r\n        IAccount account\r\n    ) internal {\r\n        _callOptionalReturnAccount(account, abi.encodeWithSelector(\r\n          account.clearSubscription.selector,\r\n          poolId\r\n        )\r\n      );\r\n    }\r\n\r\n    function safeSplit(\r\n        uint poolId,\r\n        IAccount account,\r\n        address asset,\r\n        address[] memory members,\r\n        address closeTo,\r\n        uint unitAmount, \r\n        uint balance\r\n    ) internal {\r\n        _callOptionalReturnAccount(account, abi.encodeWithSelector(\r\n          account.split.selector,\r\n          poolId,\r\n          asset,\r\n          members,\r\n          closeTo,\r\n          unitAmount,\r\n          balance\r\n        )\r\n      );\r\n    }\r\n\r\n}"
    },
    "contracts/digesu/peripherals/Currency.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nabstract contract Currency {\r\n\r\n  // Supported tokens:\r\n  mapping (address=>bool) private supportedTokens;\r\n\r\n  //Ensures token is supported by this contract\r\n  modifier onlySupportedToken(address token) {\r\n    if(!supportedTokens[token]) revert (\"Not supported\");\r\n    _;\r\n  }\r\n\r\n  /**@dev Updates the storage for supportedTokens\r\n   * Note Dual function: Can also remove support for `newToken`;\r\n   * @param newToken: newSupported token or to be removed.\r\n  */\r\n  function setSupportedTokens(address newToken) public virtual {\r\n    bool isSupported = supportedTokens[newToken];\r\n    supportedTokens[newToken] = !isSupported;\r\n  }\r\n\r\n  // Returns token is supported or otherwise\r\n  function _supportedToken(address token) internal view returns (bool) {\r\n    return supportedTokens[token];\r\n  }\r\n\r\n}"
    },
    "contracts/digesu/peripherals/FuncHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"../interfaces/ICommon.sol\";\r\n\r\nabstract contract FuncHandler is ICommon {\r\n  \r\n  /**\r\n    @dev Maps functions to Access\r\n      Note: Functions can either be in locked or open mode.\r\n  */\r\n  mapping(uint => mapping(FuncTag => Access)) private fLock;\r\n\r\n  /**@dev Function contexts determines if certain internal function \r\n   * should run or not. Each internal callable function should run only\r\n   * in the context of the external function for which they're defined.\r\n   * All internal functions are locked by default and bound to specific function.\r\n   */\r\n  // mapping (FuncTag=>bool) private context;\r\n\r\n  // /**Internal func must be in context of specific function \r\n  //  * for which they're bound.\r\n  //  * @param tag :  Function handle\r\n  //  */\r\n  // modifier isAContextOf(FuncTag exTag, bool unlock) {\r\n  //   bool _isContext = context[exTag];\r\n  //   if(unlock) {\r\n  //     context[exTag] = true; \r\n  //   } else {\r\n  //     if(!_isContext) revert NonInContext();\r\n\r\n  //   }\r\n  //   _;\r\n  //   if(_isContext) context[exTag] = false;\r\n  // }\r\n\r\n  // // Returns the four bytes of a function signature\r\n  // function _sig(string memory funcLiteral) internal pure returns(bytes4 _sig_) {\r\n  //   _sig_ = bytes4(\r\n  //     keccak256(\r\n  //       bytes(\r\n  //         funcLiteral\r\n  //       )\r\n  //     )\r\n  //   )\r\n  // }\r\n  \r\n  /**\r\n    @dev Determine if function should be called at this time.\r\n      @param tag - Function handle. See IStorage.FuncTag'\r\n   */\r\n  modifier checkFunctionPass(uint poolId, FuncTag tag) {\r\n    require(_fStatus(poolId, tag) == Access.ALLOWED, \"Locked\");\r\n    _;\r\n  }\r\n\r\n  \r\n  ///@dev locks function with @param tag : Function handle\r\n  function _lock(uint pid, FuncTag tag) internal {\r\n    fLock[pid][tag] = Access.DENIED;\r\n  }\r\n\r\n  ///@dev Unlocks function with @param tag : Function handle\r\n  function _unlock(uint pid, FuncTag tag) internal {\r\n    fLock[pid][tag] = Access.ALLOWED;\r\n  }\r\n\r\n  /**@dev Return status of predefined functions.\r\n   * @param pid : pool Id\r\n   * @param tag : Function tag\r\n   */\r\n  function _fStatus(uint pid, FuncTag tag) internal view returns (Access _status) {\r\n    _status = fLock[pid][tag];\r\n  }\r\n\r\n\r\n}"
    },
    "contracts/digesu/token/AdjustableTime.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/utils/TokenTimelock.sol)\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"./SafeERC20.sol\";\r\nimport \"../libs/Ownable.sol\";\r\nimport \"../libs/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @dev A token holder contract that will allow beneficiaries to extract the\r\n * tokens after a given release time.\r\n *\r\n * Useful for simple vesting schedules like \"advisors get all of their tokens\r\n * after 1 year\".\r\n */\r\ncontract AdjustableTimelock is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Data containing amount with timestamp when token release is enabled\r\n    struct Data {\r\n        uint split;\r\n        uint nextRelease;\r\n        uint interval;\r\n        uint256 balance;\r\n        uint firstWithdraw;\r\n        bool exist;\r\n    }\r\n\r\n    // ERC20 basic token contract being held\r\n    IERC20 public immutable token;\r\n\r\n    // beneficiaries of tokens after they are released\r\n    mapping (address=>Data) private _beneficiaries;\r\n\r\n    \r\n    /**\r\n     * @dev Deploys a timelock instance that is able to hold the token specified, and will only release it to\r\n     * `beneficiary_` when {release} is invoked after `releaseTime_`. The release time is specified as a Unix timestamp\r\n     * (in seconds).\r\n     */\r\n    constructor( IERC20 _token) {\r\n        // require(releaseTime_ > block.timestamp, \"TokenTimelock: release time is before current time\");\r\n        token = _token;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the data of the beneficiary 'who' if they exist on the ledger.\r\n     */\r\n    function beneficiary(address who) public view virtual returns (Data memory data) {\r\n        data = _beneficiaries[who];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers tokens held by the timelock to the beneficiary. Will only succeed if invoked after the release\r\n     * time.\r\n     */\r\n    function withdraw() public nonReentrant {\r\n        Data memory _d = _beneficiaries[_msgSender()];\r\n        require(_d.exist, \"User not exist\");\r\n        uint amount;\r\n        if(_d.firstWithdraw > 0) {\r\n            require(_now() >= _d.nextRelease,\"Not yet time.\");\r\n            _beneficiaries[_msgSender()].firstWithdraw = 0;\r\n            amount = _d.firstWithdraw;\r\n            _beneficiaries[_msgSender()].nextRelease = _now() + _d.interval;\r\n        } \r\n\r\n        if(_d.firstWithdraw == 0 && _d.balance > 0){\r\n            require(_now() >= _d.nextRelease, \"TokenTimelock: current time is before release time\");\r\n            _beneficiaries[_msgSender()].nextRelease = _now() + _d.interval;\r\n            if(_d.balance >= _d.split) {\r\n                _beneficiaries[_msgSender()].balance = _d.balance - _d.split;\r\n                amount = _d.split;\r\n            }\r\n\r\n            if(_d.split > 0 && _d.split < _d.balance) {\r\n                delete _beneficiaries[_msgSender()];\r\n                amount = _d.balance;\r\n            }\r\n\r\n        }\r\n\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        require(tokenBalance > 0 && tokenBalance >= amount, \"TokenTimelock: no tokens to release\");\r\n\r\n        token.safeTransfer(_msgSender(), amount);\r\n    }\r\n\r\n    function setBeneficiary(\r\n        address who, \r\n        uint16 nextReleaseInDays,\r\n        uint16 intervalInDays,\r\n        uint firstWithdraw,\r\n        uint balance,\r\n        uint subsequentSplit\r\n    ) external onlyOwner returns(bool) {\r\n        require(nextReleaseInDays > 0, \"Invalid timing\");\r\n        _beneficiaries[who] = Data(\r\n            subsequentSplit,\r\n            _now() + nextReleaseInDays * 1 days,\r\n            intervalInDays * 1 days,\r\n            balance,\r\n            firstWithdraw,\r\n            true\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _now() internal view returns(uint32 currentTime) {\r\n        currentTime = uint32(block.timestamp);\r\n    }\r\n}\r\n"
    },
    "contracts/digesu/token/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n"
    },
    "contracts/digesu/token/ERC20Abstract.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**QUATRE FINANCE TOKEN - (Customized)\r\n    - Fully compatible and complied with ERC20 token standard.\r\n\r\n  @author Bobeu\r\n    Github: https://github.com/bobeu\r\n    NOTE: SOME OF THE DEPENDENCY MODULES AND SUBMODULES RALATED TO THIS CONTRACT ARE IMPORTED AND INSPIRED BY THE \r\n            OPENZEPPELIN CONTRACTS. KUDOS TO THE OZ GUYS.\r\n\r\n * @dev Implementation of the {IERC20} interface.\r\n        Note: digesuAddr is only a naming convention, and should not be mistaken for how it sounds as it does not in\r\n              anyway take custody of token unless a prompt call is initited by the user.\r\n */\r\n\r\nabstract contract ERC20Abstract is Context, IERC20, IERC20Metadata {\r\n  using SafeMath for uint256;\r\n  \r\n  MetaData private meta;\r\n\r\n  // Incentive mining\r\n  uint256 public reserved;\r\n\r\n  /**@dev Maps holders to tier1.\r\n          Note : Holders in this category auto earn from the inbuilt reward\r\n                  model.\r\n                To earn from this category, holders of QFT must have left their\r\n                token in the wallet unmoved for a period of at least 30 days.  \r\n   */\r\n  mapping(address => Share) public tier1;\r\n\r\n  ///@dev Maps addresses to their corresponding balances profile.\r\n  mapping(address => Holders) private _balances;\r\n\r\n  // Approvals for addresses to spend on behalf of other addresses.\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  // #Constructor\r\n  constructor(string memory _name, string memory _symbol, address initTokenRecipient) {\r\n    uint decis = 10**18;\r\n    meta = MetaData(1.0e18, 0, false, _name, _symbol, address(0));\r\n    reserved = 120_000_000 * decis; //Being 12% of max supply\r\n    _mint(initTokenRecipient, 880_000_000 * decis);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() public view override returns (string memory _name) {\r\n    _name = meta.name;\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token, usually a shorter version of the\r\n   * name.\r\n   */\r\n  function symbol() public view override returns (string memory _sym) {\r\n    _sym = meta.symbol;\r\n    return _sym;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used to get its user representation.\r\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n   *\r\n   * Tokens usually opt for a value of 18, imitating the relationship between\r\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n   * overridden;\r\n   *\r\n   * NOTE: This information is only used for _display_ purposes: it in\r\n   * no way affects any of the arithmetic of the contract, including\r\n   * {IERC20-balanceOf} and {IERC20-transfer}.\r\n   */\r\n  function decimals() public pure override returns (uint8) {\r\n    return 18;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-totalSupply}.\r\n   */\r\n  function totalSupply() public view override returns (uint256 _ts) {\r\n    _ts = meta.tSupply;\r\n    return _ts;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-balanceOf} for more info.\r\n        Returns total spendable balances of `account`\r\n        @notice : Spendable balance is a function of main balance less the \r\n                  addition of locked balances and balance in subscription.\r\n   */\r\n  function balanceOf(address account) public view override returns (uint256 bal) {\r\n    AccountBalances memory acc  = _accountBalances(account);\r\n\r\n    return acc.spendable.add(acc.locked).add(acc.inSubScription);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `recipient` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-allowance}.\r\n   */\r\n  function allowance(address _owner, address spender) public view override returns (uint256 _allow) {\r\n    _allow = _allowances[_owner][spender];\r\n    return _allow;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-approve}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(address spender, uint256 amount) public override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {ERC20}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` and `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for ``sender``\"s tokens of at least\r\n   * `amount`.\r\n   * If called by the farmer, it signifies staking.\r\n   */\r\n  function transferFrom(address sender,address recipient,uint256 amount) public override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 curAllow = _allowances[sender][_msgSender()];\r\n    require(curAllow >= amount, \"ERC20: Amt exceeds allowance\");\r\n    unchecked {\r\n      _approve(sender, _msgSender(), curAllow - amount);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _beforeTokenTransfer(_msgSender(), spender, addedValue);\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subVal`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subVal) public returns (bool) {\r\n    _beforeTokenTransfer(_msgSender(), spender, subVal);\r\n    uint256 curAllow = _allowances[_msgSender()][spender];\r\n    require(curAllow >= subVal, \"Decreased allowance below zero\");\r\n    _approve(_msgSender(), spender, curAllow.sub(subVal));\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n   *\r\n   * This internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` cannot be the zero address.\r\n   * - `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * We did a few twist here: This is a generic ERC20 transfer, to keep with the\r\n   * standard, balance of sender is deducted from the normal iterated balance\r\n   * but we check if recipient has lock in force, preference is given to the extra\r\n   * secure layer.\r\n   Note: \r\n        o If the balance of sender is less than value to send and there is no lock set up,\r\n            the transfer fails ie usual ERC20 behavior.\r\n        \r\n        o If balance of sender is less than value to send and there was lock, the spendable \r\n            balance reads to 0 and the locked balance accumulates it.\r\n\r\n        o If sender's balance can cover the amount to spend, the usual ERC20 transfer is executed.\r\n        o If Recipient has lock set up, we give preference by sending to locked spot otherwise regular.\r\n\r\n        @notice This model however is fully compatible with the ERC20 token standard, and does not \r\n                in any way deny holders of right to their token. The system only executes secondary \r\n                instructions if the holder had given previous order such as setting\r\n                up a locker.\r\n\r\n        @notice We automatically unlock sender's locked balances when its time.\r\n                Asset is forwarded to the escape address provided.\r\n   */\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 reqAmt\r\n  ) internal virtual {\r\n    _beforeTokenTransfer(from, to, reqAmt);\r\n    require(to != address(0), \"address: zero\");\r\n    Holders memory fH = _balances[from];\r\n    AccountBalances memory accFrom = _accountBalances(from);\r\n\r\n    if (_now() >= fH.locked.lockTil) {\r\n      unchecked {\r\n        _balances[from].main = fH.main - accFrom.locked;\r\n        _balances[fH.locked.routeTo].main += accFrom.locked;\r\n      }\r\n      _balances[from].locked.value = 0;\r\n    } else { require(accFrom.spendable >= reqAmt, \"Insuff bal\");}\r\n\r\n    if (accFrom.spendable >= reqAmt) {\r\n      unchecked {\r\n        _balances[from].main = fH.main - reqAmt;\r\n        _balances[to].main += reqAmt;\r\n      }\r\n    }\r\n\r\n    emit Transfer(from, to, reqAmt);\r\n  }\r\n\r\n  ///@dev Try unlock \"who's\" locked balance\r\n  function _tryUnlock(Holders memory hodl, address who, uint256 reqAmt) private returns (uint locked) {\r\n    require(hodl.locked.value >= reqAmt, \"No prev locked\");\r\n    if(_now() >= hodl.locked.lockTil) {\r\n      unchecked {\r\n        _balances[who].locked.value = hodl.locked.value - reqAmt;\r\n        _balances[who].main -= reqAmt;\r\n        _balances[hodl.locked.routeTo].main += reqAmt;\r\n      }\r\n      locked = hodl.locked.value;\r\n    }\r\n    return locked;\r\n  }\r\n\r\n  ///@dev panic moves all balances of `who` to the set escaped address\r\n  function _panicMove(address who) internal virtual {\r\n    Holders memory hodl = _balances[who];\r\n    require(hodl.locked.routeTo != address(0), \"Escape addr is empty\");\r\n    AccountBalances memory acc  = _accountBalances(who);\r\n\r\n    uint allBal = acc.spendable.add(acc.locked).add(acc.inSubScription);\r\n    unchecked {\r\n      _balances[hodl.locked.routeTo].main += allBal;\r\n    }\r\n    _balances[who].main = 0;\r\n    _balances[who].locked.value = 0;\r\n    _balances[who].sub.value = 0;\r\n  }\r\n\r\n  ///@notice Checks if \"who\" qualifies for share reward.\r\n  function _postShare(address who, uint locked) private {\r\n    Share memory sh = tier1[who];\r\n    uint earnings;\r\n    if(sh.lastLockedDate > 0) {\r\n      if(_now() > sh.lastLockedDate){\r\n        unchecked {\r\n          uint diff = _now() - sh.lastLockedDate;\r\n          uint256 _earnRate = meta.rewardRate.mul(10000).div(100.0e18).mul(10 ** 18); // ((meta.rewardRate * 10000) / 100.0e18) * 10**18;\r\n          uint earnPerSec = _earnRate.mul(locked).div(10 ** 18).div(10000); // ((_earnRate * locked) / 10**18) / 10000;\r\n          earnings = earnPerSec.mul(diff);\r\n        }\r\n        tier1[who].lastLockedDate = 0;\r\n        if(meta.shareActive && reserved >= earnings) {\r\n          reserved -= earnings;\r\n          _mint(who, earnings);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**User unlocks balance\r\n    @param ul : #parameters.\r\n              If cmd true, we unlock the selfLocked otherwise unlock the subscription\r\n              by reqAmt\r\n   */\r\n  function _unlock(UnlockParam memory ul) internal virtual {\r\n    Holders memory hodl = _balances[ul.who];\r\n    uint locked;\r\n    if(ul.cmd) locked = _tryUnlock(hodl, ul.who, ul.reqAmt);\r\n    if(!ul.cmd) {\r\n      require(hodl.sub.value >= ul.reqAmt, \"Amount exceed locked\");\r\n      unchecked {\r\n        _balances[ul.who].sub.value -= ul.reqAmt;\r\n      }\r\n      locked = ul.reqAmt;\r\n    }\r\n    _postShare(ul.who, locked);\r\n    \r\n  }\r\n\r\n  /**Holder or Digesu trsutee account (on permissioned) is able to lock balance\r\n      of `_of`.\r\n      @param lp : Parameters.\r\n      @notice : Amount locked will always be forwarded to `routeTo` when lock\r\n                        period is over.\r\n      Note: If caller has no lock previously set,`routeTo` must not be an empty address.\r\n   */\r\n  function _lock(LockParam memory lp) internal virtual {\r\n    Holders memory hodl = _balances[lp.who];\r\n    Share memory t1 = tier1[lp.who];\r\n\r\n    if(lp.cmd) {\r\n      require(lp.routeTo != address(0) && lp.routeTo != lp.who, \"Invalid addr\");\r\n      hodl.locked.routeTo = lp.routeTo;\r\n      _balances[lp.who].locked = SelfLocked(lp.lockTil * 1 days, hodl.locked.value + lp.inValue, lp.routeTo);\r\n    } else {\r\n      _balances[lp.who].sub = Subscription(hodl.sub.value + lp.inValue);\r\n    }\r\n    \r\n    tier1[lp.who].lastLockedDate = lp.lockTil == 0 ? 0 : t1.lastLockedDate > 0 ? t1.lastLockedDate : _now();\r\n  }\r\n\r\n  ///@dev Returns current Unix time stamp\r\n  function _now() internal view returns(uint32) {\r\n    return uint32(block.timestamp);\r\n  }\r\n\r\n  ///@dev Returns QFT balance of this contract.\r\n  function _balanceThis() internal virtual returns (uint256) {\r\n    return _balances[address(this)].main;\r\n  }\r\n\r\n  ///@dev Returns struct of balances relating to `who`\r\n  function _accountBalances(address who) internal virtual view returns (AccountBalances memory) {\r\n    Holders memory _h = _balances[who];\r\n    return AccountBalances(_h.main - (_h.locked.value + _h.sub.value), _h.locked.value, _h.sub.value);\r\n  }\r\n\r\n  \r\n  function _maxSupply() internal virtual returns (uint256) {\r\n    return 1_000_000_000 * 10 ** 18;\r\n  }\r\n\r\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n   * the total supply.\r\n   *\r\n   * Emits a {Transfer} event with `from` set to the zero address.\r\n   \r\n   * Requirements:\r\n   * - `account` cannot be the zero address.\r\n   */\r\n  function _mint(address to, uint256 amount) internal virtual {\r\n    require(to != address(0), \"ERC20: mint zero address?\");\r\n    require(meta.tSupply + amount <= _maxSupply(), \"Max supply ovf\");\r\n     _beforeTokenTransfer(address(0), to, amount);\r\n\r\n      meta.tSupply = meta.tSupply.add(amount);\r\n      _balances[to].main =  _balances[to].main.add(amount);\r\n      emit Transfer(address(0), to, amount);\r\n\r\n      _afterTokenTransfer(address(0), to, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the\r\n   * total supply.\r\n   *\r\n   * Emits a {Transfer} event with `recipient` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens.\r\n   */\r\n  function _burn(address from, uint256 amount) internal virtual {\r\n    require(from != address(0), \"ERC20: zero address\");\r\n\r\n    _beforeTokenTransfer(from, address(0), amount);\r\n\r\n    uint256 alcBal = _balances[from].main;\r\n    require(alcBal >= amount, \"ERC20: burn exceeds balance\");\r\n    unchecked {\r\n      _balances[from].main = alcBal - amount;\r\n    }\r\n    meta.tSupply = meta.tSupply.sub(amount);\r\n\r\n    emit Transfer(from, address(0), amount);\r\n\r\n    _afterTokenTransfer(from, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `_owner` s tokens.\r\n   *\r\n   * This internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `_owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(address _owner,address spender,uint256 amount) internal {\r\n    require(_owner != address(0) && spender != address(0), \"ERC20: zero address\");\r\n    _beforeTokenTransfer(_owner, spender, amount);\r\n    _allowances[_owner][spender] = amount;\r\n    emit Approval(_owner, spender, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``\"s tokens\r\n   * will be transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``\"s tokens will be burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal {}\r\n\r\n  function _afterTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal {}\r\n\r\n  /**@dev Pause inbuilt reward\r\n  */\r\n  function _lockTier1Zone() internal virtual {\r\n    meta.shareActive = false;\r\n  }\r\n\r\n  /**@dev unpause inbuilt reward\r\n*/\r\n  function _unlockTier1Zone() internal virtual {\r\n    meta.shareActive = true;\r\n  }\r\n\r\n  ///@dev Returns token data plus \"who's\" profile\r\n  function tokenData(address who) public view override returns (MetaData memory, Holders memory) {\r\n    return ( \r\n      MetaData(meta.rewardRate, meta.tSupply, meta.shareActive, meta.name, meta.symbol, meta.digesuAddr),\r\n      _balances[who]\r\n    );\r\n  }\r\n\r\n  ///@dev Fetches digesu contract address\r\n  function _digesuAddr() internal view virtual returns (address) {\r\n    return meta.digesuAddr;\r\n  }\r\n\r\n  ///@dev Updates digesu contract address\r\n  function _setDigesuContract(address newAddr) internal virtual {\r\n    require(newAddr != address(0), \"Zero Addr\");\r\n    meta.digesuAddr = newAddr;\r\n  }\r\n\r\n}\r\n\r\n//Overdraft"
    },
    "contracts/digesu/token/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n     /** @dev Moves token of an 'amount' to the locked\r\n    */\r\n    function lockSpecific(address routeTo, uint256 inValue, uint16 lockTil) external;\r\n\r\n    /** @dev Locks `amount` for `target` for subscription purpose\r\n    */\r\n    function lockFor(address target, uint amount) external;\r\n\r\n    /** @dev unlocks `amount` for `target` for subscription purpose\r\n    */\r\n    function unlockFor(\r\n        address from,\r\n        address to,\r\n        uint mintable,\r\n        uint amountTo,\r\n        uint amount\r\n    ) external;\r\n\r\n\r\n    /** @dev Moves 'amount' to regular balance\r\n        @param amount - Amount to unloc.\r\n     */\r\n    function unlockSpecific(uint amount) external ;\r\n\r\n    /** @dev Return who's balances\r\n        @param who - Account to enquire for.\r\n     */\r\n    function accountBalances(address who) external view returns(AccountBalances memory);\r\n   \r\n    /**@dev Return QFT's Metadata including the information of `who`.\r\n     */\r\n    function tokenData(address who) external view returns(MetaData memory, Holders memory);\r\n\r\n    /// @notice Unlocks and transfer at the same time .\r\n    function unlockAndTransfer(\r\n        address from,\r\n        address to,\r\n        uint amount\r\n    ) external;\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n      * @dev structured data for holding user's balance\r\n    */\r\n    struct Holders {\r\n        uint256 main;\r\n        SelfLocked locked;\r\n        Subscription sub;\r\n    }\r\n\r\n    struct SelfLocked {\r\n        uint32 lockTil;\r\n        uint256 value;\r\n        address routeTo;\r\n    }\r\n\r\n    struct Subscription {\r\n        uint256 value;\r\n    }\r\n\r\n    struct AccountBalances {\r\n        uint256 spendable;\r\n        uint256 locked;\r\n        uint256 inSubScription;\r\n    }\r\n\r\n    struct Share {\r\n        uint8 idleTimeInDays;\r\n        uint32 lastLockedDate;\r\n        uint256 reward;\r\n    }\r\n\r\n    // READONLY : Standard API for reading QFT metadata \r\n    struct MetaData {\r\n        uint rewardRate;\r\n        uint256 tSupply;\r\n        bool shareActive;\r\n        string name;\r\n        string symbol;\r\n        address digesuAddr;\r\n    }\r\n\r\n    struct AutoIncentive {\r\n        uint256 budget;\r\n    }\r\n\r\n    struct LockParam {\r\n        address who; \r\n        address routeTo; \r\n        uint256 inValue; \r\n        uint16 lockTil; \r\n        bool cmd;\r\n    }\r\n\r\n    struct UnlockParam {\r\n        address who;\r\n        uint256 reqAmt;\r\n        bool cmd;\r\n    }\r\n\r\n\r\n}"
    },
    "contracts/digesu/token/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "contracts/digesu/token/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"
    },
    "contracts/digesu/token/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n"
    },
    "contracts/digesu/token/QuatreToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"./ERC20Abstract.sol\";\r\nimport \"./Pausable.sol\";\r\nimport \"./Ownable.sol\";\r\n// import \"../digesu/interfaces/ICommonParam.sol\";\r\n\r\n/**\r\n    @title QuatreFinance Token is the native token of the Quatrefinance platform.\r\n            It is a utility token that gives its holders access to Quatrefinance\r\n            products.\r\n        Standard: ERC20 Standard.\r\n        Type: Deflationary.\r\n        Max Supply: 1_000_000_000.\r\n        Decimal: 18.\r\n\r\n        For more detail, see ERC20Abstract.sol\r\n\r\n    @author \r\n        For: Quatrefinance \r\n        By: Bobeu\r\n            Github: https://github.com/bobeu\r\n            Twitter: https://twitter.com/bobman7000\r\n*/\r\ncontract QuatreToken is ERC20Abstract, Pausable, Ownable {\r\n    // Reward switcher\r\n    bool private rewardActive;\r\n\r\n    // Action only Digesu can perform.\r\n    modifier onlyDigesu() {\r\n        address digesu = _digesuAddr();\r\n        require(digesu != address(0) && _msgSender() == digesu, \"NA\");\r\n        _;\r\n    }\r\n\r\n    constructor () ERC20Abstract(\"QuatreFinance Token\", \"QFT\", _msgSender()) { rewardActive = true; }\r\n\r\n    receive () external payable { payable(_digesuAddr()).transfer(msg.value); } \r\n\r\n    ///@dev Pauses the contract. When called, some functions are halted.\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    ///@dev unpauses the contract.\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    ///@dev Moves the balance of an 'amount' from locked to regular balances\r\n    function unlockSpecific(uint amount) public override whenNotPaused {\r\n        _unlock(UnlockParam(_msgSender(), amount, true));\r\n    }\r\n\r\n    ///@dev Moves the balance of an 'amount' from locked to regular balances\r\n    function panicMove(address lostAddress) public whenNotPaused onlyOwner {\r\n        _panicMove(lostAddress);\r\n    }\r\n\r\n    ///@dev Moves the balance of an 'amount' from regular to locked to balances\r\n    function lockSpecific(address routeTo, uint256 amount, uint16 lockTil) public override whenNotPaused {\r\n        require(lockTil > 0, \"Zero Days\");\r\n        _lock(LockParam(_msgSender(), routeTo, amount, lockTil, true));\r\n    }\r\n\r\n    ///@dev Mints token of `amount  \r\n    function mint(address to, uint256 amount) public onlyOwner {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    ///@dev Burns token of `amount`\r\n    function burn(uint amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    ///@dev Returns max supply\r\n    function maxSupply() public returns (uint) {\r\n        return _maxSupply();\r\n    }\r\n\r\n    /** Locks specific amount to `tsrget's` account\r\n        @notice Callable only by the Digesu contract on behalf of subscribers on approval.\r\n        Note : User must initiate a transaction that initiate the call otherise Digesu cannot execute on its own.\r\n                Neither can any member of the team nor the deployer is able to influence Digesu to make unintended call.\r\n    */\r\n    function lockFor(address target, uint amount) public override onlyDigesu {\r\n        _lock(LockParam(target, address(0), amount, 0, false));\r\n    }\r\n\r\n    /**\r\n        @notice Callable only by the Digesu contract on behalf of subscribers on approval.\r\n        Note : User must initiate a transaction that sends the call otherwise Digesu cannot execute this on its own.\r\n                Neither can any member of the team nor the deployer is able to influence Digesu to make unintended call.\r\n            \r\n            o User who successfully complete a circle on Digesu are entitled to mint some QFT based on the amount contributed.\r\n                For proper reward calculation, see Utils.computeReward().\r\n            o Minting reqard is based on whether minting is active or not.\r\n            o A condition may also warrant transfering penalty charged to other party.    \r\n    */\r\n    function unlockFor(\r\n        address from,\r\n        address to,\r\n        uint mintable,\r\n        uint amountTo,\r\n        uint amount\r\n    ) public override onlyDigesu {\r\n        _unlock(UnlockParam(from, amount, false));\r\n        if(rewardActive) _mint(from, mintable);\r\n        if(amountTo > 0) _transfer(from, to, amountTo);\r\n\r\n    }\r\n\r\n    /**\r\n        @dev Perform dual actions: \r\n            1. Unlock subscription balances of 'par.amount'.\r\n            2. Move the balance to 'to'.\r\n\r\n        Note : User must initiate a transaction that sends the call otherwise Digesu cannot execute this on its own.\r\n            Neither can any member of the team nor the deployer is able to influence Digesu to make unintended call.\r\n     */\r\n    function unlockAndTransfer(\r\n        address from,\r\n        address to,\r\n        uint amount\r\n    ) external onlyDigesu {\r\n        _unlock(UnlockParam(from, amount, false));\r\n        _transfer(from, to, amount);\r\n    }\r\n\r\n    // See ERC20 `_accountBalances`\r\n    function accountBalances(address who) public view override returns(AccountBalances memory) {\r\n        return _accountBalances(who);\r\n    }\r\n\r\n    //See ERC20 _lockTier1Zone\r\n    function lockTier1() public onlyOwner {\r\n        _lockTier1Zone();\r\n    }\r\n\r\n    //See ERC20 _unlockTier1Zone\r\n    function unlockTier1() public onlyOwner {\r\n        _unlockTier1Zone();\r\n    }\r\n\r\n    ///@dev Activates reward\r\n    function activateReward() public onlyOwner {\r\n        require(!rewardActive, \"Not Paused\");\r\n        rewardActive = true;\r\n    }\r\n\r\n    ///@dev Deactivates reward\r\n    function deActivateReward() public onlyOwner {\r\n        require(rewardActive, \"Paused\");\r\n        rewardActive = false;\r\n    }\r\n\r\n    /**\r\n        @dev Batch transfer: enables to transfer to multiple recipients.\r\n                Also flexible enough to allow for dynamic transfer value.\r\n     */\r\n    function dynamicTransfer(uint[] memory reqAmts, address[] memory tos) public {\r\n        for (uint i = 0; i < tos.length; i++) {\r\n            address to = tos[i];\r\n            uint amount = reqAmts[i];\r\n            _transfer(_msgSender(), to, amount);\r\n        }\r\n    }\r\n\r\n    //See DigesuAbstract.sol\r\n    function updateDigesuAddr(address newAddr) public onlyOwner {\r\n        _setDigesuContract(newAddr);\r\n    }\r\n\r\n}"
    },
    "contracts/digesu/token/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity 0.8.9;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./draft-IERC20Permit.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}