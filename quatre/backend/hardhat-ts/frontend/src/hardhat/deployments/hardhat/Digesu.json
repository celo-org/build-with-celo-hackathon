{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [],
      "name": "AccountAlreadyDeactivated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AccountNotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AllMemberIsPaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExecutionStopped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Failed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IDoNotAcceptEtherIFYouForceItLost",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InSufficientValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentArrayValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "InsufficientFund",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientQuorum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParameter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAccountDetected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SomethingWentWrong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StatusAlreadyUpdated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SystemAlreadyRunning",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SystemNotRunning",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TargetHasNoAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnAuthorizedCaller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UnsupportedAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsupportedToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalRestricted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "AccountLaunched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum ICommon.Mode",
                  "name": "mode",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "quorum",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "selector",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ccr",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "duration",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ICommon.Uints",
              "name": "uints",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "unit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "receivable",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPool",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ICommon.Uint256s",
              "name": "uint256s",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "lastPaid",
                  "type": "address"
                }
              ],
              "internalType": "struct ICommon.Addresses",
              "name": "addrs",
              "type": "tuple"
            },
            {
              "internalType": "address[]",
              "name": "mems",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "allGh",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ICommon.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "BandCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "alc",
          "type": "address"
        }
      ],
      "name": "Cancellation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "GetFinanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Joined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NewAccount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Payback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Rekeyed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum ICommon.Mode",
                  "name": "mode",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "quorum",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "selector",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ccr",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "duration",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ICommon.Uints",
              "name": "uints",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "unit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "receivable",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPool",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ICommon.Uint256s",
              "name": "uint256s",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "lastPaid",
                  "type": "address"
                }
              ],
              "internalType": "struct ICommon.Addresses",
              "name": "addrs",
              "type": "tuple"
            },
            {
              "internalType": "address[]",
              "name": "mems",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "allGh",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ICommon.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "RoundUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allPools",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum ICommon.Mode",
                  "name": "mode",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "quorum",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "selector",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ccr",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "duration",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ICommon.Uints",
              "name": "uints",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "unit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "receivable",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPool",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ICommon.Uint256s",
              "name": "uint256s",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "lastPaid",
                  "type": "address"
                }
              ],
              "internalType": "struct ICommon.Addresses",
              "name": "addrs",
              "type": "tuple"
            },
            {
              "internalType": "address[]",
              "name": "mems",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "allGh",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICommon.Pool[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "cancelBand",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalValueContributed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subscribers",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "durationIndays",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "colCoverateRatio",
          "type": "uint16"
        },
        {
          "internalType": "address[]",
          "name": "members",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "createPrivatePool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorum",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "durationInDays",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "colCoverageRatio",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "createPublicPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "enquireLiquidation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "who",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expectedRepaymentTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "colBalInToken",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICommon.Liquidation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "getFinance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "joinABand",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract IAccountManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "payback",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "roundUp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minimumPoolAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeTo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "setSupportedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "supportedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "updateMinPoolAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeTo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "penFee",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "makerFee",
          "type": "uint8"
        }
      ],
      "name": "updatePublicData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc81c86b8b7a1ba423df309e35de4463aa82f72cebe00a70b74f56b0a6fb59471",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "4134475",
    "logsBloom": "0x
    "blockHash": "0xbc8c7a5a7f36f6ba445946d2237da1b1e86d4b177e9820bf14cf1280529024bd",
    "transactionHash": "0xc81c86b8b7a1ba423df309e35de4463aa82f72cebe00a70b74f56b0a6fb59471",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0xc81c86b8b7a1ba423df309e35de4463aa82f72cebe00a70b74f56b0a6fb59471",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbc8c7a5a7f36f6ba445946d2237da1b1e86d4b177e9820bf14cf1280529024bd"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "4134475",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f01f1aa2e2627a9f136b14161ee52bf0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountAlreadyDeactivated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccountNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllMemberIsPaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionStopped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Failed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IDoNotAcceptEtherIFYouForceItLost\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InSufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InsufficientFund\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientQuorum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAccountDetected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SomethingWentWrong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StatusAlreadyUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SystemAlreadyRunning\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SystemNotRunning\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetHasNoAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnAuthorizedCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UnsupportedAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalRestricted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AccountLaunched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"enum ICommon.Mode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ccr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct ICommon.Uints\",\"name\":\"uints\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"}],\"internalType\":\"struct ICommon.Uint256s\",\"name\":\"uint256s\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"}],\"internalType\":\"struct ICommon.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"mems\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"allGh\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ICommon.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"BandCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"alc\",\"type\":\"address\"}],\"name\":\"Cancellation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"GetFinanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Payback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Rekeyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"enum ICommon.Mode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ccr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct ICommon.Uints\",\"name\":\"uints\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"}],\"internalType\":\"struct ICommon.Uint256s\",\"name\":\"uint256s\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"}],\"internalType\":\"struct ICommon.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"mems\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"allGh\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ICommon.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"RoundUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allPools\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ICommon.Mode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ccr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct ICommon.Uints\",\"name\":\"uints\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"}],\"internalType\":\"struct ICommon.Uint256s\",\"name\":\"uint256s\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastPaid\",\"type\":\"address\"}],\"internalType\":\"struct ICommon.Addresses\",\"name\":\"addrs\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"mems\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"allGh\",\"type\":\"uint256\"}],\"internalType\":\"struct ICommon.Pool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"cancelBand\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValueContributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscribers\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"durationIndays\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"colCoverateRatio\",\"type\":\"uint16\"},{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createPrivatePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"durationInDays\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"colCoverageRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"createPublicPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"enquireLiquidation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedRepaymentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBalInToken\",\"type\":\"uint256\"}],\"internalType\":\"struct ICommon.Liquidation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getFinance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"joinABand\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IAccountManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"roundUp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setSupportedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"supportedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinPoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"penFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"makerFee\",\"type\":\"uint8\"}],\"name\":\"updatePublicData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createPrivatePool(uint8,uint16,address[],address,uint256)\":{\"details\":\"Launches a public band - Native currency i.e ETH or Platform currency.\",\"params\":{\"amount\":\"- Contribution amount.\",\"asset\":\"- Asset's contract address.\",\"colCoverateRatio\":\"- Collateral factor - determinant of the amount of collateral to require of gFer. This is expressed as a multiple index of total loanable amount.\",\"durationIndays\":\"- The maximum time limit (from when the turn time begins) with which a participant will take custody of the loan before repayment.\",\"members\":\"- List of expected members.\"}},\"createPublicPool(uint8,uint8,uint16,uint256,address)\":{\"details\":\"Launches a public band - Native currency i.e ETH or Platform currency.\",\"params\":{\"amount\":\"- Unit contribution.\",\"asset\":\"- address of the ERC20 standard asset to use. Note: asset must be supported by digesu.\",\"colCoverageRatio\":\"- Collateral factor - determinant of the amount of collateral to require of gFer. This is expressed as a multiple index of total loanable amount.\",\"durationInDays\":\"- The maximum time limit (from when the turn time begins) with which a participant will take custody of the loan before repayment.\",\"quorum\":\"- Required number of participants to form a band. \"}},\"getFinance(uint256)\":{\"details\":\"Members of a pool can pick up the contributed fund when certain coditions are met.\",\"params\":{\"poolId\":\": Band's Id which caller belong to. Note:\"}},\"joinABand(uint256)\":{\"details\":\"Add new member.\",\"params\":{\"poolId\":\": Band index. Note: We set up a trustee to hold all funds in the pool at poolId in trust  for all members.\"}},\"liquidate(uint256)\":{\"details\":\"Liquidates defaulter. Note: The expected repayment time for last paid must have passed.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"payback(uint256)\":{\"details\":\"Utility to payback borrowed fund.\",\"params\":{\"poolId\":\": Pool number. Note: We are only concerned about who is to pay back and not  who is paying back meaning any of the members can pay  on behalf of another.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setSupportedTokens(address)\":{\"details\":\"Updates the storage for supportedTokens Note Dual function: Can also remove support for `newToken`;\",\"params\":{\"newToken\":\": newSupported token or to be removed.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses contract\"},\"updateMinPoolAmount(uint256)\":{\"details\":\"Updates minimum amount contribution amount Note: Only Owner have the privilege to call this function.\"},\"updatePublicData(address,address,uint8,uint8)\":{\"details\":\"Updates penalty fee.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cr()\":{\"notice\":\"Other statistical data - Read-only o Total Values contributed todate; o Total subscribers;\"}},\"notice\":\"Digesu ====== A multi-peer finance structure that allows many parties come together, contribute money in equal amount for the purpose of financing themselves in a rotational manner. All the  participant is lender and borrower same time. Each beneficiary pays back with very minimal maker rate that's almost insignificant ranging between as little as 0.1 to 5%. The maker  rate being an amount charged in favor of the platform. For every successful circle, all the participant is entitled to farming reward in QFT, with  which they can make more profit. We also bountily reward best performing band every 3 months.  Example: A 3-man band (A, B, C) created with unit amount 1 ETH. - 'A' launches the band with a commitment of 1 ETH, becomes the admin - 'A' is added to slot 1, and a trustee is created for the band. - 1 ETH is forwarded to trustee. - 'B' joins with commitment of 1 ETH, added to slot 2. - 'C' joins with commitment of 1 ETH, added to slot 3. - There is 3 ETH locked with Trustee, and \\\"A's\\\" time to withdraw is now. - Join function is disabled, and 'GetFinance' is unlocked. - 3 ETH is available to 'B' to withdraw. - 'B's wallet is screened for enough collateral (QFT). o If true, 3 ETH is sent to 'B' otherwise operation failed. o If time for 'B' to withdraw has passed, any member of the band who is the current caller will replace \\\"B's\\\" position, and claim the fund. o Assume 'C' calls, \\\"C's\\\" position is swapped with \\\"B's\\\". CIRCUIT BREAK ------------- o There is a circuit break when any member of such band explicitly call the roundUp(). o This can only be done when all the participants has successfully 'GETFINANCED'. PAYBACK:  ====== o Any member that 'GETFINANCE' has a payback period which was initially specified  by the admin. o If the payback period elapsed, nothing is done, until someone calls to liquidate the defaulter. o If after time elapsed, the beneficiary calls, they're surcharge with 5% of the  collateral balance (in token value). The penalty is charged in favor of the next on the queue to 'GETFINANCE', and his/her account is credited. The balance being the amount left after 5% deduction is released to the owner. o If the beneficiary stays within expected repayment time (ERP), the above shall not apply. Their collateral balance is unlocked immediately. LIQUIDATION ========== o Anyone (either a member or outsider) can liquidate the defaulter. When this happens, the liquidator absorbs the current debt (exact amount or greater must be sent along with the call). They absorbs fully the profile of the defaulter including the collateral balances. The circle then continues. ERROR CODE ========== 1. Function not available. 2. Value is below minimum. 3. Not a member. 4. Pool not ready. 5. No debt found. 6. User is yet to default payment. 7. Address is empty. 8. Price is empty. 9. Members exceed limit. 10. Already a member of this band. 11. Value out of bound. 1. Amount exists 2. Not an Owner 3. Insufficient balance 4. Out of bound. 5. Pool is filled. 6. Function locked. 7. User not a member in this band. 8. Value less than expected. 9. Invalid pool id. 10. User already getFinance. 11. User is yet to default payment. 12. Address is empty. 13. Invalid positioning. 14. Anomally detected: User not paid; 15. Cannot cancel at this time. Pool already more than 1. 16. All members yet to GetFinance. 17. Cannot have admin in multiple places. 18. User cannot replicate in a band. 19. Invalid input. 20. Operation failed.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/digesu/Digesu.sol\":\"Digesu\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/digesu/Digesu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./DigesuLib.sol\\\";\\r\\n\\r\\n\\r\\n/**AUTHOR: ISAAC JESSE \\r\\n * GITHUB: \\\"https://github.com/bobeu\\\"\\r\\n * LINKEDIN: \\\"https://linkedin.com/\\r\\n*/\\r\\n\\r\\n\\r\\n/** \\r\\n  Digesu\\r\\n    ======\\r\\n    A multi-peer finance structure that allows many parties come together, contribute money\\r\\n    in equal amount for the purpose of financing themselves in a rotational manner. All the \\r\\n    participant is lender and borrower same time. Each beneficiary pays back with very minimal\\r\\n    maker rate that's almost insignificant ranging between as little as 0.1 to 5%. The maker \\r\\n    rate being an amount charged in favor of the platform.\\r\\n\\r\\n    For every successful circle, all the participant is entitled to farming reward in QFT, with \\r\\n    which they can make more profit. We also bountily reward best performing band every 3 months. \\r\\n\\r\\n      Example: A 3-man band (A, B, C) created with unit amount 1 ETH.\\r\\n              - 'A' launches the band with a commitment of 1 ETH, becomes the admin\\r\\n              - 'A' is added to slot 1, and a trustee is created for the band.\\r\\n              - 1 ETH is forwarded to trustee.\\r\\n              - 'B' joins with commitment of 1 ETH, added to slot 2.\\r\\n              - 'C' joins with commitment of 1 ETH, added to slot 3.\\r\\n              - There is 3 ETH locked with Trustee, and \\\"A's\\\" time to withdraw is now.\\r\\n              - Join function is disabled, and 'GetFinance' is unlocked.\\r\\n              - 3 ETH is available to 'B' to withdraw.\\r\\n              - 'B's wallet is screened for enough collateral (QFT).\\r\\n                o If true, 3 ETH is sent to 'B' otherwise operation failed.\\r\\n                o If time for 'B' to withdraw has passed, any member of the band\\r\\n                  who is the current caller will replace \\\"B's\\\" position, and claim\\r\\n                  the fund.\\r\\n                o Assume 'C' calls, \\\"C's\\\" position is swapped with \\\"B's\\\".\\r\\n\\r\\n                    CIRCUIT BREAK\\r\\n                    -------------\\r\\n                    o There is a circuit break when any member of such band explicitly call the roundUp().\\r\\n                    o This can only be done when all the participants has successfully 'GETFINANCED'.\\r\\n\\r\\n                PAYBACK: \\r\\n                ======\\r\\n                o Any member that 'GETFINANCE' has a payback period which was initially specified \\r\\n                  by the admin.\\r\\n                o If the payback period elapsed, nothing is done, until someone calls to liquidate\\r\\n                  the defaulter.\\r\\n                o If after time elapsed, the beneficiary calls, they're surcharge with 5% of the \\r\\n                  collateral balance (in token value). The penalty is charged in favor of the next\\r\\n                  on the queue to 'GETFINANCE', and his/her account is credited. The balance being\\r\\n                  the amount left after 5% deduction is released to the owner.\\r\\n                o If the beneficiary stays within expected repayment time (ERP), the above shall not\\r\\n                  apply. Their collateral balance is unlocked immediately.\\r\\n                \\r\\n                LIQUIDATION\\r\\n                ==========\\r\\n                o Anyone (either a member or outsider) can liquidate the defaulter. When this happens,\\r\\n                  the liquidator absorbs the current debt (exact amount or greater must be sent along\\r\\n                  with the call). They absorbs fully the profile of the defaulter including the collateral\\r\\n                  balances. The circle then continues.\\r\\n\\r\\n     ERROR CODE\\r\\n     ==========\\r\\n  1. Function not available.\\r\\n  2. Value is below minimum.\\r\\n  3. Not a member.\\r\\n  4. Pool not ready.\\r\\n  5. No debt found.\\r\\n  6. User is yet to default payment.\\r\\n  7. Address is empty.\\r\\n  8. Price is empty.\\r\\n  9. Members exceed limit.\\r\\n  10. Already a member of this band.\\r\\n  11. Value out of bound.\\r\\n\\r\\n    1. Amount exists\\r\\n  2. Not an Owner\\r\\n  3. Insufficient balance\\r\\n  4. Out of bound.\\r\\n  5. Pool is filled.\\r\\n  6. Function locked.\\r\\n  7. User not a member in this band.\\r\\n  8. Value less than expected.\\r\\n  9. Invalid pool id.\\r\\n  10. User already getFinance.\\r\\n  11. User is yet to default payment.\\r\\n  12. Address is empty.\\r\\n  13. Invalid positioning.\\r\\n  14. Anomally detected: User not paid;\\r\\n  15. Cannot cancel at this time. Pool already more than 1.\\r\\n  16. All members yet to GetFinance.\\r\\n  17. Cannot have admin in multiple places.\\r\\n  18. User cannot replicate in a band.\\r\\n  19. Invalid input.\\r\\n  20. Operation failed.\\r\\n */\\r\\n\\r\\ncontract Digesu is IDigesu, Currency, FuncHandler, Pausable, Ownable {\\r\\n  using Utils for bool;\\r\\n  using DigesuLib for *;\\r\\n\\r\\n  Data private data;\\r\\n\\r\\n    // Creation fee\\r\\n  uint public creationFee;\\r\\n\\r\\n  // Minimum amount that can be contributed\\r\\n  uint public minimumPoolAmount;\\r\\n\\r\\n  IAccountManager public manager;\\r\\n\\r\\n    /**Other statistical data - Read-only\\r\\n      o Total Values contributed todate;\\r\\n      o Total subscribers;\\r\\n  */\\r\\n  CR public cr;\\r\\n\\r\\n  modifier validateId(uint poolId) {\\r\\n    data.pools.comparePoolSize(poolId);\\r\\n    _;\\r\\n  }\\r\\n  \\r\\n  // Only when user is a member.\\r\\n  modifier memberStatus(uint poolId, address who, bool value, Mode mode) {\\r\\n    data.pools.assertIsMember(poolId, who, value);\\r\\n    _;\\r\\n  }\\r\\n  \\r\\n  /**\\r\\n    @dev Compares number of participants.\\r\\n      @param quorum - Number that should make up the required participants.\\r\\n  */\\r\\n  modifier validateQuorum(uint8 quorum) {\\r\\n    if(quorum == 0) revert InvalidInput();\\r\\n    if(quorum > type(uint8).max) revert InvalidInput();\\r\\n    // bool(quorum > 0).assertChained2(quorum <= type(uint8).max, \\\"9\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**@dev Scrutinize account from _msgSender if it exist\\r\\n   * or not. \\r\\n   * Note: Execution depends on the 'value'\\r\\n   */\\r\\n  modifier checkIfAccountExist(address who, bool value) {\\r\\n    _check(value, who);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier checkIfAddressesAreSet(address _token, address feeTo,address _manager) {\\r\\n    require(_token != address(0) && feeTo != address(0) && _manager != address(0), \\\"Addresses not set\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier validateList(address[] memory members, Mode mode) {\\r\\n    if(mode == Mode.STRICT) {\\r\\n      if(members.length <= 1) revert InsufficientQuorum();\\r\\n      // require(members.length > 1, \\\"19\\\");\\r\\n    }\\r\\n    require(members[0] ==_msgSender(), \\\"19\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setParams(\\r\\n    address _token, \\r\\n    uint _minimumPoolAmount, \\r\\n    address feeTo,\\r\\n    address _manager\\r\\n  ) \\r\\n    public onlyOwner  checkIfAddressesAreSet( _token,  feeTo, _manager )\\r\\n  {\\r\\n    data.pcd.token = _token;\\r\\n    data.pcd.feeTo = feeTo;\\r\\n    minimumPoolAmount = _minimumPoolAmount;\\r\\n    manager = IAccountManager(_manager);\\r\\n  }\\r\\n\\r\\n  //Fallback - Forward unsolicited Ether.\\r\\n  receive() external payable {\\r\\n    Address.sendValue(payable(data.pcd.feeTo), msg.value);\\r\\n  }\\r\\n\\r\\n  //Return account belonging to 'who';\\r\\n  function _account(address who) internal view returns(address alc) {\\r\\n    alc = manager.getAccount(who);\\r\\n  }\\r\\n\\r\\n  /**@dev If 'value' is true, 'who' must not already own an account\\r\\n   * otherwise, 'who' must own an account before now.\\r\\n   */\\r\\n  function _check(bool value, address who) internal view {\\r\\n    value? require(_account(who) == address(0), \\\"1\\\") : require(_account(who) != address(0), \\\"2\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Launches a public band - Native currency i.e ETH or Platform currency.\\r\\n      @param quorum - Required number of participants to form a band. \\r\\n      @param durationInDays - The maximum time limit (from when the turn time begins) with which a participant\\r\\n                                will take custody of the loan before repayment.\\r\\n      @param colCoverageRatio - Collateral factor - determinant of the amount of collateral to require of gFer.\\r\\n                                  This is expressed as a multiple index of total loanable amount.\\r\\n      @param amount - Unit contribution.\\r\\n      @param asset - address of the ERC20 standard asset to use.\\r\\n                Note: asset must be supported by digesu.\\r\\n  */\\r\\n  function createPublicPool(\\r\\n    uint8 quorum, \\r\\n    uint8 durationInDays, \\r\\n    uint16 colCoverageRatio, \\r\\n    uint amount,\\r\\n    address asset) \\r\\n      external\\r\\n      whenNotPaused\\r\\n      validateQuorum(quorum)\\r\\n      checkIfAccountExist(_msgSender(), false) \\r\\n      onlySupportedToken(asset)\\r\\n      // checkIfAddressesAreSet(data.pcd.token,  data.pcd.feeTo, address(manager) )\\r\\n      returns (bool)\\r\\n  {\\r\\n      address[] memory addrs = new address[](1);\\r\\n      addrs[0] = _msgSender();\\r\\n      (uint newPoolId) = data.createPublicPool(P1\\r\\n        (\\r\\n          uint8(quorum),\\r\\n          durationInDays,\\r\\n          colCoverageRatio,\\r\\n          amount,\\r\\n          addrs,\\r\\n          asset\\r\\n        ),\\r\\n        _account,\\r\\n        _unlock\\r\\n      );\\r\\n    require(data.pcd.token != address(0) && data.pcd.feeTo != address(0) && address(manager) != address(0), \\\"Addresses not set\\\");\\r\\n    emit BandCreated (newPoolId, data.pools._fetchPoolData(newPoolId));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n   /**\\r\\n    @dev Launches a public band - Native currency i.e ETH or Platform currency.\\r\\n      @param durationIndays - The maximum time limit (from when the turn time begins) with which a participant\\r\\n                                will take custody of the loan before repayment.\\r\\n      @param colCoverateRatio - Collateral factor - determinant of the amount of collateral to require of gFer.\\r\\n                                  This is expressed as a multiple index of total loanable amount.\\r\\n      @param members- List of expected members.\\r\\n      @param asset - Asset's contract address.\\r\\n      @param amount - Contribution amount.\\r\\n  */\\r\\n  function createPrivatePool(\\r\\n    uint8 durationIndays, \\r\\n    uint16 colCoverateRatio, \\r\\n    address[] memory members, \\r\\n    address asset,\\r\\n    uint amount) \\r\\n      external \\r\\n      whenNotPaused\\r\\n      validateQuorum(uint8(members.length))\\r\\n      checkIfAccountExist(_msgSender(), false) \\r\\n      onlySupportedToken(asset)\\r\\n      validateList(members, Mode.STRICT)\\r\\n      returns(bool)\\r\\n  {\\r\\n    uint newPoolId = data.createPrivatePool(P1\\r\\n      (\\r\\n        uint8(members.length),\\r\\n        durationIndays,\\r\\n        colCoverateRatio,\\r\\n        amount,\\r\\n        members,\\r\\n        asset\\r\\n      ),\\r\\n      _account,\\r\\n      _check,\\r\\n      _unlock\\r\\n    );\\r\\n    emit BandCreated (newPoolId, data.pools._fetchPoolData(newPoolId));\\r\\n    \\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Updates minimum amount contribution amount\\r\\n      Note: Only Owner have the privilege to call this function.\\r\\n  */\\r\\n  function updateMinPoolAmount(uint256 newAmount) public onlyOwner {\\r\\n    minimumPoolAmount = newAmount;\\r\\n  }\\r\\n  \\r\\n  /**@dev Add new member.\\r\\n      @param poolId : Band index.\\r\\n        Note: We set up a trustee to hold all funds in the pool at poolId in trust \\r\\n                  for all members.\\r\\n   */\\r\\n  function joinABand(uint poolId) \\r\\n    external\\r\\n    whenNotPaused\\r\\n    validateId(poolId)\\r\\n    checkIfAccountExist(_msgSender(), false)\\r\\n    memberStatus(poolId, _account(_msgSender()), false, data.pools._getMode(poolId))\\r\\n    checkFunctionPass(poolId, FuncTag.ADD)\\r\\n    returns(bool)\\r\\n    {\\r\\n      (Pool memory _p, address alc) = data.pools.joinABand(poolId, _account);\\r\\n      cr.totalValueContributed += _p.uint256s.unit;\\r\\n      cr.subscribers ++;\\r\\n      if(_p.mems.length == _p.uints.quorum) {\\r\\n        _lock(poolId, FuncTag.ADD);\\r\\n        _unlock(poolId, FuncTag.GET);\\r\\n        if(!IAccount(alc).updateTurnTime(poolId)) revert Failed();\\r\\n        // require(IAccount(alc).updateTurnTime(poolId), \\\"Failed\\\");\\r\\n      }\\r\\n\\r\\n      emit Joined(poolId, alc, _p.uint256s.unit);\\r\\n\\r\\n      return true;\\r\\n  }\\r\\n\\r\\n  \\r\\n  /**@dev Members of a pool can pick up the contributed fund when certain coditions\\r\\n          are met.\\r\\n      @param poolId : Band's Id which caller belong to.\\r\\n        Note:\\r\\n  */\\r\\n  function getFinance(uint poolId) \\r\\n    external\\r\\n    whenNotPaused \\r\\n    validateId(poolId)\\r\\n    checkIfAccountExist(_msgSender(), false) \\r\\n    memberStatus(poolId, _account(_msgSender()), true, data.pools._getMode(poolId))\\r\\n    checkFunctionPass(poolId, FuncTag.GET)\\r\\n    returns(bool)\\r\\n  {\\r\\n   (address valueTo, uint position) = data.getFinance(ICommon.CreateParam(poolId, _lock, _account, _getQFTPriceInETH));\\r\\n\\r\\n    emit GetFinanced(poolId, position, valueTo);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n   /**\\r\\n    @dev Utility to payback borrowed fund.\\r\\n      @param poolId : Pool number.\\r\\n      Note: We are only concerned about who is to pay back and not \\r\\n              who is paying back meaning any of the members can pay \\r\\n              on behalf of another.\\r\\n   */\\r\\n  function payback(uint poolId) \\r\\n    external \\r\\n    whenNotPaused\\r\\n    checkIfAccountExist(_msgSender(), false)\\r\\n    validateId(poolId)\\r\\n    memberStatus(poolId, _account(_msgSender()), true, data.pools._getMode(poolId))\\r\\n    returns(bool)\\r\\n  {\\r\\n    (GCB memory gcb, address alc) = data.payback(\\r\\n      poolId, \\r\\n      _account, \\r\\n      _lock, \\r\\n      _unlock\\r\\n    );\\r\\n    CR memory _cr = cr;\\r\\n    gcb.cr = _cr;\\r\\n    Utils.unlockCollateral(gcb);\\r\\n\\r\\n    emit Payback(poolId, gcb.cr2.valueContributed, alc);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  @dev Liquidates defaulter.\\r\\n    Note: The expected repayment time for last paid must have passed.\\r\\n  */\\r\\n  function liquidate(uint poolId) \\r\\n    external \\r\\n    whenNotPaused\\r\\n    checkIfAccountExist(_msgSender(), false)\\r\\n    returns(bool)\\r\\n  {\\r\\n    (address liq, uint amount) = data.liquidate(poolId, _msgSender(), _account);\\r\\n    emit Payback(poolId, amount, liq);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // See SubMain._enquireLiquidation(pid);\\r\\n  function enquireLiquidation(uint poolId) external view returns(Liquidation memory)  { \\r\\n    return data.pools.enquireLiquidation(poolId); \\r\\n  }\\r\\n\\r\\n   //See SubMain.sol\\r\\n  function roundUp(uint poolId) \\r\\n    external\\r\\n    whenNotPaused \\r\\n    checkFunctionPass(poolId, FuncTag.COMPLETE)\\r\\n    validateId(poolId)\\r\\n    checkIfAccountExist(_msgSender(), false)\\r\\n    memberStatus(poolId, _account(_msgSender()), true, data.pools._getMode(poolId))\\r\\n    returns(bool)\\r\\n  { \\r\\n    ICommon.Pool memory pool = data.roundUp(poolId);\\r\\n    emit ICommon.RoundUp(poolId, pool);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  ///@dev Pauses contract\\r\\n  function pause() public onlyOwner {\\r\\n    _pause();\\r\\n  }\\r\\n\\r\\n  ///@dev Unpauses contract\\r\\n  function unpause() public onlyOwner {\\r\\n    _unpause();\\r\\n  }\\r\\n\\r\\n  ///@dev Updates penalty fee.\\r\\n  function updatePublicData(\\r\\n    address feeTo,\\r\\n    address token,\\r\\n    uint8 penFee,\\r\\n    uint8 makerFee\\r\\n  ) public onlyOwner \\r\\n  {\\r\\n    data.updatePublicData( feeTo, token, penFee, makerFee );\\r\\n  }\\r\\n\\r\\n  // See SubMain.cancelBand(pid, who);\\r\\n  function cancelBand(uint poolId) \\r\\n    external\\r\\n    whenNotPaused\\r\\n    validateId(poolId)\\r\\n    checkIfAccountExist(_msgSender(), false)\\r\\n    memberStatus(poolId, _account(_msgSender()), true, data.pools._getMode(poolId))\\r\\n    returns(bool)\\r\\n  {\\r\\n    (uint value, address alc) = data.cancelBand(poolId, _account);\\r\\n    emit Cancellation(poolId, value, alc);\\r\\n    \\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // See SubMain._getPools()\\r\\n  function allPools() public view returns(Pool[] memory) {\\r\\n    return data.getPools();\\r\\n  }\\r\\n\\r\\n  function setSupportedTokens(address newToken) public override onlyOwner {\\r\\n    super.setSupportedTokens(newToken);\\r\\n  }\\r\\n\\r\\n  function supportedToken(address _token) external view returns(bool) {\\r\\n    return _supportedToken(_token);\\r\\n  }\\r\\n\\r\\n  // Get the token ptice\\r\\n  function _getQFTPriceInETH() internal pure returns (uint _price) {\\r\\n    _price = 1e15 wei; // ================================================> We use oracle here\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x9b47ba5bba69595b0e860b6f0d20e8e7c410b71116cc5fe52c5aebbd2074fcb0\",\"license\":\"MIT\"},\"contracts/digesu/DigesuLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./interfaces/IDigesu.sol\\\";\\r\\nimport \\\"./interfaces/ICommon.sol\\\";\\r\\nimport \\\"./libs/Utils.sol\\\";\\r\\nimport \\\"./peripherals/FuncHandler.sol\\\";\\r\\nimport \\\"./account/AccountManager.sol\\\";\\r\\nimport \\\"./peripherals/Currency.sol\\\";\\r\\nimport \\\"./interfaces/IAccountManager.sol\\\";\\r\\n\\r\\n/**\\r\\n  ERROR CODE\\r\\n  ==========\\r\\n  1. Amount exists\\r\\n  2. Not an Owner\\r\\n  3. Insufficient balance\\r\\n  4. Out of bound.\\r\\n  5. Pool is filled.\\r\\n  6. Function locked.\\r\\n  7. User not a member in this band.\\r\\n  8. Value less than expected.\\r\\n  9. Invalid pool id.\\r\\n  10. User already getFinance.\\r\\n  11. User is yet to default payment.\\r\\n  12. Address is empty.\\r\\n  13. Invalid positioning.\\r\\n  14. Anomally detected: User not paid;\\r\\n  15. Cannot cancel at this time. Pool already more than 1.\\r\\n  16. All members yet to GetFinance.\\r\\n  17. Cannot have admin in multiple places.\\r\\n  18. User cannot replicate in a band.\\r\\n  19. Invalid input.\\r\\n  20. Operation failed.\\r\\n */\\r\\n\\r\\nstruct Data {\\r\\n  //Other miscellaneous data. \\r\\n  IDigesu.PublicData pcd;\\r\\n\\r\\n  //Pool container\\r\\n  ICommon.Pool[] pools;\\r\\n    /**\\r\\n  @dev Tracks unit contribution.\\r\\n    @notice User cannot launch a pool with amount \\r\\n              already active until such band is filled or cancelled. \\r\\n  */\\r\\n  mapping(uint256 => bool) amountExist;\\r\\n}\\r\\n\\r\\nlibrary DigesuLib {\\r\\n  using Utils for *;\\r\\n\\r\\n  ///@dev Checks if @param who { caller } belongs to pool poolId\\r\\n  function assertIsMember(ICommon.Pool[] storage self, uint poolId, address who, bool value) internal view {\\r\\n    uint pos = _fetchPosition(poolId, who);\\r\\n    bool isMember = self[poolId].mems[pos] == who;\\r\\n    bool(isMember == value).assertUnchained(\\\"7\\\");\\r\\n  }\\r\\n\\r\\n  /**@dev Returns tracker Id\\r\\n      @param poolId - Group index.\\r\\n   */\\r\\n  function _getTracker(ICommon.Pool[] storage self,  uint poolId) internal view returns (uint8 _return) {\\r\\n    _return = uint8(self[poolId].mems.length);\\r\\n  }\\r\\n\\r\\n  ///@dev Returns all uint256s related data in pool at poolId.\\r\\n  function _fetchPoolData(ICommon.Pool[] storage self, uint poolId) internal view returns (ICommon.Pool memory _return) {\\r\\n    _return = self[poolId];\\r\\n  }\\r\\n\\r\\n  function _msgSender() internal view returns(address _sender) {\\r\\n    _sender = msg.sender;\\r\\n  }\\r\\n\\r\\n  ///@dev Returns total pool\\r\\n  function getPools(Data storage self) public view returns (ICommon.Pool[] memory) {\\r\\n    return self.pools;\\r\\n  }\\r\\n\\r\\n  function comparePoolSize(ICommon.Pool[] storage self, uint poolId) internal view {\\r\\n    bool(poolId < self.length).assertUnchained(\\\"9\\\");\\r\\n  }\\r\\n\\r\\n  ///@dev Generates new Id for new pool\\r\\n  function _generateGroupIndex(ICommon.Pool[] storage self) internal view returns (uint _return) {\\r\\n    _return = uint(self.length);\\r\\n  }\\r\\n\\r\\n  //@dev Adds new member\\r\\n  function _addNewMember(ICommon.Pool[] storage self, uint poolId, address who) private returns( uint position) {\\r\\n    // tracker = _getTracker(poolId);\\r\\n    position = self[poolId].mems.length;\\r\\n    self[poolId].mems.push(who);\\r\\n    // if(who == _account(_msgSender())) pools[poolId].uints.tracker ++;\\r\\n  }\\r\\n\\r\\n  function _createPool(\\r\\n    Data storage self, \\r\\n    ICommon.P1 memory p1, \\r\\n    ICommon.Mode mode, \\r\\n    uint poolId,\\r\\n    function (uint, ICommon.FuncTag) internal _unlock\\r\\n    ) private {\\r\\n      bool(p1.duration > 0).assertChained3(p1.members.length > 0, p1.duration < type(uint8).max, \\\"4\\\");\\r\\n      self.pools.push();\\r\\n      self.pools[poolId].uints = ICommon.Uints(mode, p1.quorum, 0, p1.ccr, p1.duration * 1 days);\\r\\n      self.pools[poolId].uint256s =  ICommon.Uint256s(p1.value, 0, p1.value);\\r\\n      self.pools[poolId].addrs = ICommon.Addresses(p1.asset, address(0));\\r\\n      _unlock(poolId, ICommon.FuncTag.ADD);\\r\\n      // _unlock(poolId, FuncTag.ADD);\\r\\n  }\\r\\n\\r\\n  /**@dev Launches a new public band\\r\\n      @param p1 : Encapsulates parameters required by this function.\\r\\n    Note: We explicitly added the band creator to 2nd position.\\r\\n   */\\r\\n  function createPublicPool( \\r\\n    Data storage self, \\r\\n    ICommon.P1 memory p1,\\r\\n    function (address) internal view returns(address) _account,\\r\\n    // function (bool, address) internal view _check,\\r\\n    function (uint, ICommon.FuncTag) internal _unlock\\r\\n    // function (address, address, uint) internal _screenBalance\\r\\n  )\\r\\n    internal\\r\\n    returns (uint poolId)\\r\\n  {\\r\\n    address alc = _account(p1.members[0]);\\r\\n    self.amountExist[p1.value].assertNotUnchained(\\\"1\\\");\\r\\n    _screenBalance(p1.asset, alc, p1.value);\\r\\n    poolId = _generateGroupIndex(self.pools);\\r\\n    bool(p1.duration > 0).assertChained2(p1.duration < type(uint16).max, \\\"4\\\");\\r\\n    _createPool(self, p1, ICommon.Mode(0), poolId, _unlock);\\r\\n    _initializeAccount(self.pools, alc, p1.asset, address(0), true, poolId, true, true, p1.value);\\r\\n    \\r\\n  }\\r\\n\\r\\n  /**@dev Launches a new private band\\r\\n      @param p1 : Encapsulates parameters required by this function.\\r\\n      Note: Caller must correspond to address at position 2 in the address array.\\r\\n   */\\r\\n  function createPrivatePool(\\r\\n    Data storage self, \\r\\n    ICommon.P1 memory p1,\\r\\n    function (address) internal view returns(address) _account,\\r\\n    function (bool, address) internal view _check,\\r\\n    function (uint, ICommon.FuncTag) internal _unlock\\r\\n  ) \\r\\n    internal\\r\\n    returns (uint poolId) \\r\\n  {\\r\\n    _screenBalance(p1.asset, _account(_msgSender()), p1.value);\\r\\n    poolId = _generateGroupIndex(self.pools);\\r\\n    _createPool(self, p1, ICommon.Mode(1), poolId, _unlock);\\r\\n\\r\\n    for (uint i = 0; i < p1.members.length; i++) {\\r\\n      bool isAdmin = true;\\r\\n      bool reduce = false;\\r\\n      uint value = p1.value;\\r\\n      address alc = _account(p1.members[i]);\\r\\n      bool(alc != address(0)).assertUnchained(\\\"17\\\");\\r\\n      if(i > 0) {\\r\\n        isAdmin = false;\\r\\n        _check(false, alc);\\r\\n        value = 0;\\r\\n        bool(alc != _account(_msgSender())).assertUnchained(\\\"17\\\");\\r\\n      }\\r\\n      _initializeAccount(self.pools, alc, p1.asset, address(0), true, poolId, isAdmin, reduce, value);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _initializeAccount(\\r\\n    ICommon.Pool[] storage self,\\r\\n    address alc, \\r\\n    address token,\\r\\n    address transferTo,\\r\\n    bool lock, \\r\\n    uint poolId, \\r\\n    bool isAdmin,\\r\\n    bool reduce,\\r\\n    uint value\\r\\n  ) private {\\r\\n    poolId.safeInitializeInfo(\\r\\n      ICommon.Info(_addNewMember(self, poolId, alc), 0, 0, 0, 0, 0, isAdmin, true, false), \\r\\n      lock,\\r\\n      reduce,\\r\\n      IAccount(alc),\\r\\n      value,\\r\\n      token,\\r\\n      transferTo\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _screenBalance(address token, address alc, uint value) private view {\\r\\n    (, uint _engaged, uint _mostRecent) = IAccount(alc).getSpendableBalance(token);\\r\\n    require(_mostRecent > _engaged &&  (_mostRecent - _engaged) >= value , \\\"3\\\");\\r\\n  }\\r\\n\\r\\n  /**@dev\\r\\n    Internal: Instantiates a new band.\\r\\n   */\\r\\n  function joinABand(\\r\\n    ICommon.Pool[] storage self, \\r\\n    uint poolId,\\r\\n    function (address) internal view returns(address) _account\\r\\n  )\\r\\n    internal\\r\\n    returns (ICommon.Pool memory _pool, address alc) \\r\\n  {\\r\\n    ICommon.Pool memory pool = _fetchPoolData(self, poolId);\\r\\n    alc = _account(_msgSender());\\r\\n    _screenBalance(pool.addrs.asset, alc, pool.uint256s.unit);\\r\\n    bool(pool.mems.length < pool.uints.quorum).assertUnchained(\\\"5\\\");\\r\\n    \\r\\n    if (pool.uints.mode == ICommon.Mode.STRICT) {\\r\\n      bool(pool.mems[_fetchPosition(poolId, alc)] == alc).assertUnchained(\\\"7\\\");\\r\\n    }\\r\\n    _initializeAccount(\\r\\n      self,\\r\\n      alc,\\r\\n      pool.addrs.asset,\\r\\n      pool.mems[0],\\r\\n      false,\\r\\n      poolId,\\r\\n      false,\\r\\n      false, // 'reduce' is really immeterial here\\r\\n      pool.uint256s.unit\\r\\n    );\\r\\n    require(IAccount(pool.mems[0]).updateBalancesInUse(pool.addrs.asset, pool.uint256s.unit, true), \\\"Sub: Failed\\\");\\r\\n\\r\\n    self[poolId].uint256s.currentPool += pool.uint256s.unit;\\r\\n    _pool = _fetchPoolData(self, poolId);\\r\\n  }\\r\\n\\r\\n  function _getMode(ICommon.Pool[] storage self, uint poolId) internal view returns(ICommon.Mode mode) {\\r\\n    mode = _fetchPoolData(self, poolId).uints.mode;\\r\\n  }\\r\\n\\r\\n   ///@dev Returns current timestamp (unix).\\r\\n  function _now() internal view returns (uint) {\\r\\n    return block.timestamp;\\r\\n  }\\r\\n\\r\\n  function _fetchPosition(uint poolId, address alc) internal view returns(uint pos) {\\r\\n    pos = IAccount(alc).getSubscriptionInfo(poolId).position;\\r\\n  } \\r\\n\\r\\n  ///@dev Modifies member's information \\r\\n  function _updateMemberData(\\r\\n    Data storage self, \\r\\n    ICommon.UpdateParam memory upr,\\r\\n    function (address) internal view returns(address) _account\\r\\n  ) \\r\\n    private \\r\\n    returns (address valueTo, uint position) \\r\\n  {\\r\\n    self.pools[upr.poolId].uint256s.currentPool = 0;\\r\\n    // address _actual = _account(_msgSender());\\r\\n    valueTo = upr.expected;\\r\\n    \\r\\n    ICommon.Info memory exp = IAccount(valueTo).getSubscriptionInfo(upr.poolId);\\r\\n    position = exp.position;\\r\\n    if (_account(_msgSender()) != upr.expected) {\\r\\n      if (_now() > exp.turnTime + 1 hours) {\\r\\n        assertIsMember(self.pools, upr.poolId, _account(_msgSender()), true);\\r\\n        valueTo = _account(_msgSender());\\r\\n        exp = _swapPosition(valueTo, upr.pool.addrs.asset, upr.poolId, exp, valueTo);\\r\\n        position = exp.position;\\r\\n      }\\r\\n    }\\r\\n    bool reduce;\\r\\n    uint val = upr.pool.uint256s.currentPool;\\r\\n\\r\\n    if(valueTo == upr.pool.mems[0]) {\\r\\n      reduce = true;\\r\\n    } else {\\r\\n      val = upr.owings + upr.makerFee;\\r\\n      upr.pool.addrs.asset.safeWithdrawRouterOnly(\\r\\n        IAccount(upr.pool.addrs.lastPaid),\\r\\n        valueTo, \\r\\n        self.pcd.feeTo, \\r\\n        upr.pool.uint256s.currentPool, \\r\\n        upr.makerFee\\r\\n      );\\r\\n    }\\r\\n\\r\\n    upr.poolId.safeInitializeInfo(\\r\\n        ICommon.Info(exp.position, _now() + upr.pool.uints.duration, 0, upr.owings, 0, upr.colBals, exp.isAdmin, true, true),\\r\\n        true,\\r\\n        reduce,\\r\\n        IAccount(valueTo),\\r\\n        val,\\r\\n        upr.pool.addrs.asset,\\r\\n        address(0)\\r\\n      );\\r\\n    \\r\\n    self.pools[upr.poolId].uints.selector ++;\\r\\n  }\\r\\n\\r\\n  function _swapPosition(\\r\\n    address actual,\\r\\n    address asset,\\r\\n    uint poolId,\\r\\n    ICommon.Info memory expected,\\r\\n    address valueTo\\r\\n  ) private \\r\\n    returns(ICommon.Info memory _expected) \\r\\n  {\\r\\n    ICommon.Info memory act = IAccount(actual).getSubscriptionInfo(poolId);\\r\\n    uint posActual = act.position;\\r\\n    act.position = expected.position;\\r\\n    expected.position = posActual;\\r\\n    _expected = act;\\r\\n    \\r\\n    require(\\r\\n      IAccount(valueTo).initializeInfo(\\r\\n        expected, \\r\\n        true,\\r\\n        false,\\r\\n        poolId, \\r\\n        0, \\r\\n        asset,\\r\\n        address(0)\\r\\n      ), \\r\\n    \\\"20\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Penalizes an user for late repayment\\r\\n          @notice Defaulter is surcharged.\\r\\n                  Penalty is credited to the account of next member to GH.\\r\\n  */\\r\\n  function _computePenalty(IDigesu.PublicData storage self, uint poolId, address user) internal view returns (uint256) {\\r\\n    if (self.penFee == 0) return 0;\\r\\n\\r\\n    return Utils.mulDivOp(IAccount(user).getSubscriptionInfo(poolId).colBals, self.penFee);\\r\\n  }\\r\\n\\r\\n  /**@dev Can update the penalty rate. Should be restricted to the owner or authorized admin. */\\r\\n  function updatePenFee(IDigesu.PublicData storage self, uint8 newRate) internal {\\r\\n    require(newRate <= type(uint8).max, \\\"Invalid rate\\\");\\r\\n    self.penFee = newRate;\\r\\n  }\\r\\n\\r\\n  /**Utility to get finance\\r\\n    @param self : Storage\\r\\n    @param crp : Parameters.\\r\\n  */\\r\\n  function getFinance(\\r\\n    Data storage self,\\r\\n    ICommon.CreateParam memory crp\\r\\n    // uint poolId,\\r\\n    // function (uint, ICommon.FuncTag) internal _lock,\\r\\n    // function (address) internal view returns(address) _account,\\r\\n    // function () internal returns(uint) _getQFTPriceInETH\\r\\n  ) \\r\\n    internal\\r\\n    returns(address valueTo, uint position)\\r\\n  {\\r\\n    crp._lock(crp.poolId, ICommon.FuncTag.GET);\\r\\n    ICommon.Pool memory pool = _fetchPoolData(self.pools, crp.poolId);\\r\\n    if(pool.allGh == pool.uints.quorum) revert ICommon.AllMemberIsPaid();\\r\\n    bool(pool.uint256s.currentPool >= ( pool.uint256s.unit * pool.uints.quorum)).assertUnchained(\\\"4\\\");\\r\\n    (uint mFee, uint owings) = ICommon.CMF(pool.uint256s.currentPool, self.pcd.makerFee).computeMakerFee();\\r\\n    (valueTo, position) = _updateMemberData(\\r\\n        self, \\r\\n        ICommon.UpdateParam(\\r\\n        pool.mems[pool.uints.selector], \\r\\n        crp.poolId,\\r\\n        owings,\\r\\n        mFee,\\r\\n        ICommon.CC(\\r\\n            self.pcd.token, \\r\\n            crp._account(_msgSender()), \\r\\n            pool.uints.ccr, \\r\\n            crp._getQFTPriceInETH(), \\r\\n            pool.uint256s.currentPool\\r\\n          ).computeCollateral(),\\r\\n        pool\\r\\n      ),\\r\\n      crp._account\\r\\n    );\\r\\n    self.pools[crp.poolId].allGh ++;\\r\\n  }\\r\\n\\r\\n  ///@dev Returns info if current beneficiary has defaulted otherwise an empty struct is returned.\\r\\n  function enquireLiquidation(ICommon.Pool[] storage self, uint poolId) internal view returns (ICommon.Liquidation memory) {\\r\\n    ICommon.Pool memory _p = _fetchPoolData(self, poolId);\\r\\n    ICommon.Info memory info = IAccount(_p.addrs.lastPaid).getSubscriptionInfo(poolId);\\r\\n    return _now() > info.payDate ? ICommon.Liquidation(\\r\\n      info.position, \\r\\n      _p.addrs.lastPaid,\\r\\n      info.payDate,\\r\\n      info.owings, \\r\\n      info.colBals\\r\\n    ) : ICommon.Liquidation(0, address(0), 0, 0, 0);\\r\\n  }\\r\\n\\r\\n\\r\\n  /**\\r\\n    @dev Liquidates defaulter.\\r\\n          - If the current beneficiary defaults, they're liquidated.\\r\\n          - Their collateral balances is forwarded to the liquidator.\\r\\n\\r\\n  */\\r\\n  function liquidate(\\r\\n    Data storage self, \\r\\n    uint poolId, \\r\\n    address who,\\r\\n    function (address) internal view returns(address) _account\\r\\n  ) \\r\\n    internal \\r\\n    returns (address _liq, uint amount)\\r\\n  {\\r\\n    ICommon.Liquidation memory liq = enquireLiquidation(self.pools, poolId);\\r\\n    address alc_who = _account(who);\\r\\n    _liq = liq.who;\\r\\n\\r\\n    ICommon.Info memory info_liq = IAccount(_liq).getSubscriptionInfo(poolId);\\r\\n    if(_liq == address(0)) revert(\\\"11\\\");\\r\\n    address token = _fetchPoolData(self.pools, poolId).addrs.asset;\\r\\n    _screenBalance(token, alc_who, liq.debt);\\r\\n    amount = poolId;\\r\\n    info_liq.owings = 0;\\r\\n    require(IAccount(_liq).clearSubscription(poolId), \\\"20\\\");\\r\\n    amount.safeInitializeInfo(\\r\\n        info_liq,\\r\\n        true, // Locks the value in user's wallet until we need to move to the next person\\r\\n        true, \\r\\n        IAccount(alc_who),\\r\\n        liq.debt,\\r\\n        token,\\r\\n        address(0)\\r\\n    );\\r\\n\\r\\n    self.pools[poolId].addrs.lastPaid = alc_who;\\r\\n    amount = info_liq.owings;\\r\\n    self.pcd.token.moveCollateral(alc_who, _liq, info_liq.colBals);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Cancels recent unfil band.\\r\\n      Only admin of a band can cancel only if no one has join the band.\\r\\n  */\\r\\n  function cancelBand(\\r\\n    Data storage self,\\r\\n    uint poolId,\\r\\n    function (address) internal view returns(address) _account\\r\\n  ) \\r\\n    internal\\r\\n    returns (uint value, address alc)\\r\\n  {\\r\\n    ICommon.Pool memory _p = _fetchPoolData(self.pools, poolId);\\r\\n    alc = _account(_msgSender());\\r\\n    // uint8 quorum = uint8(pools[poolId].uints.quorum);\\r\\n    if(_p.uints.mode == ICommon.Mode.NONSTRICT) {\\r\\n      bool(_p.mems.length == 1).assertUnchained(\\\"15\\\");\\r\\n      delete self.amountExist[_p.uint256s.unit];\\r\\n    }\\r\\n    if(_p.uints.mode == ICommon.Mode.STRICT) bool(_p.uint256s.currentPool == _p.uint256s.unit).assertUnchained(\\\"15\\\");\\r\\n    _p.addrs.asset.safeUpdateBalancesInUse(\\r\\n      IAccount(alc),\\r\\n      _p.uint256s.unit, \\r\\n      true\\r\\n    );\\r\\n    value = _p.uint256s.unit;\\r\\n\\r\\n  }\\r\\n\\r\\n  /**@dev Payback borrowed fund.\\r\\n      Note: We are only concerned about who is to pay back and not \\r\\n              who is paying back. Ordianrily, any of the members can pay \\r\\n              on behalf of another.\\r\\n  */\\r\\n  function payback(\\r\\n    Data storage self,\\r\\n    uint poolId,\\r\\n    function (address) internal view returns(address) _account,\\r\\n    function (uint, ICommon.FuncTag) internal _lock,\\r\\n    function (uint, ICommon.FuncTag) internal _unlock\\r\\n  ) \\r\\n    internal\\r\\n    returns(ICommon.GCB memory _return, address alc) \\r\\n  {\\r\\n    ICommon.Pool memory _p = _fetchPoolData(self.pools, poolId);\\r\\n    ICommon.Info memory _info = IAccount(_account(_msgSender())).getSubscriptionInfo(poolId);\\r\\n    (, uint _engaged, uint _mostRecent) = IAccount(_account(_msgSender())).getSpendableBalance(_p.addrs.asset);\\r\\n    bool(_info.owings > 0).assertChained2((_mostRecent - _engaged) >= _info.owings, \\\"5\\\"); // <=====\\r\\n\\r\\n    _return = ICommon.GCB(\\r\\n      _p.addrs.asset, \\r\\n      _account(_msgSender()), \\r\\n      address(0), \\r\\n      _info.colBals,\\r\\n      0,\\r\\n      ICommon.CR(0, 0),\\r\\n      ICommon.CR2(_info.payDate, _p.uint256s.unit)\\r\\n    );\\r\\n\\r\\n    _info.turnTime = 0;\\r\\n    _info.owings = 0;\\r\\n    _info.payDate = 0;\\r\\n    if(_p.allGh == _p.uints.quorum) {\\r\\n      _lock(poolId, ICommon.FuncTag.PAYBACK);\\r\\n      _unlock(poolId, ICommon.FuncTag.COMPLETE);\\r\\n    }\\r\\n    uint _poolId = poolId;\\r\\n    alc = _account(_msgSender());\\r\\n    _poolId.safeInitializeInfo(\\r\\n      _info,\\r\\n      true, // Locks the value in user's wallet until we need to move to the next person\\r\\n      true, \\r\\n      IAccount(_account(_msgSender())),\\r\\n      _info.owings,\\r\\n      _p.addrs.asset,\\r\\n      address(0)\\r\\n    );\\r\\n\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    Completes the current round.\\r\\n    - Only member of the band can call.\\r\\n  */\\r\\n  function roundUp(\\r\\n    Data storage self,\\r\\n    uint poolId\\r\\n    // address who\\r\\n  ) \\r\\n    internal\\r\\n    returns(ICommon.Pool memory pool)\\r\\n  {\\r\\n    pool = _fetchPoolData(self.pools, poolId);\\r\\n    bool(pool.allGh == pool.uints.quorum).assertUnchained(\\\"16\\\");\\r\\n    address lastPaid = pool.addrs.lastPaid;\\r\\n    if(pool.uints.mode == ICommon.Mode.NONSTRICT) delete self.amountExist[pool.uint256s.unit];\\r\\n    uint _poolId = poolId;\\r\\n    _poolId.safeSplit(\\r\\n        IAccount(lastPaid),\\r\\n        pool.addrs.asset,\\r\\n        pool.mems,\\r\\n        self.pcd.feeTo,\\r\\n        pool.uint256s.unit, \\r\\n        IAccount(lastPaid).getSubscriptionInfo(_poolId).owings\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function updatePublicData(\\r\\n    Data storage self,\\r\\n    address feeTo,\\r\\n    address token,\\r\\n    uint8 penFee,\\r\\n    uint8 makerFee\\r\\n  ) internal {\\r\\n    if(feeTo == address(0)) revert ICommon.ZeroAddress(feeTo);\\r\\n    if(token == address(0)) revert ICommon.ZeroAddress(token);\\r\\n    bool(penFee < type(uint8).max).assertChained2(makerFee < type(uint8).max, \\\"19\\\");\\r\\n    self.pcd = IDigesu.PublicData(feeTo, token, penFee, makerFee);\\r\\n  }\\r\\n\\r\\n  // function setSupportedTokens(\\r\\n  //   address newToken,\\r\\n  //   function (address) internal _setSupportedToken \\r\\n  // ) public override onlyOwner {\\r\\n  //   _setSupportedTokens(newToken);\\r\\n  // }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0xb4bcc441873e923d9aeab43212c0c77e53b663a4fff21a17d8830cd3d4e60484\",\"license\":\"MIT\"},\"contracts/digesu/account/Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n// import \\\"../libs/Context.sol\\\";\\r\\n// import \\\"../interfaces/IERC20.sol\\\";\\r\\nimport \\\"../interfaces/IAccount.sol\\\";\\r\\nimport \\\"../interfaces/IDigesu.sol\\\";\\r\\nimport \\\"../libs/Utils.sol\\\";\\r\\nimport \\\"../libs/Ownable.sol\\\";\\r\\nimport \\\"../libs/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../libs/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n  @title Account: \\r\\n    Interactive account is a separate entity distinct fron the owner. \\r\\n    They are able to interact with most Digesu's products. Routers interact directly with\\r\\n    accounts, not the owner. They own power to approve or disapprove transactions.\\r\\n    Routers read and push information to accounts only on trigger by the owner.\\r\\n      - An exceptional case is where funds need to be moved to the next person.\\r\\n      - In such case, the owner must have pay back and approve Router to spend \\r\\n         from their account. Usually, Router locks the amount in user's account\\r\\n         until the need for it arise.\\r\\n    Note: Routers don't take actions unless triggered by the owner.\\r\\n\\r\\n  Error Code:\\r\\n    1. Token not supported.\\r\\n    2. Trying to deposit zero value.\\r\\n    3. UnAuthorizedCaller.\\r\\n*/\\r\\ncontract Account is IAccount, Context, Ownable, ReentrancyGuard {\\r\\n  using Utils for *;\\r\\n\\r\\n  // Address of Router\\r\\n  address payable private router;\\r\\n\\r\\n  //Manager contract\\r\\n  address public manager;\\r\\n\\r\\n  // Address of the Mother branchup\\r\\n  address private branchUp;\\r\\n\\r\\n  //Total amount engaged at any time\\r\\n  uint private engaged;\\r\\n\\r\\n  // Control contract execution\\r\\n  bool private _pause;\\r\\n\\r\\n  // Supported assets\\r\\n  address[] private supportedAssets;\\r\\n\\r\\n  // Mapping of added supported assets\\r\\n  mapping (address=>bool) public added;\\r\\n\\r\\n  // All Subscriptions\\r\\n  mapping (uint=>Info) public subscriptionInfo;\\r\\n\\r\\n  /**@dev Stores balances related to erc20 addresses at anytime\\r\\n   * both withdrawable and engaged balances.\\r\\n  */\\r\\n  mapping (address=>mapping(Balances=>uint)) public balances;\\r\\n\\r\\n  /**@dev Initializes state variables.\\r\\n   *  o We set factory as the router with exclusive access to certain \\r\\n   *      sensitive functions.\\r\\n   *  o @param newOwner : i.e the calling EOA is set as the sole owner.\\r\\n   */\\r\\n  constructor (address newOwner, address router_) payable {\\r\\n    router = payable(router_);\\r\\n    _pause = false;\\r\\n    manager = payable(_msgSender());\\r\\n    transferOwnership(newOwner);\\r\\n  }\\r\\n\\r\\n  /**@dev\\r\\n   * Owner cannot withdraw if account is engaged.\\r\\n   * This type restriction is enforced to avoid replay && DOS attack \\r\\n   * by the owner in certain conditions.\\r\\n   * Both currencies are by default gated.\\r\\n  */\\r\\n  modifier syncBalances(address token, uint _amtToWithdraw, uint optionalArg) {\\r\\n    if(token == address(0)) revert ZeroAddress(token);\\r\\n    _syncBalances(token, optionalArg);\\r\\n    uint withdrawable = balances[token][Balances.WITHDAWABLE];\\r\\n    if(_amtToWithdraw > withdrawable) revert InsufficientFund(\\r\\n      withdrawable, _amtToWithdraw\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier whenNotPaused() {\\r\\n    if(_pause) revert ExecutionStopped();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**@dev\\r\\n   *  Only supported assets are allowed i.e NATIVE or ERC20\\r\\n   * @param erc20Address Incoming token address\\r\\n   * Note Address must not be the zero address.\\r\\n  */\\r\\n  modifier isSupportedToken(address erc20Address) {\\r\\n    if(erc20Address == address(0)) revert ZeroAddress(erc20Address);\\r\\n    if(!IDigesu(_router()).supportedToken(erc20Address)) revert UnsupportedAsset(erc20Address);\\r\\n    if(!added[erc20Address]) {\\r\\n      added[erc20Address] = true;\\r\\n      supportedAssets.push(erc20Address);\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyRouter() {\\r\\n    require(_msgSender() == _router(), \\\"Account.sol: OnlyRouter\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // Fallback\\r\\n  receive() external payable { \\r\\n    revert IDoNotAcceptEtherIFYouForceItLost();\\r\\n  }\\r\\n\\r\\n  // /**@dev Returns subscrition detail for the pool at 'poolId'\\r\\n  //  * Note: Read information from this Account based on 'poolId'.\\r\\n  //  * @param poolId - Exact pool index.\\r\\n  //  */\\r\\n  // function getSubscription(uint poolId) external view returns (Info memory _sub) { _sub = subscriptionInfo[poolId]; }\\r\\n\\r\\n  // /**@dev\\r\\n  //  * \\r\\n  //  */\\r\\n  // function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\r\\n  \\r\\n  /**@dev Utility to upgrage to a new account.\\r\\n   * Note : New account must be approved from the accout manager\\r\\n   *        before they can be upgraded.\\r\\n   */\\r\\n  function rekey(address newAccount) external returns(bool) {\\r\\n    require(_msgSender() == manager, \\\"NA\\\");\\r\\n    address[] memory _assets = supportedAssets;\\r\\n    for (uint i = 0; i < _assets.length; i++) {\\r\\n      address asset = supportedAssets[i];\\r\\n      uint bal = IERC20(asset).balanceOf(address(this));\\r\\n      if(bal > 0) {\\r\\n        require(IERC20(asset).transfer(newAccount, bal), \\\"Error\\\");\\r\\n      }\\r\\n    }\\r\\n    Address.functionCallWithValue(\\r\\n      newAccount,\\r\\n      abi.encodeWithSelector(\\r\\n        bytes4(keccak256(bytes(\\\"accept(address[] memory)\\\"))), \\r\\n        _assets\\r\\n      ),\\r\\n      address(this).balance\\r\\n    );\\r\\n    transferOwnership(manager);\\r\\n    haltExecution();\\r\\n\\r\\n    return true;\\r\\n    // SafeCallAccount.safeTransferData(newAccount, _assets);\\r\\n  }\\r\\n\\r\\n  function haltExecution() private  {\\r\\n    _pause = true;\\r\\n  }\\r\\n\\r\\n  // Returns router - Gas saving.\\r\\n  function _router() internal view returns(address _fetched) { _fetched = router; }\\r\\n\\r\\n  /**\\r\\n   * @notice Alternate function to deposit netork asset. \\r\\n   * Note Public function, no restriction.\\r\\n  */\\r\\n  // function depositNative() external payable { require(msg.value > 0, \\\"2\\\"); }\\r\\n\\r\\n  /**@dev Synchronizes balances. We update both balances each time this \\r\\n      function is called.\\r\\n      @param token : Address of the ERC20 supported asset.\\r\\n      @param optionalArg : is any value that should be deducted along with the actual\\r\\n                            value sent in call such as makerFee or Router commission.\\r\\n   */\\r\\n  function _syncBalances(address token, uint optionalArg) private {\\r\\n    uint _balInUse = balances[token][Balances(1)];\\r\\n    balances[token][Balances.WITHDAWABLE] = token == address(this)? address(this).balance : IERC20(token).balanceOf(address(this));\\r\\n    balances[token][Balances.WITHDAWABLE] -= ( _balInUse + optionalArg );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Utility to deposit ERC20 token \\r\\n   * Note Public function, no restriction. Only that token must be supported.\\r\\n   * @param erc20Address Address of the depositing token.\\r\\n   * @param amount Deposit amount.\\r\\n   * @return null\\r\\n  */\\r\\n  function depositERC20Token(address erc20Address, uint256 amount) \\r\\n    external\\r\\n    whenNotPaused\\r\\n    isSupportedToken(erc20Address) \\r\\n    returns(bool) \\r\\n  {\\r\\n    IERC20(erc20Address).transferFrom(_msgSender(), address(this), amount).assertUnchained('Transfer Failed');\\r\\n    _syncBalances(erc20Address, 0);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // /**\\r\\n  //  * @notice Utility to withdraw network asset.\\r\\n  //  * Note Restricted\\r\\n  // */\\r\\n  // function withdrawNativeOnlyRouter(\\r\\n  //   uint amount, \\r\\n  //   uint fee, \\r\\n  //   address to, \\r\\n  //   address feeTo\\r\\n  //   ) external onlyRouter nonReentrant syncBalances(address(this), amount, fee){\\r\\n  //   (bool j,) = feeTo.call{value: fee}(\\\"\\\");\\r\\n  //   (bool i,) = to.call{value: amount}(\\\"\\\");\\r\\n\\r\\n  //   require(i && j, \\\"Transfered failed\\\");\\r\\n  // }\\r\\n\\r\\n  // function withdrawNativeOnlyOwner(uint amount) \\r\\n  //   public\\r\\n  //   onlyOwner\\r\\n  //   syncBalances(address(this), amount, 0)\\r\\n  // {\\r\\n  //   payable(owner()).transfer(amount);\\r\\n  // }\\r\\n\\r\\n  /**\\r\\n   * @notice Get the balance ERC20 token \\r\\n   * Note Public function, no restriction. Only that token must be supported.\\r\\n   * @param erc20Address Address of the depositing token.\\r\\n   * @return _balances \\r\\n  */\\r\\n  function erc20Balances(address erc20Address) external view returns(uint256 _balances) {\\r\\n    require(added[erc20Address], \\\"NotSupported\\\");\\r\\n    return _balances = IERC20(erc20Address).balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Get the balance ERC20 token \\r\\n   * Note Public function, no restriction. Only that token must be supported.\\r\\n  */\\r\\n  function withdrawERC20TokenOnlyOwner(\\r\\n    address erc20Address, \\r\\n    uint amount\\r\\n  ) \\r\\n    public\\r\\n    onlyOwner\\r\\n    whenNotPaused\\r\\n    isSupportedToken(erc20Address) \\r\\n  {\\r\\n    _withdraw(erc20Address, owner(), amount, 0);\\r\\n  }\\r\\n\\r\\n  function _withdraw(\\r\\n    address asset, \\r\\n    address to, \\r\\n    uint amount,\\r\\n    uint optArg\\r\\n  ) private nonReentrant syncBalances(asset, amount, optArg) {\\r\\n    IERC20(asset).transfer(to, amount);\\r\\n    _updateBalancesInUse(asset, amount, true);\\r\\n  }\\r\\n\\r\\n  function withdrawRouterOnly(\\r\\n    address token, \\r\\n    address to,\\r\\n    address feeTo,\\r\\n    uint amount, \\r\\n    uint fee) external whenNotPaused onlyRouter  returns(bool) {\\r\\n      _withdraw(token, to, amount, fee);\\r\\n      _withdraw(token, feeTo, fee, 0);\\r\\n\\r\\n      return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns subscription information for owner relating to poolId\\r\\n   * Note For every pool the owner has subscribed to, they can fetch data relating to each band.\\r\\n   * @param poolId index of band.\\r\\n   * @return Info\\r\\n  */\\r\\n  function getSubscriptionInfo(uint poolId) external view returns(Info memory) {\\r\\n    return subscriptionInfo[poolId];\\r\\n  }\\r\\n\\r\\n  function setStatus(\\r\\n    uint poolId,\\r\\n    bool isAdmin, \\r\\n    bool isMember\\r\\n  ) external whenNotPaused onlyRouter returns(bool) {\\r\\n   _setStatus(poolId, isAdmin, isMember);\\r\\n   \\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _setStatus(\\r\\n    uint poolId,\\r\\n    bool isAdmin, \\r\\n    bool isMember\\r\\n  ) private {\\r\\n    subscriptionInfo[poolId].isAdmin = isAdmin;\\r\\n    subscriptionInfo[poolId].isMember = isMember;\\r\\n  }\\r\\n\\r\\n\\r\\n  /**@dev Router updates balance in use. \\r\\n   * Note Callable only by the Mother branchup.\\r\\n  */\\r\\n  function updateBalancesInUse(address asset, uint value, bool reduce) \\r\\n    external \\r\\n    whenNotPaused \\r\\n    onlyRouter returns(bool) \\r\\n  {\\r\\n    _updateBalancesInUse(asset, value, reduce);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _updateBalancesInUse(address asset, uint value, bool reduce) private {\\r\\n    reduce? balances[asset][Balances.INUSE] -= value : balances[asset][Balances.INUSE] += value;\\r\\n  }\\r\\n\\r\\n  function getSpendableBalance(address token) external view returns(uint _withdrawable, uint _engaged, uint _mostRecent) {\\r\\n    _withdrawable = balances[token][Balances.WITHDAWABLE];\\r\\n    _engaged = balances[token][Balances.INUSE];\\r\\n    _mostRecent = token == address(0) ? IERC20(token).balanceOf(address(this)) : address(this).balance;\\r\\n  }\\r\\n\\r\\n  function approve(address erc20Address, uint amount)\\r\\n    public\\r\\n    whenNotPaused\\r\\n    onlyOwner \\r\\n    isSupportedToken(erc20Address) {\\r\\n      IERC20(erc20Address).approve(_router(), amount);\\r\\n  }\\r\\n\\r\\n  function updateTurnTime(uint poolId) external whenNotPaused returns(bool) {\\r\\n    subscriptionInfo[poolId].turnTime = block.timestamp + 1 hours;\\r\\n    return true;\\r\\n  }\\r\\n  \\r\\n  function initializeInfo(\\r\\n    Info memory info, \\r\\n    bool lock,\\r\\n    bool reduceBalance,\\r\\n    uint poolId,\\r\\n    uint value,\\r\\n    address asset,\\r\\n    address to\\r\\n  ) external whenNotPaused returns(bool) {\\r\\n    subscriptionInfo[poolId] = info;\\r\\n    if(lock) {\\r\\n      _updateBalancesInUse(asset, value, reduceBalance);\\r\\n    } else {\\r\\n      _withdraw(asset, to, value, 0);\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function clearSubscription(uint poolId) \\r\\n    external \\r\\n    whenNotPaused \\r\\n    onlyRouter returns(bool) {\\r\\n      delete subscriptionInfo[poolId];\\r\\n      return true;\\r\\n  }\\r\\n\\r\\n  function split(\\r\\n    uint poolId,\\r\\n    address asset,\\r\\n    address[] memory members,\\r\\n    address closeTo,\\r\\n    uint unitAmount, \\r\\n    uint _balance) external whenNotPaused onlyRouter returns(bool) \\r\\n    {\\r\\n      _setStatus(poolId, false, false);\\r\\n      uint _bal = _balance;\\r\\n      for(uint i = 0; i < members.length; i++) {\\r\\n        _bal -= unitAmount;\\r\\n        _withdraw(\\r\\n          asset, \\r\\n          members[i], \\r\\n          unitAmount,\\r\\n          0\\r\\n        );\\r\\n      }\\r\\n      if(_bal > 0) _withdraw(  asset,   closeTo,   unitAmount,  0);\\r\\n\\r\\n      return true;\\r\\n  }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x8fd77c8792ad9a6551f9414ae3e021ce9ac9f706839b5610720b15db91557104\",\"license\":\"MIT\"},\"contracts/digesu/account/AccountManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/ICommon.sol\\\";\\r\\nimport \\\"./Account.sol\\\";\\r\\nimport \\\"../interfaces/IAccount.sol\\\";\\r\\nimport \\\"../interfaces/IAccountManager.sol\\\";\\r\\n\\r\\n/**@title AccountManager: standalone contract that manages account creation, \\r\\n   deletion, including read and write data.\\r\\n\\r\\n   Author: Bobeu\\r\\n   Github: https://github.com/bobeu\\r\\n */\\r\\ncontract AccountManager is IAccountManager, ICommon, Ownable {\\r\\n  uint public accountsCounter;\\r\\n\\r\\n  // Acount creation fee\\r\\n  uint private accountCreationFee;\\r\\n\\r\\n  //Address to receive fee\\r\\n  address private feeTo;\\r\\n\\r\\n  // Digesu factory contract address\\r\\n  address public factory;\\r\\n\\r\\n  //Approvals to upgrade to a new account\\r\\n  mapping(address=>bool) public approvals;\\r\\n\\r\\n  ///@dev Users mapped to records\\r\\n  mapping (address=>Accounts) private accounts;\\r\\n\\r\\n  // constructor () {}\\r\\n\\r\\n  modifier scrutinizeAccount(address who, bool value, string memory errorMessage) {\\r\\n    require(hasAccount(who) ==  value, errorMessage);\\r\\n    _;\\r\\n  }\\r\\n  \\r\\n  /**@dev Return true if \\\"who's\\\" account status is not empty\\r\\n       otherwise false.\\r\\n   */\\r\\n  function hasAccount(address who) public view override returns (bool) {\\r\\n    return accounts[who].active != address(0);\\r\\n  }\\r\\n\\r\\n  // Set account creation fee : Should be called only by the multisig account\\r\\n  function setAccountCreationFee(uint newFee) public onlyOwner {\\r\\n    accountCreationFee = newFee;\\r\\n  }\\r\\n  \\r\\n  // Returns account for 'who'\\r\\n  function getAccount(address who) external view returns (address) { \\r\\n    return accounts[who].active; \\r\\n  }\\r\\n  \\r\\n  /**@dev Launches new INTERACTIVE account for 'who'.\\r\\n   * If fee is applied, msg.value must meet minimum creationFee otherwise, creation fail.\\r\\n   * Owner can prefund account at construction if they wish do so. They only have to increase the msgValue\\r\\n   * above minimum accountCreationFee.\\r\\n  */\\r\\n  function createAccount(uint initialAccountBalance, address who)\\r\\n    external \\r\\n    payable\\r\\n    scrutinizeAccount(who, false, \\\"User exist\\\")\\r\\n    returns(address newAlc) \\r\\n  {\\r\\n    require(msg.value >= accountCreationFee && feeTo != address(0), \\\"3\\\");\\r\\n    accountsCounter ++;\\r\\n    newAlc = address(new Account{value: initialAccountBalance}(who, _getFactory()));\\r\\n    accounts[_msgSender()].active = newAlc;\\r\\n\\r\\n    emit AccountLaunched(newAlc, _msgSender());\\r\\n  }\\r\\n\\r\\n  // Reset address to receive fee : only by owner account.\\r\\n  function changeFeeTo(address newFeeTo) public onlyOwner {\\r\\n    if(newFeeTo == address(0)) revert ZeroAddress(newFeeTo);\\r\\n    feeTo = newFeeTo;\\r\\n  }\\r\\n\\r\\n  //Reset factory address : onlyOwner\\r\\n  function setFactory(address newFactory) public onlyOwner {\\r\\n    if(newFactory == address(0)) revert ZeroAddress(newFactory);\\r\\n    factory = newFactory;\\r\\n  }\\r\\n\\r\\n  /**@dev Upgrade to a new account.\\r\\n   * @param newAccount : New account to upgrade to.\\r\\n   * Note : newAccount must be approved prior to this call\\r\\n   */\\r\\n  function rekeyAccount(address newAccount) \\r\\n    external\\r\\n    scrutinizeAccount(_msgSender(), true, \\\"User not exist\\\")\\r\\n    returns(bool) \\r\\n  {\\r\\n    if(!approvals[newAccount]) revert AccountNotApproved();\\r\\n    address oldAlc = accounts[_msgSender()].active;\\r\\n    require(factory != address(0) && _msgSender() == factory, \\\"Denied\\\");\\r\\n    if(!IAccount(oldAlc).rekey(newAccount)) revert SomethingWentWrong();\\r\\n\\r\\n    emit Rekeyed(oldAlc, newAccount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**@dev Approves new account for upgrade\\r\\n   * Note : Same utility can also disapprove\\r\\n  */\\r\\n  function setApproval(address newAccount, bool _approval) public onlyOwner {\\r\\n    if(approvals[newAccount] == _approval) revert StatusAlreadyUpdated();\\r\\n    approvals[newAccount] = _approval;\\r\\n  }\\r\\n\\r\\n  ///@dev Deactivate account for 'target'\\r\\n  function deactivateAccount(address target) \\r\\n    public\\r\\n    onlyOwner\\r\\n    scrutinizeAccount(target, true, \\\"User is deactivated\\\")\\r\\n  {\\r\\n    Accounts memory alcs = accounts[target];\\r\\n    accounts[target] = Accounts(alcs.deactivated, alcs.active);\\r\\n  }\\r\\n\\r\\n  ///@dev Aactivate account for 'target'\\r\\n  function activateAccount(address target) \\r\\n    public\\r\\n    onlyOwner\\r\\n    scrutinizeAccount(target, false, \\\"User is deactivated\\\")\\r\\n  {\\r\\n    Accounts memory alcs = accounts[target];\\r\\n    if(alcs.deactivated == address(0)) revert TargetHasNoAccount();\\r\\n    accounts[target] = Accounts(alcs.deactivated, alcs.active);\\r\\n  }\\r\\n\\r\\n  function _getFactory() internal returns(address _fact) {\\r\\n    factory = _fact;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xc4ebb78fd509cf3be185b370b3a3153b59684aefb90f589c0d73808d0ed455b2\",\"license\":\"MIT\"},\"contracts/digesu/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./ICommon.sol\\\";\\r\\n\\r\\ninterface IAccount is ICommon {\\r\\n  function rekey(address) external returns(bool);\\r\\n  function depositERC20Token(address, uint) external returns(bool);\\r\\n  function withdrawRouterOnly(address, address, address, uint, uint) external returns(bool);\\r\\n  function getSubscriptionInfo(uint) external view returns(Info memory);  \\r\\n  function updateBalancesInUse(address, uint, bool) external returns(bool);\\r\\n  function getSpendableBalance(address) external view returns(uint, uint, uint);\\r\\n  function initializeInfo(Info memory, bool,bool,uint,uint,address,address) external returns(bool);\\r\\n  function updateTurnTime(uint) external returns(bool);\\r\\n  function clearSubscription(uint) external returns(bool);\\r\\n  function setStatus(uint, bool, bool) external returns(bool);\\r\\n  function split(uint,address ,address[] memory,address,uint, uint) external returns(bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xb0919495cbf49d5224f1bf8c1fe4850a294c3b3b60d973341790dde18ffddf01\",\"license\":\"MIT\"},\"contracts/digesu/interfaces/IAccountManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IAccountManager {\\r\\n  function getAccount(address) external view returns(address);\\r\\n  function hasAccount(address) external view returns(bool);\\r\\n  function createAccount(uint, address) external payable returns(address);\\r\\n}\",\"keccak256\":\"0x7ae12f7cddd8b6f07e73a38db84b77d6a1137555c2c7c3b68b0efc0b91adfcbb\",\"license\":\"MIT\"},\"contracts/digesu/interfaces/ICommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface ICommon {\\r\\n  event GetFinanced(uint, uint, address);\\r\\n  event AccountLaunched(address indexed, address indexed);\\r\\n  event Payback(uint, uint, address indexed);\\r\\n  event NewAccount( address indexed,  address indexed, uint);\\r\\n\\r\\n  event Joined(uint, address, uint);\\r\\n  event BandCreated (uint, Pool);\\r\\n  event RoundUp(uint, Pool);\\r\\n  event Rekeyed(address indexed, address indexed);\\r\\n\\r\\n  error AllMemberIsPaid();\\r\\n  error InvalidParameter();\\r\\n  error SystemNotRunning();\\r\\n  error ExecutionStopped();\\r\\n  error UnsupportedToken();\\r\\n  error InSufficientValue();\\r\\n  error NoAccountDetected();\\r\\n  error UnAuthorizedCaller();\\r\\n  error AccountNotApproved();\\r\\n  error SomethingWentWrong();\\r\\n  error ZeroAddress(address);\\r\\n  error TargetHasNoAccount();\\r\\n  error WithdrawalRestricted();\\r\\n  error SystemAlreadyRunning();\\r\\n  error StatusAlreadyUpdated();\\r\\n  error InconsistentArrayValue();\\r\\n  error UnsupportedAsset(address);\\r\\n  error AccountAlreadyDeactivated();\\r\\n  error InsufficientFund(uint, uint);\\r\\n  error IDoNotAcceptEtherIFYouForceItLost();\\r\\n\\r\\n  // #Enums\\r\\n  enum Mode { NONSTRICT, STRICT }\\r\\n  \\r\\n  // Balances types\\r\\n  enum Balances { WITHDAWABLE, INUSE }\\r\\n\\r\\n    // error NonInContext();\\r\\n  enum FuncTag { ADD, GET, PAYBACK, COMPLETE }\\r\\n\\r\\n  enum Access { DENIED, ALLOWED }\\r\\n\\r\\n  struct Pool {\\r\\n    Uints uints;\\r\\n    Uint256s uint256s;\\r\\n    Addresses addrs;\\r\\n    address[] mems;\\r\\n    uint allGh;\\r\\n  }\\r\\n\\r\\n  struct Param2 {\\r\\n    uint pid;\\r\\n    uint value;\\r\\n    address newUser;\\r\\n  }\\r\\n\\r\\n  struct Param {\\r\\n    address from;\\r\\n    address to;\\r\\n    uint amount;\\r\\n    uint amountTo;\\r\\n    uint mintable;\\r\\n  }\\r\\n\\r\\n  struct CC {\\r\\n    address token;\\r\\n    address who;\\r\\n    uint expectedCcr;\\r\\n    uint assetPriceInETH;\\r\\n    uint loanValueInETH;\\r\\n  }\\r\\n\\r\\n  struct Param3 {\\r\\n    address gh;\\r\\n    uint8 position;\\r\\n    uint poolId;\\r\\n    uint256 owings;\\r\\n    uint256 colBal;\\r\\n  }\\r\\n  \\r\\n  struct Uint256s {\\r\\n    uint unit;\\r\\n    uint receivable;\\r\\n    uint currentPool;\\r\\n  }\\r\\n\\r\\n  struct Uints {\\r\\n    Mode mode;\\r\\n    uint quorum;\\r\\n    uint selector;\\r\\n    uint ccr; // colCoverageRatio\\r\\n    uint duration;\\r\\n  }\\r\\n  \\r\\n  struct Addresses {\\r\\n    address asset;\\r\\n    address lastPaid;\\r\\n  }\\r\\n  \\r\\n  struct CR {\\r\\n    uint totalValueContributed;\\r\\n    uint subscribers;\\r\\n  }\\r\\n\\r\\n  struct CR2 {\\r\\n    uint erd; \\r\\n    uint valueContributed;\\r\\n  }\\r\\n\\r\\n    /**\\r\\n  @dev Structured data types to easily work with\\r\\n      data and parameters.  \\r\\n   */\\r\\n  struct P1 {\\r\\n    uint quorum;\\r\\n    uint duration;\\r\\n    uint ccr;\\r\\n    uint value;\\r\\n    address[] members;\\r\\n    address asset;\\r\\n  }\\r\\n\\r\\n  struct GCB {\\r\\n    address token;\\r\\n    address who;\\r\\n    address to;\\r\\n    uint amount;\\r\\n    uint amountTo;\\r\\n    CR cr;\\r\\n    CR2 cr2;\\r\\n  }\\r\\n\\r\\n  struct MC {\\r\\n    address token;\\r\\n    address to;\\r\\n    address from;\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  struct Return1 {\\r\\n    uint collateralBalanceInETH;\\r\\n    uint collateralBalanceInToken;\\r\\n    uint actualCollateralCoverageRatio;\\r\\n  }\\r\\n\\r\\n  struct Add {\\r\\n    uint by;\\r\\n    uint pid;\\r\\n    address who;\\r\\n  }\\r\\n\\r\\n  struct Return2 {\\r\\n    address trustee;\\r\\n    uint quorum;\\r\\n    uint tracker;\\r\\n  }\\r\\n\\r\\n  struct Liquidation {\\r\\n    uint index;\\r\\n    address who;\\r\\n    uint expectedRepaymentTime;\\r\\n    uint debt;\\r\\n    uint colBalInToken;\\r\\n  }\\r\\n\\r\\n  // struct LiqParam {\\r\\n  //   uint64 pid;\\r\\n  //   address msgSender;\\r\\n  // }\\r\\n\\r\\n  struct CMF {\\r\\n    uint amount;\\r\\n    uint16 makerRate;\\r\\n  }\\r\\n\\r\\n  struct Param1 {\\r\\n    address to;\\r\\n    address from;\\r\\n    uint amount;\\r\\n  }\\r\\n\\r\\n  struct Info {\\r\\n    uint position;\\r\\n    uint payDate;\\r\\n    uint turnTime;\\r\\n    uint owings;\\r\\n    uint reward;\\r\\n    uint colBals;\\r\\n    bool isAdmin;\\r\\n    bool isMember;\\r\\n    bool hasGH;\\r\\n  }\\r\\n\\r\\n  struct UpdateParam {\\r\\n    address expected; \\r\\n    uint poolId; \\r\\n    uint owings;\\r\\n    uint makerFee;\\r\\n    uint colBals;\\r\\n    Pool pool;\\r\\n  }\\r\\n\\r\\n  struct CreateParam {\\r\\n    uint poolId;\\r\\n    function (uint, FuncTag) internal _lock;\\r\\n    function (address) internal view returns(address) _account;\\r\\n    function () internal returns(uint) _getQFTPriceInETH;\\r\\n  }\\r\\n\\r\\n  struct Accounts {\\r\\n    address active;\\r\\n    address deactivated;\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x5fcdce058f5a57f713615b67a3d1431e7a1cec908e3b6fdab6b8ba1e30666ece\",\"license\":\"MIT\"},\"contracts/digesu/interfaces/IDigesu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./ICommon.sol\\\";\\r\\n\\r\\ninterface IDigesu {\\r\\n  error InsufficientQuorum();\\r\\n  error InvalidInput();\\r\\n  error Failed();\\r\\n\\r\\n  event Cancellation(uint poolId, uint unit, address alc);\\r\\n\\r\\n  function joinABand(uint poolId) external returns(bool);\\r\\n  function getFinance(uint poolId) external returns(bool);\\r\\n  function payback(uint poolId) external returns(bool);\\r\\n  function liquidate(uint poolId) external returns(bool);\\r\\n  function roundUp(uint poolId) external returns(bool);\\r\\n  function enquireLiquidation(uint poolId) external view returns(ICommon.Liquidation calldata);\\r\\n  function cancelBand(uint poolId) external returns(bool);\\r\\n  function supportedToken(address token) external view returns(bool);\\r\\n  \\r\\n  function createPublicPool(\\r\\n    uint8 quorum, \\r\\n    uint8 durationInDays, \\r\\n    uint16 colCoverageRatio, \\r\\n    uint amount,\\r\\n    address asset) external returns(bool);\\r\\n\\r\\n  function createPrivatePool(\\r\\n    uint8 durationIndays,\\r\\n    uint16 colCoverateRatio, \\r\\n    address[] memory members, \\r\\n    address asset,\\r\\n    uint amount) external returns(bool);\\r\\n  \\r\\n  struct Statistics {\\r\\n    uint totalValueInERC20;\\r\\n    uint96 subscribers;\\r\\n  }\\r\\n\\r\\n  struct PublicData {\\r\\n    address feeTo;\\r\\n    address token;\\r\\n    uint8 penFee;\\r\\n    uint8 makerFee;\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/** In save and invest, we do not handle investment for users \\r\\n    We simply provide the tools for backend and frontend to interact with it.\\r\\n      - An user creates an investment account.\\r\\n      - Fund it with an initial amount.\\r\\n      - Set the configuration themselves.\\r\\n      - Provides Approve external investors to withdraw from the account.\\r\\n\\r\\n      Uses: \\r\\n        o A hybrid exchange.\\r\\n        o An easy way to singleHandedly fund projects.\\r\\n        o Provide liquidity to projects from personal account.\\r\\n        o Sells directly to anyone from the account.\\r\\n        o Can save.\\r\\n\\r\\n        Switches:\\r\\n          o User will be able to switch to save mode.\\r\\n          o Liquid mode.\\r\\n          o Borrow mode.\\r\\n          o Lending mode.\\r\\n          o Funding mode.\\r\\n  */\\r\\n\",\"keccak256\":\"0x9924edf44378ccab456405f46e129696fae3ad12b94fdbed705d4199d0224121\",\"license\":\"MIT\"},\"contracts/digesu/libs/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x581f516b0c289ae10c759f78658cde975b570c33e36995d66be409862609d5a3\",\"license\":\"MIT\"},\"contracts/digesu/libs/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./Pausable.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd0ce6b6748d2a41c869e1137074c74e4c18ed58280ceb25eb7965eb367c00109\",\"license\":\"MIT\"},\"contracts/digesu/libs/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\n abstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1d39901b77c40b259657684628426cd9675de689af0be4440a2a06c6d7d46eff\",\"license\":\"MIT\"},\"contracts/digesu/libs/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x23548d6fab0741804c72cf998388b4ed12b1d721c5ff64a496d41328b6708910\",\"license\":\"MIT\"},\"contracts/digesu/libs/Utils.sol\":{\"content\":\"    // SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../token/IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"../interfaces/ICommon.sol\\\";\\r\\nimport \\\"../interfaces/IAccount.sol\\\";\\r\\n\\r\\nlibrary Utils {\\r\\n    using Address for address;\\r\\n    // using SafeMath for uint256;\\r\\n\\r\\n    ///@dev Requires the three conditions to be true\\r\\n    function assertChained3(bool a, bool b, bool c, string memory errorMessage) internal pure {\\r\\n        require(a && b && c, errorMessage);\\r\\n    }\\r\\n\\r\\n    ///@dev Requires the three conditions to be true\\r\\n    function assertChained4(bool a, bool b, bool c, bool d, string memory errorMessage) internal pure {\\r\\n        require(a && b && c && d, errorMessage);\\r\\n    }\\r\\n\\r\\n    ///@dev Requires the three conditions to be true \\r\\n    function assertChained2(bool a, bool b, string memory errorMessage) internal pure {\\r\\n        require(a && b, errorMessage);\\r\\n    }\\r\\n\\r\\n    ///@dev Requires the three conditions to be true \\r\\n    function assertEither(bool a, bool b, string memory errorMessage) internal pure {\\r\\n        require(a || b, errorMessage);\\r\\n    }\\r\\n\\r\\n    ///@dev Requires conditions to be true \\r\\n    function assertUnchained(bool condition, string memory errorMessage) internal pure {\\r\\n        require(condition, errorMessage);\\r\\n    }\\r\\n\\r\\n    ///@dev Requires conditions to be true \\r\\n    function assertNotUnchained(bool condition, string memory errorMessage) internal pure {\\r\\n        require(!condition, errorMessage);\\r\\n    }\\r\\n\\r\\n    ///@dev Asserts condition is true, and the callback is executed\\r\\n    function ifTrueCallBack(bool condition, function(uint64, address) internal callback, uint64 pid, address user) internal {\\r\\n        if(condition) callback(pid, user);\\r\\n    }\\r\\n\\r\\n    // Simple arithmetic : Multiplication and division\\r\\n    function mulDivOp(uint256 value, uint8 numerator) internal pure returns (uint _return) {\\r\\n        if(value == 0 || numerator == 0) return 0; \\r\\n        _return = (value * numerator) / 100;\\r\\n    }\\r\\n    \\r\\n    // Enquire and return the collateral balances of `who` in QFT.\\r\\n    function getCollateralBalance(address token, address who) internal view returns(uint256) {\\r\\n        IERC20.AccountBalances memory acc = IERC20(token).accountBalances(who);\\r\\n\\r\\n        return acc.spendable;\\r\\n    }\\r\\n\\r\\n    ///@dev Checks allowance from user `p1.from`\\r\\n    function screenAllowance(ICommon.MC memory p1) internal view returns(ICommon.MC memory) {\\r\\n        uint amount = IERC20(p1.token).allowance(p1.from, p1.to);\\r\\n        require(amount >= p1.amount, \\\"No allowance found\\\");\\r\\n        p1.amount = amount;\\r\\n        return p1;\\r\\n    }\\r\\n\\r\\n    ///@dev Withdraws allowance from user `p1.from`\\r\\n    function getDeposit(ICommon.MC memory p1, address to) internal returns (uint) {\\r\\n        require(IERC20(p1.token).transferFrom(p1.from, to, p1.amount), \\\"Transfer failed\\\");\\r\\n        return p1.amount;\\r\\n    }\\r\\n\\r\\n       // ///@dev Returns balance of who\\r\\n    // function getBalance(Params.TokenParams memory p1) internal view returns(Params.TokenParams memory) {\\r\\n    //     p1.amount = IERC20(p1.token).balanceOf(p1.subject);\\r\\n    //     return p1;\\r\\n    // }\\r\\n\\r\\n    ///@dev transfer Assets\\r\\n    function transfer(ICommon.MC memory p1) internal {\\r\\n        require(IERC20(p1.token).transfer(p1.to, p1.amount), \\\"Withdrawal failed\\\");\\r\\n    }\\r\\n\\r\\n    ///@dev Withdraws \\r\\n    function forwardAsset(ICommon.MC memory p1) internal {\\r\\n        require(IERC20(p1.token).transfer(p1.to, p1.amount), \\\"Withdrawal failed\\\");\\r\\n    }\\r\\n\\r\\n    // Restricts `param.who` from moving token of amount `param.amount`\\r\\n    function lockCollateral(address token, address who, uint amount) internal {\\r\\n        IERC20(token).lockFor(who, amount);\\r\\n        // bytes memory data = abi.encodeWithSignature(\\\"lockFor(address,uint)\\\", param.who, param.amount);\\r\\n        // (bool s, bytes memory returndata) = param.token.call(data);\\r\\n        // Address.verifyCallResult(s, returndata, \\\"failed\\\");\\r\\n    }\\r\\n\\r\\n    // Restricts `param.who` from moving token of amount `param.amount`\\r\\n    function unlockCollateral(ICommon.GCB memory param) internal {\\r\\n        Address.functionCall(param.token, abi.encodeWithSelector(\\r\\n            bytes4(\\r\\n                keccak256(\\r\\n                    bytes(\\r\\n                        \\\"unlockFor(address,address,uint,uint,uint)\\\"\\r\\n                        )\\r\\n                    )\\r\\n                ), \\r\\n               param.who, param.to, computeReward(param.cr, param.cr2), param.amount, param.amountTo));\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        Reward calculator\\r\\n        ================\\r\\n        o CA = User's contributed amount.\\r\\n        o TC = Total contribution at the time of call.\\r\\n        o TS = Total subscribers.\\r\\n        o ERD = Expected repayment duration (in days).\\r\\n\\r\\n        Reward = CA.div(TC).mul(TS).mul(ERD)\\r\\n    \\r\\n     */\\r\\n    function computeReward(ICommon.CR memory param, ICommon.CR2 memory param2) internal pure returns (uint) {\\r\\n        uint mantissa = 10**10;\\r\\n        // return param2.valueContributed.mul(mantissa).div(param.totalValueContributed).mul(param.subscribers).mul(param2.erd).div(mantissa);\\r\\n        return ((((param2.valueContributed * mantissa) / param.totalValueContributed) * param.subscribers) * param2.erd) / mantissa;\\r\\n    }\\r\\n\\r\\n    // Restricts `param.who` from moving token of amount `param.amount`\\r\\n    function moveCollateral(address token, address to, address from, uint amount) internal {\\r\\n        Address.functionCall(token, abi.encodeWithSelector(bytes4(keccak256(bytes(\\\"unlockAndTransfer(address,address,uint)\\\"))), from, to, amount));\\r\\n    }\\r\\n\\r\\n    // Compute and return collateral value\\r\\n    function computeCollateral(ICommon.CC memory param) internal returns (uint) {\\r\\n        uint discAssetValueInETH;\\r\\n        uint256 discAssetValueInToken = getCollateralBalance(param.token, param.who);\\r\\n        discAssetValueInETH = discAssetValueInToken * param.assetPriceInETH;\\r\\n        assertUnchained(discAssetValueInETH >= param.loanValueInETH, \\\"Insufficient Collateral\\\");\\r\\n        discAssetValueInToken = param.loanValueInETH / param.assetPriceInETH;\\r\\n        uint ccr = (discAssetValueInETH * 100) / param.loanValueInETH;\\r\\n        assertUnchained(ccr >= param.expectedCcr, \\\"Ratio is low\\\");\\r\\n        lockCollateral(param.token, param.who, discAssetValueInToken);\\r\\n        \\r\\n        return discAssetValueInToken;\\r\\n        // return Params.Return1(discAssetValueInETH, discAssetValueInToken, ccr);\\r\\n    }\\r\\n\\r\\n    ///@dev Distributes capital to all members, clears trustee.\\r\\n    function _clearTrustee(address trustee, address[50] memory addresses)internal {\\r\\n        Address.functionCall(trustee, abi.encodeWithSelector(bytes4(keccak256(bytes(\\\"distribute(address[])\\\"))), addresses));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Computes maker fee.\\r\\n            Note : Maker rate must be in denomination of 1000 e.g 1010, 1100 etc.\\r\\n        Example: 1015 = 1.5%. 1150 = 15%, 1500 = 150%.\\r\\n    */\\r\\n    function computeMakerFee(ICommon.CMF memory cmf) internal pure returns (uint mFee, uint owings) {\\r\\n        mFee = (((cmf.makerRate * 10**10) / 1000) * cmf.amount) / 10**10;\\r\\n        owings = mFee + cmf.amount;\\r\\n        // return uint(cmf.makerRate).mul(10 ** 10).div(1000).mul(cmf.amount).div(10 ** 10).add(cmf.amount);\\r\\n    }\\r\\n\\r\\n    function zeroAddress(address which) internal pure {\\r\\n        require(which != address(0), \\\"Zero address\\\");\\r\\n    }\\r\\n\\r\\n     function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // function safePermit(\\r\\n    //     IERC20Permit token,\\r\\n    //     address owner,\\r\\n    //     address spender,\\r\\n    //     uint256 value,\\r\\n    //     uint256 deadline,\\r\\n    //     uint8 v,\\r\\n    //     bytes32 r,\\r\\n    //     bytes32 s\\r\\n    // ) internal {\\r\\n    //     uint256 nonceBefore = token.nonces(owner);\\r\\n    //     token.permit(owner, spender, value, deadline, v, r, s);\\r\\n    //     uint256 nonceAfter = token.nonces(owner);\\r\\n    //     require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     */\\r\\n    function _callOptionalReturnAccount(IAccount account, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(account).functionCall(data, \\\"SafeCall: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeCall: Account operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeSetStatus(\\r\\n        uint poolId,\\r\\n        bool isAdmin,\\r\\n        bool isMember,\\r\\n        IAccount account\\r\\n    ) internal {\\r\\n        _callOptionalReturnAccount(\\r\\n          account, \\r\\n          abi.encodeWithSelector(\\r\\n            account.setStatus.selector, \\r\\n            isAdmin, \\r\\n            isMember,\\r\\n            poolId\\r\\n          )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeWithdrawRouterOnly(\\r\\n        address token,\\r\\n        IAccount account,\\r\\n        address to, \\r\\n        address feeTo, \\r\\n        uint amount, \\r\\n        uint fee\\r\\n    ) internal {\\r\\n        _callOptionalReturnAccount(\\r\\n          account, \\r\\n          abi.encodeWithSelector(\\r\\n            account.withdrawRouterOnly.selector, \\r\\n            token, \\r\\n            to,\\r\\n            feeTo,\\r\\n            amount,\\r\\n            fee\\r\\n          )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeUpdateBalancesInUse(\\r\\n        address asset,\\r\\n        IAccount account,\\r\\n        uint value, \\r\\n        bool reduce\\r\\n    ) internal {\\r\\n        _callOptionalReturnAccount(account, abi.encodeWithSelector(\\r\\n          account.updateBalancesInUse.selector, \\r\\n          asset, \\r\\n          value,\\r\\n          reduce\\r\\n        )\\r\\n      );\\r\\n    }\\r\\n\\r\\n    function safeInitializeInfo(\\r\\n        uint poolId, \\r\\n        ICommon.Info memory info,\\r\\n        bool lock,\\r\\n        bool reduceBalance,\\r\\n        IAccount account,\\r\\n        uint value,\\r\\n        address asset,\\r\\n        address to\\r\\n    ) internal {\\r\\n        _callOptionalReturnAccount(account, abi.encodeWithSelector(\\r\\n          account.initializeInfo.selector,\\r\\n          info,\\r\\n          lock,\\r\\n          reduceBalance,\\r\\n          poolId,\\r\\n          value,\\r\\n          asset,\\r\\n          to\\r\\n        )\\r\\n      );\\r\\n    }\\r\\n\\r\\n    function safeClearSubscrition(\\r\\n        uint poolId,\\r\\n        IAccount account\\r\\n    ) internal {\\r\\n        _callOptionalReturnAccount(account, abi.encodeWithSelector(\\r\\n          account.clearSubscription.selector,\\r\\n          poolId\\r\\n        )\\r\\n      );\\r\\n    }\\r\\n\\r\\n    function safeSplit(\\r\\n        uint poolId,\\r\\n        IAccount account,\\r\\n        address asset,\\r\\n        address[] memory members,\\r\\n        address closeTo,\\r\\n        uint unitAmount, \\r\\n        uint balance\\r\\n    ) internal {\\r\\n        _callOptionalReturnAccount(account, abi.encodeWithSelector(\\r\\n          account.split.selector,\\r\\n          poolId,\\r\\n          asset,\\r\\n          members,\\r\\n          closeTo,\\r\\n          unitAmount,\\r\\n          balance\\r\\n        )\\r\\n      );\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x807b5e978f440a78a4c2d0b219737d491830f27f09eaf0b39563e301ffad4525\",\"license\":\"MIT\"},\"contracts/digesu/peripherals/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nabstract contract Currency {\\r\\n\\r\\n  // Supported tokens:\\r\\n  mapping (address=>bool) private supportedTokens;\\r\\n\\r\\n  //Ensures token is supported by this contract\\r\\n  modifier onlySupportedToken(address token) {\\r\\n    if(!supportedTokens[token]) revert (\\\"Not supported\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**@dev Updates the storage for supportedTokens\\r\\n   * Note Dual function: Can also remove support for `newToken`;\\r\\n   * @param newToken: newSupported token or to be removed.\\r\\n  */\\r\\n  function setSupportedTokens(address newToken) public virtual {\\r\\n    bool isSupported = supportedTokens[newToken];\\r\\n    supportedTokens[newToken] = !isSupported;\\r\\n  }\\r\\n\\r\\n  // Returns token is supported or otherwise\\r\\n  function _supportedToken(address token) internal view returns (bool) {\\r\\n    return supportedTokens[token];\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0xda64147494bddff55d10b786748a13546f162333adf0afd4817b8ad4252d4cbc\",\"license\":\"MIT\"},\"contracts/digesu/peripherals/FuncHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/ICommon.sol\\\";\\r\\n\\r\\nabstract contract FuncHandler is ICommon {\\r\\n  \\r\\n  /**\\r\\n    @dev Maps functions to Access\\r\\n      Note: Functions can either be in locked or open mode.\\r\\n  */\\r\\n  mapping(uint => mapping(FuncTag => Access)) private fLock;\\r\\n\\r\\n  /**@dev Function contexts determines if certain internal function \\r\\n   * should run or not. Each internal callable function should run only\\r\\n   * in the context of the external function for which they're defined.\\r\\n   * All internal functions are locked by default and bound to specific function.\\r\\n   */\\r\\n  // mapping (FuncTag=>bool) private context;\\r\\n\\r\\n  // /**Internal func must be in context of specific function \\r\\n  //  * for which they're bound.\\r\\n  //  * @param tag :  Function handle\\r\\n  //  */\\r\\n  // modifier isAContextOf(FuncTag exTag, bool unlock) {\\r\\n  //   bool _isContext = context[exTag];\\r\\n  //   if(unlock) {\\r\\n  //     context[exTag] = true; \\r\\n  //   } else {\\r\\n  //     if(!_isContext) revert NonInContext();\\r\\n\\r\\n  //   }\\r\\n  //   _;\\r\\n  //   if(_isContext) context[exTag] = false;\\r\\n  // }\\r\\n\\r\\n  // // Returns the four bytes of a function signature\\r\\n  // function _sig(string memory funcLiteral) internal pure returns(bytes4 _sig_) {\\r\\n  //   _sig_ = bytes4(\\r\\n  //     keccak256(\\r\\n  //       bytes(\\r\\n  //         funcLiteral\\r\\n  //       )\\r\\n  //     )\\r\\n  //   )\\r\\n  // }\\r\\n  \\r\\n  /**\\r\\n    @dev Determine if function should be called at this time.\\r\\n      @param tag - Function handle. See IStorage.FuncTag'\\r\\n   */\\r\\n  modifier checkFunctionPass(uint poolId, FuncTag tag) {\\r\\n    require(_fStatus(poolId, tag) == Access.ALLOWED, \\\"Locked\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  \\r\\n  ///@dev locks function with @param tag : Function handle\\r\\n  function _lock(uint pid, FuncTag tag) internal {\\r\\n    fLock[pid][tag] = Access.DENIED;\\r\\n  }\\r\\n\\r\\n  ///@dev Unlocks function with @param tag : Function handle\\r\\n  function _unlock(uint pid, FuncTag tag) internal {\\r\\n    fLock[pid][tag] = Access.ALLOWED;\\r\\n  }\\r\\n\\r\\n  /**@dev Return status of predefined functions.\\r\\n   * @param pid : pool Id\\r\\n   * @param tag : Function tag\\r\\n   */\\r\\n  function _fStatus(uint pid, FuncTag tag) internal view returns (Access _status) {\\r\\n    _status = fLock[pid][tag];\\r\\n  }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x314a4ace61cf87e364f13fb7e4cb1bc528d19eba6ce7169d08bfd4a9c413414e\",\"license\":\"MIT\"},\"contracts/digesu/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n     /** @dev Moves token of an 'amount' to the locked\\r\\n    */\\r\\n    function lockSpecific(address routeTo, uint256 inValue, uint16 lockTil) external;\\r\\n\\r\\n    /** @dev Locks `amount` for `target` for subscription purpose\\r\\n    */\\r\\n    function lockFor(address target, uint amount) external;\\r\\n\\r\\n    /** @dev unlocks `amount` for `target` for subscription purpose\\r\\n    */\\r\\n    function unlockFor(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint mintable,\\r\\n        uint amountTo,\\r\\n        uint amount\\r\\n    ) external;\\r\\n\\r\\n\\r\\n    /** @dev Moves 'amount' to regular balance\\r\\n        @param amount - Amount to unloc.\\r\\n     */\\r\\n    function unlockSpecific(uint amount) external ;\\r\\n\\r\\n    /** @dev Return who's balances\\r\\n        @param who - Account to enquire for.\\r\\n     */\\r\\n    function accountBalances(address who) external view returns(AccountBalances memory);\\r\\n   \\r\\n    /**@dev Return QFT's Metadata including the information of `who`.\\r\\n     */\\r\\n    function tokenData(address who) external view returns(MetaData memory, Holders memory);\\r\\n\\r\\n    /// @notice Unlocks and transfer at the same time .\\r\\n    function unlockAndTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint amount\\r\\n    ) external;\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n      * @dev structured data for holding user's balance\\r\\n    */\\r\\n    struct Holders {\\r\\n        uint256 main;\\r\\n        SelfLocked locked;\\r\\n        Subscription sub;\\r\\n    }\\r\\n\\r\\n    struct SelfLocked {\\r\\n        uint32 lockTil;\\r\\n        uint256 value;\\r\\n        address routeTo;\\r\\n    }\\r\\n\\r\\n    struct Subscription {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    struct AccountBalances {\\r\\n        uint256 spendable;\\r\\n        uint256 locked;\\r\\n        uint256 inSubScription;\\r\\n    }\\r\\n\\r\\n    struct Share {\\r\\n        uint8 idleTimeInDays;\\r\\n        uint32 lastLockedDate;\\r\\n        uint256 reward;\\r\\n    }\\r\\n\\r\\n    // READONLY : Standard API for reading QFT metadata \\r\\n    struct MetaData {\\r\\n        uint rewardRate;\\r\\n        uint256 tSupply;\\r\\n        bool shareActive;\\r\\n        string name;\\r\\n        string symbol;\\r\\n        address digesuAddr;\\r\\n    }\\r\\n\\r\\n    struct AutoIncentive {\\r\\n        uint256 budget;\\r\\n    }\\r\\n\\r\\n    struct LockParam {\\r\\n        address who; \\r\\n        address routeTo; \\r\\n        uint256 inValue; \\r\\n        uint16 lockTil; \\r\\n        bool cmd;\\r\\n    }\\r\\n\\r\\n    struct UnlockParam {\\r\\n        address who;\\r\\n        uint256 reqAmt;\\r\\n        bool cmd;\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x307591fb83b3a08d8223a6f92ed86257ea9a8e442720aa97adffd3d565ef0d18\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "$2c022547ef4f001d9ea8218c177314c832$",
  "libraries": {
    "DigesuLib": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createPrivatePool(uint8,uint16,address[],address,uint256)": {
        "details": "Launches a public band - Native currency i.e ETH or Platform currency.",
        "params": {
          "amount": "- Contribution amount.",
          "asset": "- Asset's contract address.",
          "colCoverateRatio": "- Collateral factor - determinant of the amount of collateral to require of gFer. This is expressed as a multiple index of total loanable amount.",
          "durationIndays": "- The maximum time limit (from when the turn time begins) with which a participant will take custody of the loan before repayment.",
          "members": "- List of expected members."
        }
      },
      "createPublicPool(uint8,uint8,uint16,uint256,address)": {
        "details": "Launches a public band - Native currency i.e ETH or Platform currency.",
        "params": {
          "amount": "- Unit contribution.",
          "asset": "- address of the ERC20 standard asset to use. Note: asset must be supported by digesu.",
          "colCoverageRatio": "- Collateral factor - determinant of the amount of collateral to require of gFer. This is expressed as a multiple index of total loanable amount.",
          "durationInDays": "- The maximum time limit (from when the turn time begins) with which a participant will take custody of the loan before repayment.",
          "quorum": "- Required number of participants to form a band. "
        }
      },
      "getFinance(uint256)": {
        "details": "Members of a pool can pick up the contributed fund when certain coditions are met.",
        "params": {
          "poolId": ": Band's Id which caller belong to. Note:"
        }
      },
      "joinABand(uint256)": {
        "details": "Add new member.",
        "params": {
          "poolId": ": Band index. Note: We set up a trustee to hold all funds in the pool at poolId in trust  for all members."
        }
      },
      "liquidate(uint256)": {
        "details": "Liquidates defaulter. Note: The expected repayment time for last paid must have passed."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "payback(uint256)": {
        "details": "Utility to payback borrowed fund.",
        "params": {
          "poolId": ": Pool number. Note: We are only concerned about who is to pay back and not  who is paying back meaning any of the members can pay  on behalf of another."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setSupportedTokens(address)": {
        "details": "Updates the storage for supportedTokens Note Dual function: Can also remove support for `newToken`;",
        "params": {
          "newToken": ": newSupported token or to be removed."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses contract"
      },
      "updateMinPoolAmount(uint256)": {
        "details": "Updates minimum amount contribution amount Note: Only Owner have the privilege to call this function."
      },
      "updatePublicData(address,address,uint8,uint8)": {
        "details": "Updates penalty fee."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cr()": {
        "notice": "Other statistical data - Read-only o Total Values contributed todate; o Total subscribers;"
      }
    },
    "notice": "Digesu ====== A multi-peer finance structure that allows many parties come together, contribute money in equal amount for the purpose of financing themselves in a rotational manner. All the  participant is lender and borrower same time. Each beneficiary pays back with very minimal maker rate that's almost insignificant ranging between as little as 0.1 to 5%. The maker  rate being an amount charged in favor of the platform. For every successful circle, all the participant is entitled to farming reward in QFT, with  which they can make more profit. We also bountily reward best performing band every 3 months.  Example: A 3-man band (A, B, C) created with unit amount 1 ETH. - 'A' launches the band with a commitment of 1 ETH, becomes the admin - 'A' is added to slot 1, and a trustee is created for the band. - 1 ETH is forwarded to trustee. - 'B' joins with commitment of 1 ETH, added to slot 2. - 'C' joins with commitment of 1 ETH, added to slot 3. - There is 3 ETH locked with Trustee, and \"A's\" time to withdraw is now. - Join function is disabled, and 'GetFinance' is unlocked. - 3 ETH is available to 'B' to withdraw. - 'B's wallet is screened for enough collateral (QFT). o If true, 3 ETH is sent to 'B' otherwise operation failed. o If time for 'B' to withdraw has passed, any member of the band who is the current caller will replace \"B's\" position, and claim the fund. o Assume 'C' calls, \"C's\" position is swapped with \"B's\". CIRCUIT BREAK ------------- o There is a circuit break when any member of such band explicitly call the roundUp(). o This can only be done when all the participants has successfully 'GETFINANCED'. PAYBACK:  ====== o Any member that 'GETFINANCE' has a payback period which was initially specified  by the admin. o If the payback period elapsed, nothing is done, until someone calls to liquidate the defaulter. o If after time elapsed, the beneficiary calls, they're surcharge with 5% of the  collateral balance (in token value). The penalty is charged in favor of the next on the queue to 'GETFINANCE', and his/her account is credited. The balance being the amount left after 5% deduction is released to the owner. o If the beneficiary stays within expected repayment time (ERP), the above shall not apply. Their collateral balance is unlocked immediately. LIQUIDATION ========== o Anyone (either a member or outsider) can liquidate the defaulter. When this happens, the liquidator absorbs the current debt (exact amount or greater must be sent along with the call). They absorbs fully the profile of the defaulter including the collateral balances. The circle then continues. ERROR CODE ========== 1. Function not available. 2. Value is below minimum. 3. Not a member. 4. Pool not ready. 5. No debt found. 6. User is yet to default payment. 7. Address is empty. 8. Price is empty. 9. Members exceed limit. 10. Already a member of this band. 11. Value out of bound. 1. Amount exists 2. Not an Owner 3. Insufficient balance 4. Out of bound. 5. Pool is filled. 6. Function locked. 7. User not a member in this band. 8. Value less than expected. 9. Invalid pool id. 10. User already getFinance. 11. User is yet to default payment. 12. Address is empty. 13. Invalid positioning. 14. Anomally detected: User not paid; 15. Cannot cancel at this time. Pool already more than 1. 16. All members yet to GetFinance. 17. Cannot have admin in multiple places. 18. User cannot replicate in a band. 19. Invalid input. 20. Operation failed.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14786,
        "contract": "contracts/digesu/Digesu.sol:Digesu",
        "label": "supportedTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14848,
        "contract": "contracts/digesu/Digesu.sol:Digesu",
        "label": "fLock",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(FuncTag)11378,t_enum(Access)11381))"
      },
      {
        "astId": 12924,
        "contract": "contracts/digesu/Digesu.sol:Digesu",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 12785,
        "contract": "contracts/digesu/Digesu.sol:Digesu",
        "label": "_owner",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6792,
        "contract": "contracts/digesu/Digesu.sol:Digesu",
        "label": "data",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Data)7759_storage"
      },
      {
        "astId": 6794,
        "contract": "contracts/digesu/Digesu.sol:Digesu",
        "label": "creationFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6796,
        "contract": "contracts/digesu/Digesu.sol:Digesu",
        "label": "minimumPoolAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6799,
        "contract": "contracts/digesu/Digesu.sol:Digesu",
        "label": "manager",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IAccountManager)11259"
      },
      {
        "astId": 6803,
        "contract": "contracts/digesu/Digesu.sol:Digesu",
        "label": "cr",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(CR)11465_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Pool)11396_storage)dyn_storage": {
        "base": "t_struct(Pool)11396_storage",
        "encoding": "dynamic_array",
        "label": "struct ICommon.Pool[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccountManager)11259": {
        "encoding": "inplace",
        "label": "contract IAccountManager",
        "numberOfBytes": "20"
      },
      "t_enum(Access)11381": {
        "encoding": "inplace",
        "label": "enum ICommon.Access",
        "numberOfBytes": "1"
      },
      "t_enum(FuncTag)11378": {
        "encoding": "inplace",
        "label": "enum ICommon.FuncTag",
        "numberOfBytes": "1"
      },
      "t_enum(Mode)11370": {
        "encoding": "inplace",
        "label": "enum ICommon.Mode",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_enum(FuncTag)11378,t_enum(Access)11381)": {
        "encoding": "mapping",
        "key": "t_enum(FuncTag)11378",
        "label": "mapping(enum ICommon.FuncTag => enum ICommon.Access)",
        "numberOfBytes": "32",
        "value": "t_enum(Access)11381"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(FuncTag)11378,t_enum(Access)11381))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum ICommon.FuncTag => enum ICommon.Access))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(FuncTag)11378,t_enum(Access)11381)"
      },
      "t_struct(Addresses)11460_storage": {
        "encoding": "inplace",
        "label": "struct ICommon.Addresses",
        "members": [
          {
            "astId": 11457,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "asset",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11459,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "lastPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CR)11465_storage": {
        "encoding": "inplace",
        "label": "struct ICommon.CR",
        "members": [
          {
            "astId": 11462,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "totalValueContributed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11464,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "subscribers",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Data)7759_storage": {
        "encoding": "inplace",
        "label": "struct Data",
        "members": [
          {
            "astId": 7749,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "pcd",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(PublicData)11738_storage"
          },
          {
            "astId": 7753,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "pools",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(Pool)11396_storage)dyn_storage"
          },
          {
            "astId": 7758,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "amountExist",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Pool)11396_storage": {
        "encoding": "inplace",
        "label": "struct ICommon.Pool",
        "members": [
          {
            "astId": 11384,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "uints",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Uints)11455_storage"
          },
          {
            "astId": 11387,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "uint256s",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(Uint256s)11443_storage"
          },
          {
            "astId": 11390,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "addrs",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(Addresses)11460_storage"
          },
          {
            "astId": 11393,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "mems",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 11395,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "allGh",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(PublicData)11738_storage": {
        "encoding": "inplace",
        "label": "struct IDigesu.PublicData",
        "members": [
          {
            "astId": 11731,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "feeTo",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11733,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11735,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "penFee",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 11737,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "makerFee",
            "offset": 21,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Uint256s)11443_storage": {
        "encoding": "inplace",
        "label": "struct ICommon.Uint256s",
        "members": [
          {
            "astId": 11438,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "unit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11440,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "receivable",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11442,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "currentPool",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Uints)11455_storage": {
        "encoding": "inplace",
        "label": "struct ICommon.Uints",
        "members": [
          {
            "astId": 11446,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "mode",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Mode)11370"
          },
          {
            "astId": 11448,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "quorum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11450,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "selector",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11452,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "ccr",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11454,
            "contract": "contracts/digesu/Digesu.sol:Digesu",
            "label": "duration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}