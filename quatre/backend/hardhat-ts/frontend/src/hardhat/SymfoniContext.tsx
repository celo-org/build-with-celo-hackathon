/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { providers, Signer, ethers } from "ethers";
import React, { useEffect, useState } from "react";
import Web3Modal, { IProviderOptions } from "web3modal";
import DigesuLibDeployment from "./deployments/alfajores/DigesuLib.json";
import { Greeter } from "./typechain/Greeter";
import { Greeter__factory } from "./typechain/factories/Greeter__factory";
import { SimpleERC115 } from "./typechain/SimpleERC115";
import { SimpleERC115__factory } from "./typechain/factories/SimpleERC115__factory";
import { SimpleProxyContract } from "./typechain/SimpleProxyContract";
import { SimpleProxyContract__factory } from "./typechain/factories/SimpleProxyContract__factory";
import { SimpleERC777 } from "./typechain/SimpleERC777";
import { SimpleERC777__factory } from "./typechain/factories/SimpleERC777__factory";
import { Storage } from "./typechain/Storage";
import { Storage__factory } from "./typechain/factories/Storage__factory";
import { SimpleVestingWallet } from "./typechain/SimpleVestingWallet";
import { SimpleVestingWallet__factory } from "./typechain/factories/SimpleVestingWallet__factory";
import { SupportToken } from "./typechain/SupportToken";
import { SupportToken__factory } from "./typechain/factories/SupportToken__factory";
import DigesuDeployment from "./deployments/alfajores/Digesu.json";
import { Digesu } from "./typechain/Digesu";
import { Digesu__factory } from "./typechain/factories/Digesu__factory";
import { VestingWallet } from "./typechain/VestingWallet";
import { VestingWallet__factory } from "./typechain/factories/VestingWallet__factory";
import { Account } from "./typechain/Account";
import { Account__factory } from "./typechain/factories/Account__factory";
import AccountManagerDeployment from "./deployments/alfajores/AccountManager.json";
import { AccountManager } from "./typechain/AccountManager";
import { AccountManager__factory } from "./typechain/factories/AccountManager__factory";
import { AdjustableTimelock } from "./typechain/AdjustableTimelock";
import { AdjustableTimelock__factory } from "./typechain/factories/AdjustableTimelock__factory";
import QuatreTokenDeployment from "./deployments/alfajores/QuatreToken.json";
import { QuatreToken } from "./typechain/QuatreToken";
import { QuatreToken__factory } from "./typechain/factories/QuatreToken__factory";
import { ERC1155 } from "./typechain/ERC1155";
import { ERC1155__factory } from "./typechain/factories/ERC1155__factory";
import { ERC20 } from "./typechain/ERC20";
import { ERC20__factory } from "./typechain/factories/ERC20__factory";
import { ERC777 } from "./typechain/ERC777";
import { ERC777__factory } from "./typechain/factories/ERC777__factory";

const emptyContract = {
    instance: undefined,
    factory: undefined
};
const defaultProvider: providers.Provider | undefined = undefined;
export const ProviderContext = React.createContext<[providers.Provider | undefined, React.Dispatch<React.SetStateAction<providers.Provider | undefined>>]>([defaultProvider, () => { }]);
const defaultCurrentAddress: string = "";
export const CurrentAddressContext = React.createContext<[string, React.Dispatch<React.SetStateAction<string>>]>([defaultCurrentAddress, () => { }]);
const defaultSigner: Signer | undefined = undefined;
export const SignerContext = React.createContext<[Signer | undefined, React.Dispatch<React.SetStateAction<Signer | undefined>>]>([defaultSigner, () => { }]);
const defaultSymfoniContext: SymfoniContextInterface = {
    currentHardhatProvider: "",
    init: () => { throw Error("Symfoni context not initialized") },
    loading: false,
    messages: [],
    providers: []
};
export const SymfoniContext = React.createContext<SymfoniContextInterface>(defaultSymfoniContext);
export const DigesuLibContext = React.createContext<SymfoniDigesu>(emptyContract);
export const GreeterContext = React.createContext<SymfoniGreeter>(emptyContract);
export const SimpleERC115Context = React.createContext<SymfoniSimpleERC115>(emptyContract);
export const SimpleProxyContractContext = React.createContext<SymfoniSimpleProxyContract>(emptyContract);
export const SimpleERC777Context = React.createContext<SymfoniSimpleERC777>(emptyContract);
export const StorageContext = React.createContext<SymfoniStorage>(emptyContract);
export const SimpleVestingWalletContext = React.createContext<SymfoniSimpleVestingWallet>(emptyContract);
export const SupportTokenContext = React.createContext<SymfoniSupportToken>(emptyContract);
export const DigesuContext = React.createContext<SymfoniDigesu>(emptyContract);
export const VestingWalletContext = React.createContext<SymfoniVestingWallet>(emptyContract);
export const AccountContext = React.createContext<SymfoniAccount>(emptyContract);
export const AccountManagerContext = React.createContext<SymfoniAccountManager>(emptyContract);
export const AdjustableTimelockContext = React.createContext<SymfoniAdjustableTimelock>(emptyContract);
export const QuatreTokenContext = React.createContext<SymfoniQuatreToken>(emptyContract);
export const ERC1155Context = React.createContext<SymfoniERC1155>(emptyContract);
export const ERC20Context = React.createContext<SymfoniERC20>(emptyContract);
export const ERC777Context = React.createContext<SymfoniERC777>(emptyContract);

export interface SymfoniContextInterface {
    init: (provider?: string) => void;
    loading: boolean;
    messages: string[];
    currentHardhatProvider: string;
    providers: string[];
}

export interface SymfoniProps {
    autoInit?: boolean;
    showLoading?: boolean;
    loadingComponent?: React.ReactNode;
}

export interface SymfoniDigesu {
    instance?: Digesu;
    factory?: Digesu__factory;
}

export interface SymfoniGreeter {
    instance?: Greeter;
    factory?: Greeter__factory;
}

export interface SymfoniSimpleERC115 {
    instance?: SimpleERC115;
    factory?: SimpleERC115__factory;
}

export interface SymfoniSimpleProxyContract {
    instance?: SimpleProxyContract;
    factory?: SimpleProxyContract__factory;
}

export interface SymfoniSimpleERC777 {
    instance?: SimpleERC777;
    factory?: SimpleERC777__factory;
}

export interface SymfoniStorage {
    instance?: Storage;
    factory?: Storage__factory;
}

export interface SymfoniSimpleVestingWallet {
    instance?: SimpleVestingWallet;
    factory?: SimpleVestingWallet__factory;
}

export interface SymfoniSupportToken {
    instance?: SupportToken;
    factory?: SupportToken__factory;
}

export interface SymfoniDigesu {
    instance?: Digesu;
    factory?: Digesu__factory;
}

export interface SymfoniVestingWallet {
    instance?: VestingWallet;
    factory?: VestingWallet__factory;
}

export interface SymfoniAccount {
    instance?: Account;
    factory?: Account__factory;
}

export interface SymfoniAccountManager {
    instance?: AccountManager;
    factory?: AccountManager__factory;
}

export interface SymfoniAdjustableTimelock {
    instance?: AdjustableTimelock;
    factory?: AdjustableTimelock__factory;
}

export interface SymfoniQuatreToken {
    instance?: QuatreToken;
    factory?: QuatreToken__factory;
}

export interface SymfoniERC1155 {
    instance?: ERC1155;
    factory?: ERC1155__factory;
}

export interface SymfoniERC20 {
    instance?: ERC20;
    factory?: ERC20__factory;
}

export interface SymfoniERC777 {
    instance?: ERC777;
    factory?: ERC777__factory;
}

export const Symfoni: React.FC<SymfoniProps> = ({
    showLoading = true,
    autoInit = true,
    ...props
}) => {
    const [initializeCounter, setInitializeCounter] = useState(0);
    const [currentHardhatProvider, setCurrentHardhatProvider] = useState("");
    const [loading, setLoading] = useState(false);
    const [messages, setMessages] = useState<string[]>([]);
    const [signer, setSigner] = useState<Signer | undefined>(defaultSigner);
    const [provider, setProvider] = useState<providers.Provider | undefined>(defaultProvider);
    const [currentAddress, setCurrentAddress] = useState<string>(defaultCurrentAddress);
    const [fallbackProvider] = useState<string | undefined>(undefined);
    const [providerPriority, setProviderPriority] = useState<string[]>(["web3modal", "hardhat"]);
    const [DigesuLib, setDigesuLib] = useState<SymfoniDigesu>(emptyContract);
    const [Greeter, setGreeter] = useState<SymfoniGreeter>(emptyContract);
    const [SimpleERC115, setSimpleERC115] = useState<SymfoniSimpleERC115>(emptyContract);
    const [SimpleProxyContract, setSimpleProxyContract] = useState<SymfoniSimpleProxyContract>(emptyContract);
    const [SimpleERC777, setSimpleERC777] = useState<SymfoniSimpleERC777>(emptyContract);
    const [Storage, setStorage] = useState<SymfoniStorage>(emptyContract);
    const [SimpleVestingWallet, setSimpleVestingWallet] = useState<SymfoniSimpleVestingWallet>(emptyContract);
    const [SupportToken, setSupportToken] = useState<SymfoniSupportToken>(emptyContract);
    const [Digesu, setDigesu] = useState<SymfoniDigesu>(emptyContract);
    const [VestingWallet, setVestingWallet] = useState<SymfoniVestingWallet>(emptyContract);
    const [Account, setAccount] = useState<SymfoniAccount>(emptyContract);
    const [AccountManager, setAccountManager] = useState<SymfoniAccountManager>(emptyContract);
    const [AdjustableTimelock, setAdjustableTimelock] = useState<SymfoniAdjustableTimelock>(emptyContract);
    const [QuatreToken, setQuatreToken] = useState<SymfoniQuatreToken>(emptyContract);
    const [ERC1155, setERC1155] = useState<SymfoniERC1155>(emptyContract);
    const [ERC20, setERC20] = useState<SymfoniERC20>(emptyContract);
    const [ERC777, setERC777] = useState<SymfoniERC777>(emptyContract);
    useEffect(() => {
        if (messages.length > 0)
            console.debug(messages.pop())
    }, [messages])

    const getProvider = async (): Promise<{ provider: providers.Provider, hardhatProviderName: string } | undefined> => {
        let hardhatProviderName = "Not set";
        let _providerPriority = [...providerPriority];
        // Fallback provider
        if (fallbackProvider && autoInit && initializeCounter === 0) {
            if (localStorage.getItem("WEB3_CONNECT_CACHED_PROVIDER") === null) {
                _providerPriority = _providerPriority.sort((a, b) => {
                    return a === fallbackProvider ? -1 : b === fallbackProvider ? 1 : 0;
                })
            }
        }
        const provider = await _providerPriority.reduce(async (maybeProvider: Promise<providers.Provider | undefined>, providerIdentification) => {
            let foundProvider = await maybeProvider
            if (foundProvider) {
                return Promise.resolve(foundProvider)
            }
            else {
                switch (providerIdentification.toLowerCase()) {
                    case "web3modal":
                        try {
                            const provider = await getWeb3ModalProvider()
                            const web3provider = new ethers.providers.Web3Provider(provider);
                            hardhatProviderName = "web3modal";
                            return Promise.resolve(web3provider)
                        } catch (error) {
                            return Promise.resolve(undefined)
                        }
                    case "hardhat":
                        try {
                            const provider = new ethers.providers.JsonRpcProvider({
                                url: "http://127.0.0.1:8545",
                            });
                            hardhatProviderName = "hardhat";
                            return Promise.resolve(provider)
                        } catch (error) {
                            return Promise.resolve(undefined)
                        } default:
                        return Promise.resolve(undefined)
                }
            }
        }, Promise.resolve(undefined)) // end reduce
        return provider ? { provider, hardhatProviderName } : undefined
    };
    const getSigner = async (_provider: providers.Provider, hardhatProviderName: string): Promise<Signer | undefined> => {
        switch (hardhatProviderName) {
            case "web3modal":
                const web3provider = _provider as ethers.providers.Web3Provider
                return await web3provider.getSigner()
            case "hardhat":
                return ethers.Wallet.fromMnemonic("test test test test test test test test test test test junk").connect(_provider)
            default:
                return undefined
        }
    };
    const getWeb3ModalProvider = async (): Promise<any> => {
        const providerOptions: IProviderOptions = {

        };
        const web3Modal = new Web3Modal({
            // network: "mainnet",
            cacheProvider: false,
            providerOptions, // required
        });
        return await web3Modal.connect();
    };

    useEffect(() => {
        let subscribed = true
        const doAsync = async () => {
            const finish = (text: string) => {
                setLoading(false)
                setMessages(old => [...old, text])
            }
            const finishWithContracts = (text: string) => {
                setDigesuLib(getDigesuLib(_provider, _signer))
                setGreeter(getGreeter(_provider, _signer))
                setSimpleERC115(getSimpleERC115(_provider, _signer))
                setSimpleProxyContract(getSimpleProxyContract(_provider, _signer))
                setSimpleERC777(getSimpleERC777(_provider, _signer))
                setStorage(getStorage(_provider, _signer))
                setSimpleVestingWallet(getSimpleVestingWallet(_provider, _signer))
                setSupportToken(getSupportToken(_provider, _signer))
                setDigesu(getDigesu(_provider, _signer))
                setVestingWallet(getVestingWallet(_provider, _signer))
                setAccount(getAccount(_provider, _signer))
                setAccountManager(getAccountManager(_provider, _signer))
                setAdjustableTimelock(getAdjustableTimelock(_provider, _signer))
                setQuatreToken(getQuatreToken(_provider, _signer))
                setERC1155(getERC1155(_provider, _signer))
                setERC20(getERC20(_provider, _signer))
                setERC777(getERC777(_provider, _signer))
                finish(text)
            }
            if (!autoInit && initializeCounter === 0) return finish("Auto init turned off.")
            setLoading(true)
            setMessages(old => [...old, "Initiating Symfoni React"])
            const providerObject = await getProvider() // getProvider can actually return undefined, see issue https://github.com/microsoft/TypeScript/issues/11094

            if (!subscribed || !providerObject) return finish("No provider or signer.")
            const _provider = providerObject.provider
            setProvider(_provider)
            setMessages(old => [...old, "Useing " + providerObject.hardhatProviderName])
            setCurrentHardhatProvider(providerObject.hardhatProviderName)
            const _signer = await getSigner(_provider, providerObject.hardhatProviderName);

            if (!subscribed || !_signer) return finishWithContracts("Provider, without signer.")
            setSigner(_signer)
            setMessages(old => [...old, "Useing signer"])
            const address = await _signer.getAddress()

            if (!subscribed || !address) return finishWithContracts("Provider and signer, without address.")
            setCurrentAddress(address)

            return finishWithContracts("Completed Symfoni context initialization.")
        };
        doAsync();
        return () => { subscribed = false }
    }, [initializeCounter])

    const getDigesuLib = (_provider: providers.Provider, _signer?: Signer) => {

        const contractAddress = DigesuLibDeployment.receipt.contractAddress
        const instance = _signer ? Digesu__factory.connect(contractAddress, _signer) : Digesu__factory.connect(contractAddress, _provider)
        const contract: SymfoniDigesu = {
            instance: instance,
            factory: _signer ? new Digesu__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getGreeter = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? Greeter__factory.connect(ethers.constants.AddressZero, _signer) : Greeter__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniGreeter = {
            instance: instance,
            factory: _signer ? new Greeter__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSimpleERC115 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SimpleERC115__factory.connect(ethers.constants.AddressZero, _signer) : SimpleERC115__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSimpleERC115 = {
            instance: instance,
            factory: _signer ? new SimpleERC115__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSimpleProxyContract = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SimpleProxyContract__factory.connect(ethers.constants.AddressZero, _signer) : SimpleProxyContract__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSimpleProxyContract = {
            instance: instance,
            factory: _signer ? new SimpleProxyContract__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSimpleERC777 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SimpleERC777__factory.connect(ethers.constants.AddressZero, _signer) : SimpleERC777__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSimpleERC777 = {
            instance: instance,
            factory: _signer ? new SimpleERC777__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getStorage = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? Storage__factory.connect(ethers.constants.AddressZero, _signer) : Storage__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniStorage = {
            instance: instance,
            factory: _signer ? new Storage__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSimpleVestingWallet = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SimpleVestingWallet__factory.connect(ethers.constants.AddressZero, _signer) : SimpleVestingWallet__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSimpleVestingWallet = {
            instance: instance,
            factory: _signer ? new SimpleVestingWallet__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSupportToken = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SupportToken__factory.connect(ethers.constants.AddressZero, _signer) : SupportToken__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSupportToken = {
            instance: instance,
            factory: _signer ? new SupportToken__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getDigesu = (_provider: providers.Provider, _signer?: Signer) => {

        const contractAddress = DigesuDeployment.receipt.contractAddress
        const instance = _signer ? Digesu__factory.connect(contractAddress, _signer) : Digesu__factory.connect(contractAddress, _provider)
        const contract: SymfoniDigesu = {
            instance: instance,
            factory: _signer ? new Digesu__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getVestingWallet = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? VestingWallet__factory.connect(ethers.constants.AddressZero, _signer) : VestingWallet__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniVestingWallet = {
            instance: instance,
            factory: _signer ? new VestingWallet__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getAccount = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? Account__factory.connect(ethers.constants.AddressZero, _signer) : Account__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniAccount = {
            instance: instance,
            factory: _signer ? new Account__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getAccountManager = (_provider: providers.Provider, _signer?: Signer) => {

        const contractAddress = AccountManagerDeployment.receipt.contractAddress
        const instance = _signer ? AccountManager__factory.connect(contractAddress, _signer) : AccountManager__factory.connect(contractAddress, _provider)
        const contract: SymfoniAccountManager = {
            instance: instance,
            factory: _signer ? new AccountManager__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getAdjustableTimelock = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? AdjustableTimelock__factory.connect(ethers.constants.AddressZero, _signer) : AdjustableTimelock__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniAdjustableTimelock = {
            instance: instance,
            factory: _signer ? new AdjustableTimelock__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getQuatreToken = (_provider: providers.Provider, _signer?: Signer) => {

        const contractAddress = QuatreTokenDeployment.receipt.contractAddress
        const instance = _signer ? QuatreToken__factory.connect(contractAddress, _signer) : QuatreToken__factory.connect(contractAddress, _provider)
        const contract: SymfoniQuatreToken = {
            instance: instance,
            factory: _signer ? new QuatreToken__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC1155 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC1155__factory.connect(ethers.constants.AddressZero, _signer) : ERC1155__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC1155 = {
            instance: instance,
            factory: _signer ? new ERC1155__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20__factory.connect(ethers.constants.AddressZero, _signer) : ERC20__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20 = {
            instance: instance,
            factory: _signer ? new ERC20__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC777 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC777__factory.connect(ethers.constants.AddressZero, _signer) : ERC777__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC777 = {
            instance: instance,
            factory: _signer ? new ERC777__factory(_signer) : undefined,
        }
        return contract
    }
        ;

    const handleInitProvider = (provider?: string) => {
        if (provider) {
            setProviderPriority(old => old.sort((a, b) => {
                return a === provider ? -1 : b === provider ? 1 : 0;
            }))
        }
        setInitializeCounter(initializeCounter + 1)
    }
    return (
        <SymfoniContext.Provider value={{ init: (provider) => handleInitProvider(provider), providers: providerPriority, currentHardhatProvider, loading, messages }}>
            <ProviderContext.Provider value={[provider, setProvider]}>
                <SignerContext.Provider value={[signer, setSigner]}>
                    <CurrentAddressContext.Provider value={[currentAddress, setCurrentAddress]}>
                        <DigesuLibContext.Provider value={DigesuLib}>
                            <GreeterContext.Provider value={Greeter}>
                                <SimpleERC115Context.Provider value={SimpleERC115}>
                                    <SimpleProxyContractContext.Provider value={SimpleProxyContract}>
                                        <SimpleERC777Context.Provider value={SimpleERC777}>
                                            <StorageContext.Provider value={Storage}>
                                                <SimpleVestingWalletContext.Provider value={SimpleVestingWallet}>
                                                    <SupportTokenContext.Provider value={SupportToken}>
                                                        <DigesuContext.Provider value={Digesu}>
                                                            <VestingWalletContext.Provider value={VestingWallet}>
                                                                <AccountContext.Provider value={Account}>
                                                                    <AccountManagerContext.Provider value={AccountManager}>
                                                                        <AdjustableTimelockContext.Provider value={AdjustableTimelock}>
                                                                            <QuatreTokenContext.Provider value={QuatreToken}>
                                                                                <ERC1155Context.Provider value={ERC1155}>
                                                                                    <ERC20Context.Provider value={ERC20}>
                                                                                        <ERC777Context.Provider value={ERC777}>
                                                                                            {showLoading && loading ?
                                                                                                props.loadingComponent
                                                                                                    ? props.loadingComponent
                                                                                                    : <div>
                                                                                                        {messages.map((msg, i) => (
                                                                                                            <p key={i}>{msg}</p>
                                                                                                        ))}
                                                                                                    </div>
                                                                                                : props.children
                                                                                            }
                                                                                        </ERC777Context.Provider >
                                                                                    </ERC20Context.Provider >
                                                                                </ERC1155Context.Provider >
                                                                            </QuatreTokenContext.Provider >
                                                                        </AdjustableTimelockContext.Provider >
                                                                    </AccountManagerContext.Provider >
                                                                </AccountContext.Provider >
                                                            </VestingWalletContext.Provider >
                                                        </DigesuContext.Provider >
                                                    </SupportTokenContext.Provider >
                                                </SimpleVestingWalletContext.Provider >
                                            </StorageContext.Provider >
                                        </SimpleERC777Context.Provider >
                                    </SimpleProxyContractContext.Provider >
                                </SimpleERC115Context.Provider >
                            </GreeterContext.Provider >
                        </DigesuLibContext.Provider >
                    </CurrentAddressContext.Provider>
                </SignerContext.Provider>
            </ProviderContext.Provider>
        </SymfoniContext.Provider>
    )

};
