// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FundsWithdrawn extends ethereum.Event {
  get params(): FundsWithdrawn__Params {
    return new FundsWithdrawn__Params(this);
  }
}

export class FundsWithdrawn__Params {
  _event: FundsWithdrawn;

  constructor(event: FundsWithdrawn) {
    this._event = event;
  }

  get withdrawAddressNative(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountWithdrawnNative(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TokenFundsDeposited extends ethereum.Event {
  get params(): TokenFundsDeposited__Params {
    return new TokenFundsDeposited__Params(this);
  }
}

export class TokenFundsDeposited__Params {
  _event: TokenFundsDeposited;

  constructor(event: TokenFundsDeposited) {
    this._event = event;
  }

  get tokenDeposited(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addressDeposited(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountDeposited(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenFundsWithdrawn extends ethereum.Event {
  get params(): TokenFundsWithdrawn__Params {
    return new TokenFundsWithdrawn__Params(this);
  }
}

export class TokenFundsWithdrawn__Params {
  _event: TokenFundsWithdrawn;

  constructor(event: TokenFundsWithdrawn) {
    this._event = event;
  }

  get tokenWithdrawn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get withdrawAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountWithdrawn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UniqueTokenAdded extends ethereum.Event {
  get params(): UniqueTokenAdded__Params {
    return new UniqueTokenAdded__Params(this);
  }
}

export class UniqueTokenAdded__Params {
  _event: UniqueTokenAdded;

  constructor(event: UniqueTokenAdded) {
    this._event = event;
  }

  get addedToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class contractTokenBalanceAdjusted extends ethereum.Event {
  get params(): contractTokenBalanceAdjusted__Params {
    return new contractTokenBalanceAdjusted__Params(this);
  }
}

export class contractTokenBalanceAdjusted__Params {
  _event: contractTokenBalanceAdjusted;

  constructor(event: contractTokenBalanceAdjusted) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CashOut extends ethereum.SmartContract {
  static bind(address: Address): CashOut {
    return new CashOut("CashOut", address);
  }

  aggregateValues(values: Array<BigInt>): BigInt {
    let result = super.call(
      "aggregateValues",
      "aggregateValues(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(values)]
    );

    return result[0].toBigInt();
  }

  try_aggregateValues(values: Array<BigInt>): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "aggregateValues",
      "aggregateValues(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(values)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowedTokensAddresses(param0: BigInt): Address {
    let result = super.call(
      "allowedTokensAddresses",
      "allowedTokensAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_allowedTokensAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allowedTokensAddresses",
      "allowedTokensAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  contractTokenBalances(param0: Address): BigInt {
    let result = super.call(
      "contractTokenBalances",
      "contractTokenBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_contractTokenBalances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractTokenBalances",
      "contractTokenBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAuthorisedSignerIndex(signerAddress: Address): i32 {
    let result = super.call(
      "getAuthorisedSignerIndex",
      "getAuthorisedSignerIndex(address):(uint8)",
      [ethereum.Value.fromAddress(signerAddress)]
    );

    return result[0].toI32();
  }

  try_getAuthorisedSignerIndex(
    signerAddress: Address
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getAuthorisedSignerIndex",
      "getAuthorisedSignerIndex(address):(uint8)",
      [ethereum.Value.fromAddress(signerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getLatestPrice(redstonePayload: Bytes, assetDataFeedId: Bytes): BigInt {
    let result = super.call(
      "getLatestPrice",
      "getLatestPrice(bytes,bytes32):(uint256)",
      [
        ethereum.Value.fromBytes(redstonePayload),
        ethereum.Value.fromFixedBytes(assetDataFeedId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLatestPrice(
    redstonePayload: Bytes,
    assetDataFeedId: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLatestPrice",
      "getLatestPrice(bytes,bytes32):(uint256)",
      [
        ethereum.Value.fromBytes(redstonePayload),
        ethereum.Value.fromFixedBytes(assetDataFeedId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUniqueSignersThreshold(): i32 {
    let result = super.call(
      "getUniqueSignersThreshold",
      "getUniqueSignersThreshold():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_getUniqueSignersThreshold(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getUniqueSignersThreshold",
      "getUniqueSignersThreshold():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lowestCashoutAmount(redstonePayload: Bytes, assetDataFeedId: Bytes): BigInt {
    let result = super.call(
      "lowestCashoutAmount",
      "lowestCashoutAmount(bytes,bytes32):(uint256)",
      [
        ethereum.Value.fromBytes(redstonePayload),
        ethereum.Value.fromFixedBytes(assetDataFeedId)
      ]
    );

    return result[0].toBigInt();
  }

  try_lowestCashoutAmount(
    redstonePayload: Bytes,
    assetDataFeedId: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lowestCashoutAmount",
      "lowestCashoutAmount(bytes,bytes32):(uint256)",
      [
        ethereum.Value.fromBytes(redstonePayload),
        ethereum.Value.fromFixedBytes(assetDataFeedId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxyRequestToBaseContract(assetId: Bytes): BigInt {
    let result = super.call(
      "proxyRequestToBaseContract",
      "proxyRequestToBaseContract(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(assetId)]
    );

    return result[0].toBigInt();
  }

  try_proxyRequestToBaseContract(assetId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proxyRequestToBaseContract",
      "proxyRequestToBaseContract(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(assetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenIsAllowed(param0: Address): boolean {
    let result = super.call(
      "tokenIsAllowed",
      "tokenIsAllowed(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_tokenIsAllowed(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tokenIsAllowed",
      "tokenIsAllowed(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get forwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddAllowedTokenCall extends ethereum.Call {
  get inputs(): AddAllowedTokenCall__Inputs {
    return new AddAllowedTokenCall__Inputs(this);
  }

  get outputs(): AddAllowedTokenCall__Outputs {
    return new AddAllowedTokenCall__Outputs(this);
  }
}

export class AddAllowedTokenCall__Inputs {
  _call: AddAllowedTokenCall;

  constructor(call: AddAllowedTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAllowedTokenCall__Outputs {
  _call: AddAllowedTokenCall;

  constructor(call: AddAllowedTokenCall) {
    this._call = call;
  }
}

export class DepositTokenCall extends ethereum.Call {
  get inputs(): DepositTokenCall__Inputs {
    return new DepositTokenCall__Inputs(this);
  }

  get outputs(): DepositTokenCall__Outputs {
    return new DepositTokenCall__Outputs(this);
  }
}

export class DepositTokenCall__Inputs {
  _call: DepositTokenCall;

  constructor(call: DepositTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get redstonePayload(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get assetDataFeedId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class DepositTokenCall__Outputs {
  _call: DepositTokenCall;

  constructor(call: DepositTokenCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetMinimumPriceCall extends ethereum.Call {
  get inputs(): SetMinimumPriceCall__Inputs {
    return new SetMinimumPriceCall__Inputs(this);
  }

  get outputs(): SetMinimumPriceCall__Outputs {
    return new SetMinimumPriceCall__Outputs(this);
  }
}

export class SetMinimumPriceCall__Inputs {
  _call: SetMinimumPriceCall;

  constructor(call: SetMinimumPriceCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumPriceCall__Outputs {
  _call: SetMinimumPriceCall;

  constructor(call: SetMinimumPriceCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawCoinCall extends ethereum.Call {
  get inputs(): WithdrawCoinCall__Inputs {
    return new WithdrawCoinCall__Inputs(this);
  }

  get outputs(): WithdrawCoinCall__Outputs {
    return new WithdrawCoinCall__Outputs(this);
  }
}

export class WithdrawCoinCall__Inputs {
  _call: WithdrawCoinCall;

  constructor(call: WithdrawCoinCall) {
    this._call = call;
  }

  get _withdrawerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCoinCall__Outputs {
  _call: WithdrawCoinCall;

  constructor(call: WithdrawCoinCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get _withdrawerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
