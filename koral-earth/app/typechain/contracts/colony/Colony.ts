/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ActionDone = ContractEventLog<{
  status: boolean;
  statement: string;
  0: boolean;
  1: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;

export interface Colony extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Colony;
  clone(): Colony;
  methods: {
    _activeProjectRewards(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    _assigned(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    _claimed(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    _planktonContributions(
      arg0: string,
      arg1: string,
      arg2: number | string | BN
    ): NonPayableTransactionObject<{
      amount: string;
      projectId: string;
      0: string;
      1: string;
    }>;

    _planktons(arg0: number | string | BN): NonPayableTransactionObject<string>;

    _projectRewards(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    _rewards(arg0: number | string | BN): NonPayableTransactionObject<{
      name: string;
      location: string;
      0: string;
      1: string;
    }>;

    _zooxes(arg0: number | string | BN): NonPayableTransactionObject<string>;

    addPlankton(plankton: string): NonPayableTransactionObject<void>;

    addReward(
      projectId: string,
      name: string,
      location: string
    ): NonPayableTransactionObject<void>;

    addZoox(zoox: string): NonPayableTransactionObject<void>;

    assigned(): NonPayableTransactionObject<string[]>;

    claimReward(
      rewardId: number | string | BN,
      projectId: string
    ): NonPayableTransactionObject<void>;

    claimed(): NonPayableTransactionObject<string[]>;

    colonyName(): NonPayableTransactionObject<string>;

    contributeToOffset(projectId: string): PayableTransactionObject<void>;

    deactivatePlankton(plankton: string): NonPayableTransactionObject<void>;

    deactivateReward(
      rewardId: number | string | BN
    ): NonPayableTransactionObject<void>;

    deactivateZoox(zoox: string): NonPayableTransactionObject<void>;

    initialize(
      _colonyName: string,
      _maxPlanktons: number | string | BN,
      _maxZooxes: number | string | BN
    ): NonPayableTransactionObject<void>;

    launch(): NonPayableTransactionObject<void>;

    maxInstalmentsPerPlankton(): NonPayableTransactionObject<string>;

    maxPlanktons(): NonPayableTransactionObject<string>;

    maxZooxes(): NonPayableTransactionObject<string>;

    minContributionPerProject(
      arg0: string
    ): NonPayableTransactionObject<string>;

    planktonIsActive(arg0: string): NonPayableTransactionObject<boolean>;

    planktons(): NonPayableTransactionObject<[string][]>;

    polyp(): NonPayableTransactionObject<string>;

    projectRewards(projectId: string): NonPayableTransactionObject<string[]>;

    resume(): NonPayableTransactionObject<void>;

    rewardIsActive(
      arg0: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    rewards(): NonPayableTransactionObject<[string, string][]>;

    setColonyName(_colonyName: string): NonPayableTransactionObject<void>;

    setMaxPlanktons(
      _maxPlanktons: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMaxZooxes(
      _maxZooxes: number | string | BN
    ): NonPayableTransactionObject<void>;

    setPolyp(_polyp: string): NonPayableTransactionObject<void>;

    setProjectMinContributionAmount(
      minContributionAmount: number | string | BN,
      projectId: string
    ): NonPayableTransactionObject<void>;

    stop(): NonPayableTransactionObject<void>;

    stopped(): NonPayableTransactionObject<boolean>;

    totalInactivePlanktons(): NonPayableTransactionObject<string>;

    totalInactiveRewards(): NonPayableTransactionObject<string>;

    totalInactiveZooxes(): NonPayableTransactionObject<string>;

    zooxIsActive(arg0: string): NonPayableTransactionObject<boolean>;

    zooxes(): NonPayableTransactionObject<[string][]>;
  };
  events: {
    ActionDone(cb?: Callback<ActionDone>): EventEmitter;
    ActionDone(options?: EventOptions, cb?: Callback<ActionDone>): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ActionDone", cb: Callback<ActionDone>): void;
  once(
    event: "ActionDone",
    options: EventOptions,
    cb: Callback<ActionDone>
  ): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;
}
