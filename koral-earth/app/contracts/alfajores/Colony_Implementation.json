{
  "address": "0x6828affE1b4735561045A05d8DAD720Aa761c69B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "statement",
          "type": "string"
        }
      ],
      "name": "ActionDone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_activeProjectRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_assigned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_planktonContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_planktons",
      "outputs": [
        {
          "internalType": "address",
          "name": "id",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_projectRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rewards",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_zooxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "id",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "plankton",
          "type": "address"
        }
      ],
      "name": "addPlankton",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zoox",
          "type": "address"
        }
      ],
      "name": "addZoox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assigned",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "colonyName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        }
      ],
      "name": "contributeToOffset",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "plankton",
          "type": "address"
        }
      ],
      "name": "deactivatePlankton",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        }
      ],
      "name": "deactivateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zoox",
          "type": "address"
        }
      ],
      "name": "deactivateZoox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_colonyName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_maxPlanktons",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxZooxes",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxInstalmentsPerPlankton",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPlanktons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxZooxes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "minContributionPerProject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "planktonIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "planktons",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            }
          ],
          "internalType": "struct Plankton[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polyp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        }
      ],
      "name": "projectRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resume",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            }
          ],
          "internalType": "struct Reward[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_colonyName",
          "type": "string"
        }
      ],
      "name": "setColonyName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPlanktons",
          "type": "uint256"
        }
      ],
      "name": "setMaxPlanktons",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxZooxes",
          "type": "uint256"
        }
      ],
      "name": "setMaxZooxes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_polyp",
          "type": "address"
        }
      ],
      "name": "setPolyp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minContributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        }
      ],
      "name": "setProjectMinContributionAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopped",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInactivePlanktons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInactiveRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInactiveZooxes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "zooxIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zooxes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            }
          ],
          "internalType": "struct Zoox[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc84f06e0b7feaa513e1ccff2a416cfb61336e42bf97d7175f7aa78bd1c0cd1e8",
  "receipt": {
    "to": null,
    "from": "0xad1A522Bc88b6cb2E740ffd4FD5F511E53cE24bc",
    "contractAddress": "0x6828affE1b4735561045A05d8DAD720Aa761c69B",
    "transactionIndex": 1,
    "gasUsed": "2733964",
    "logsBloom": "0x
    "blockHash": "0xbb09d05e8645689a7d09584e6e99b29d43ced047c7b55446f40be37235984927",
    "transactionHash": "0xc84f06e0b7feaa513e1ccff2a416cfb61336e42bf97d7175f7aa78bd1c0cd1e8",
    "logs": [],
    "blockNumber": 14413203,
    "cumulativeGasUsed": "2786229",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4ce63e9e362c8b7c61026c291de60a84",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"statement\",\"type\":\"string\"}],\"name\":\"ActionDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_activeProjectRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_assigned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_planktonContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_planktons\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_projectRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rewards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_zooxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"plankton\",\"type\":\"address\"}],\"name\":\"addPlankton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zoox\",\"type\":\"address\"}],\"name\":\"addZoox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assigned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"colonyName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"}],\"name\":\"contributeToOffset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"plankton\",\"type\":\"address\"}],\"name\":\"deactivatePlankton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"deactivateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zoox\",\"type\":\"address\"}],\"name\":\"deactivateZoox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_colonyName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxPlanktons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxZooxes\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInstalmentsPerPlankton\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPlanktons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxZooxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"minContributionPerProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"planktonIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planktons\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"internalType\":\"struct Plankton[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polyp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"}],\"name\":\"projectRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"internalType\":\"struct Reward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_colonyName\",\"type\":\"string\"}],\"name\":\"setColonyName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPlanktons\",\"type\":\"uint256\"}],\"name\":\"setMaxPlanktons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxZooxes\",\"type\":\"uint256\"}],\"name\":\"setMaxZooxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_polyp\",\"type\":\"address\"}],\"name\":\"setPolyp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minContributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"}],\"name\":\"setProjectMinContributionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInactivePlanktons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInactiveRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInactiveZooxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"zooxIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zooxes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"internalType\":\"struct Zoox[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/colony/Colony.sol\":\"Colony\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"contracts/colony/Colony.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\n// This smart contract is for demo purposes only\\n// The protocol is still a WIP and this was made to show basic ideas using a smart contract\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../shared/access/Administrable.sol\\\";\\nimport \\\"../shared/access/Modifiable.sol\\\";\\nimport \\\"../shared/access/Stoppable.sol\\\";\\nimport \\\"../shared/events/EmitsEvent.sol\\\";\\nimport \\\"../shared/libs/Koral.sol\\\";\\nimport \\\"./Plankton.sol\\\";\\nimport \\\"./Reward.sol\\\";\\nimport \\\"./Zoox.sol\\\";\\nimport \\\"./Contribution.sol\\\";\\n\\ncontract Colony is Administrable, EmitsEvent, Initializable, Modifiable, Stoppable {\\n  using Koral for Plankton[];\\n  using Koral for Zoox[];\\n  using Koral for Contribution[];\\n\\n  uint public maxPlanktons;\\n  uint public maxZooxes;\\n  uint public totalInactivePlanktons;\\n  uint public totalInactiveZooxes;\\n  uint public totalInactiveRewards;\\n  uint public maxInstalmentsPerPlankton;\\n  string public colonyName;\\n  \\n  Plankton[] public _planktons;\\n  Reward[] public _rewards;\\n  Zoox[] public _zooxes;\\n\\n  mapping(uint => bool) public rewardIsActive;\\n  mapping(address => bool) public zooxIsActive;\\n  mapping(address => bool) public planktonIsActive;\\n\\n  mapping(string => uint) public minContributionPerProject;\\n\\n  mapping(address => uint[]) public _claimed;\\n  mapping(address => uint[]) public _assigned;\\n\\n  mapping(string => uint[]) public _projectRewards;\\n  mapping(string => mapping(uint => bool)) public _activeProjectRewards;\\n  mapping(address => mapping(string => Contribution[])) public _planktonContributions;\\n\\n\\n  modifier isPolyp {\\n    require(isAdmin(), \\\"Colony: Only the polyp can perform this action.\\\"); _;\\n  }\\n\\n  modifier isActivePlankton {\\n    require(planktonIsActive[msg.sender], \\\"Colony: Only active planktons can perform this action.\\\"); _;\\n  }\\n\\n  modifier isActiveZoox {\\n    require(zooxIsActive[msg.sender], \\\"Colony: Only active zooxes can perform this action.\\\"); _;\\n  }\\n\\n  modifier isValidReward(uint rewardId) {\\n    require(rewardIsActive[rewardId], \\\"Colony: This action can only be performed on an active reward.\\\"); _;\\n  }\\n\\n  function initialize(string memory _colonyName, uint _maxPlanktons, uint _maxZooxes) public initializer {\\n    assignNewAdmin(msg.sender);\\n    colonyName = _colonyName;\\n    maxPlanktons = _maxPlanktons;\\n    maxZooxes = _maxZooxes;\\n    maxInstalmentsPerPlankton = 4; // carefully chosen to avoid DoS attacks\\n  }\\n\\n  function launch() public isPolyp {\\n    makeFinal();\\n    emitActionSuccess(\\\"Colony launched successfully.\\\");\\n  }\\n\\n  function setProjectMinContributionAmount(uint minContributionAmount, string memory projectId)public isModifiable isPolyp {\\n    minContributionPerProject[projectId] = minContributionAmount;\\n\\n    emitActionSuccess(\\\"Project minimum contribution defined successfully.\\\");\\n  }\\n\\n  function addReward(string memory projectId, string memory name, string memory location) public isModifiable isPolyp {\\n    _rewards.push(\\n      Reward(name, location)\\n    );\\n\\n    uint rewardId = _rewards.length - 1;\\n\\n    _projectRewards[projectId].push(rewardId);\\n    _activeProjectRewards[projectId][rewardId] = true;\\n\\n    rewardIsActive[rewardId] = true;\\n\\n    emitActionSuccess(\\\"Reward added successfully.\\\");\\n  }\\n\\n  function deactivateReward(uint rewardId) public isModifiable isPolyp {\\n    require(rewardIsActive[rewardId], \\\"Colony: reward deactivation failed since reward is inactive.\\\");\\n\\n    rewardIsActive[rewardId] = false;\\n    \\n    totalInactiveRewards++;\\n\\n    emitActionSuccess(\\\"Reward deactivated successfully.\\\");\\n  }\\n\\n  function contributeToOffset(string memory projectId) public payable stopInEmergency {\\n    require(\\n      _planktonContributions[msg.sender][projectId].length < maxInstalmentsPerPlankton, \\n      \\\"Colony: Max contributions exceeded for this project.\\\"\\n    );\\n\\n    _planktonContributions[msg.sender][projectId].push(\\n      Contribution(msg.value, projectId)\\n    );\\n\\n    emitActionSuccess(\\\"Offset contribution accepted.\\\");\\n  }\\n\\n  function claimReward(uint rewardId, string memory projectId) public isActivePlankton isValidReward(rewardId) {\\n    require(rewardIsActive[rewardId], \\\"Colony: Reward is no longer claimable.\\\");\\n    require(_activeProjectRewards[projectId][rewardId], \\\"Colony: Reward not associated with project.\\\"); \\n    require(\\n      minContributionPerProject[projectId] <= _planktonContributions[msg.sender][projectId].totalContributions(), \\n      \\\"Colony: insufficient contribution.\\\"\\n    );\\n\\n    // NB: For simplicity reasons, rewards are currently deemed to be \\n    // claimable and assignable perpetually and simultaneously,\\n    // In reality, the rules could be different and more explicit. \\n    // In such cases, filtering and double spending prevention mechanisms should be implemented.\\n\\n    _claimed[msg.sender].push(rewardId);\\n    _assigned[msg.sender].push(rewardId);\\n\\n    emitActionSuccess(\\\"Reward claimed successfully.\\\");\\n  }\\n\\n  function addZoox(address zoox) public isModifiable isPolyp {\\n    require(_zooxes.canAcceptMoreZooxes(totalInactiveZooxes, maxZooxes), \\\"Colony: can't add any more zooxes\\\");\\n\\n    _zooxes.push(\\n      Zoox(zoox)\\n    );\\n\\n    zooxIsActive[zoox] = true;\\n    \\n    emitActionSuccess(\\\"Zoox added successfully.\\\");\\n  }\\n\\n  function deactivateZoox(address zoox) public isModifiable isPolyp {\\n    require(zooxIsActive[zoox], \\\"Colony: reward deactivation failed since zoox is inactive.\\\");\\n\\n    zooxIsActive[zoox] = false;\\n    totalInactiveZooxes++;\\n\\n    emitActionSuccess(\\\"Zoox deactivated successfully.\\\");\\n  }\\n\\n  function addPlankton(address plankton) public isModifiable isPolyp {\\n    require(_planktons.canAcceptMorePlanktons(totalInactivePlanktons, maxPlanktons), \\\"Colony: can't add any more planktons\\\");\\n\\n    _planktons.push(\\n      Plankton(plankton)\\n    );\\n\\n    planktonIsActive[plankton] = true;\\n\\n    emitActionSuccess(\\\"Plankton added successfully.\\\");\\n  }\\n\\n  function deactivatePlankton(address plankton) public isModifiable isPolyp {\\n    require(planktonIsActive[plankton], \\\"Colony: reward deactivation failed since plankton is inactive.\\\");\\n\\n    planktonIsActive[plankton] = false;\\n    totalInactivePlanktons++;\\n\\n    emitActionSuccess(\\\"Plankton deactivated successfully.\\\");\\n  }\\n\\n  function setPolyp(address _polyp) public isModifiable isPolyp  {\\n    assignNewAdmin(_polyp);\\n  }\\n\\n  function setColonyName(string memory _colonyName) public isModifiable isPolyp {\\n    colonyName = _colonyName;\\n  }\\n\\n  function setMaxPlanktons(uint _maxPlanktons) public isModifiable isPolyp {\\n    bool isValidMaxPlantons = _maxPlanktons >= (_planktons.length - totalInactivePlanktons);\\n\\n    require(isValidMaxPlantons, \\\"Colony: maxPlanktons must not be less than the existing active planktons\\\");\\n\\n    maxPlanktons = _maxPlanktons;\\n  }\\n\\n  function setMaxZooxes(uint _maxZooxes) public isModifiable isPolyp {\\n    bool isValidMaxZooxes = _maxZooxes >= (_zooxes.length - totalInactiveZooxes);\\n\\n    require(isValidMaxZooxes, \\\"Colony: maxZooxes must not be less than the existing active zooxes\\\");\\n\\n    maxZooxes = _maxZooxes;\\n  }\\n\\n  function polyp() view public returns (address) {\\n    return admin;\\n  }\\n\\n  function rewards() view public returns (Reward[] memory) {\\n    return _rewards;\\n  }\\n\\n  function projectRewards(string memory projectId) view public returns (uint[] memory) {\\n    return _projectRewards[projectId];\\n  }\\n\\n  function zooxes() view public returns (Zoox[] memory) {\\n    return _zooxes;\\n  }\\n\\n  function planktons() view public returns (Plankton[] memory) {\\n    return _planktons;\\n  }\\n\\n  function claimed() view public isActivePlankton returns (uint[] memory) {\\n    return _claimed[msg.sender];\\n  }\\n\\n  function assigned() view public isActivePlankton returns (uint[] memory) {\\n    return _assigned[msg.sender];\\n  }\\n}\",\"keccak256\":\"0x8c1441529f830f77bd78fa2d3f315d9585758d53caa4284d9a8538053a6399da\",\"license\":\"GPLv3\"},\"contracts/colony/Contribution.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\npragma solidity ^0.8.0;\\n\\nstruct Contribution {\\n  // amount in CELO wei\\n  uint amount;\\n\\n  // carbon offsetting project ID\\n  string projectId;\\n}\",\"keccak256\":\"0x29458295bce239ec5e151532f69f56418a3d94ed2b6c736b4db97c77b8821450\",\"license\":\"GPLv3\"},\"contracts/colony/Plankton.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\npragma solidity ^0.8.0;\\n\\nstruct Plankton {\\n  address id;\\n}\",\"keccak256\":\"0xfccff5b8a36ab689c55061bc6a05ab6fa5d126b7f7554f08b711265937430b45\",\"license\":\"GPLv3\"},\"contracts/colony/Reward.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\npragma solidity ^0.8.0;\\n  \\nstruct Reward {\\n  string name;\\n  string location;\\n}\",\"keccak256\":\"0x8d790689b398ac2003ab9aaf987eecd09b06dfad508ec25bc3c92b34c3231fdb\",\"license\":\"GPLv3\"},\"contracts/colony/Zoox.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\npragma solidity ^0.8.0;\\n\\nstruct Zoox {\\n  address id;\\n}\",\"keccak256\":\"0xfacda0e92ef73a378a6f0616bc39908fb4599a842bd8719823f92b7c2fd21313\",\"license\":\"GPLv3\"},\"contracts/shared/access/Administrable.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Administrable\\n * @dev This guarantees administration power to the system that inherits this contract\\n */\\nabstract contract Administrable {\\n  \\n  address internal admin;\\n\\n  function isAdmin() internal view returns (bool)  {\\n    return msg.sender == admin;\\n  }\\n  \\n  function assignNewAdmin(address _admin) internal {\\n    admin = _admin;\\n  }\\n}\\n\",\"keccak256\":\"0x0a0ce8e205fa5e0767b5d606e61d2bc2b977f90d1f3dd8277b376d33d0b98790\",\"license\":\"GPLv3\"},\"contracts/shared/access/Modifiable.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interactable\\n * @dev This guarantees the terms of modifiability of a system that inherits this contract\\n */\\nabstract contract Modifiable {\\n  \\n  bool internal isFinal = false;\\n\\n  modifier isModifiable {\\n    require(!isFinal, \\\"Modifiable: This system can no longer be modified.\\\"); _;\\n  } \\n\\n  function makeFinal() internal {\\n    isFinal = true;\\n  }\\n}\\n\",\"keccak256\":\"0x89c8b7be6251872357a0f4555d0b47c51bba58566566bcf1c0c51afbabc450d6\",\"license\":\"GPLv3\"},\"contracts/shared/access/Stoppable.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Stoppable\\n * @dev This provides a contract with the ability to be stopped\\n */\\nabstract contract Stoppable {\\n  \\n  bool public stopped = false;\\n  \\n  modifier stopInEmergency { if (!stopped) _; }\\n\\n  modifier onlyInEmergency { if (stopped) _; }\\n\\n  function stop() public {\\n    stopped = true;\\n  }\\n\\n  function resume() public {\\n    stopped = false;\\n  }\\n}\\n\",\"keccak256\":\"0xb5a4290b532583f5d042e039fe5471a612c5369dcb4722bc1f3eb91473b237b9\",\"license\":\"GPLv3\"},\"contracts/shared/events/EmitsEvent.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title EmitsEvent\\n * @dev contract to hold all the events that we emit\\n */\\nabstract contract EmitsEvent {\\n  \\n  event ActionDone(bool status, string statement);\\n\\n  function emitActionSuccess(string memory statement) internal\\n  {\\n    emit ActionDone(true, statement);\\n  }\\n\\n  function emitActionFailure(string memory statement) internal\\n  {\\n    emit ActionDone(false, statement);\\n  } \\n}\\n\",\"keccak256\":\"0x40ceb14f9736998ccd66bfffac7707a15a4cd85c66c077123698241320321ad4\",\"license\":\"GPLv3\"},\"contracts/shared/libs/Koral.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../colony/Plankton.sol\\\";\\nimport \\\"../../colony/Zoox.sol\\\";\\nimport \\\"../../colony/Contribution.sol\\\";\\n\\nlibrary Koral {\\n  function canAcceptMorePlanktons(Plankton[] storage planktons, uint inactivePlanktons, uint maxPlanktonsAllowed) internal view returns (bool) {\\n    uint totalActivePlanktons = planktons.length - inactivePlanktons;\\n    return totalActivePlanktons < maxPlanktonsAllowed;\\n  }\\n\\n  function canAcceptMoreZooxes(Zoox[] storage zooxes, uint inactiveZooxes, uint maxZooxesAllowed) internal view returns (bool) {\\n    uint totalActiveZooxes = zooxes.length - inactiveZooxes;\\n    return totalActiveZooxes < maxZooxesAllowed;\\n  }\\n\\n  function totalContributions(Contribution[] storage contributions) internal view returns (uint) {\\n    uint totalContributed;\\n    // since maxContributions is chosen carefully, DoS attacks can be prevented\\n    for(uint i = 0; i < contributions.length; i++) \\n    {\\n      Contribution memory contribution = contributions[i];\\n      totalContributed += contribution.amount;\\n    }\\n    return totalContributed;\\n  }\\n}\",\"keccak256\":\"0xadece5988f4a40c3299a547d48f477f8eaf80e10d391cc7e98ef9cad084718d3\",\"license\":\"GPLv3\"}},\"version\":1}",
  "bytecode": "0x60806040526000805461ffff60b01b1916905534801561001e57600080fd5b506130828061002e6000396000f3fe6080604052600436106102e65760003560e01c80638f1e940511610184578063cf2b7d9b116100d6578063eabdc5b41161008a578063f842696c11610064578063f842696c14610874578063fdf5d34d14610892578063fec3b41c146108a857600080fd5b8063eabdc5b414610829578063ec2cc06514610849578063ee8998e41461085e57600080fd5b8063d2d890cb116100bb578063d2d890cb146107d4578063e834a834146107f4578063eaba77031461080957600080fd5b8063cf2b7d9b1461079e578063d116850e146107b457600080fd5b80639ec5a89411610138578063adb4d99011610112578063adb4d9901461071c578063aeaba40014610731578063b4550b001461077c57600080fd5b80639ec5a894146106b45780639fd51622146106d6578063a37ca9b51461070657600080fd5b8063977d08c011610169578063977d08c0146106545780639e656d68146106745780639e7fd3d21461069457600080fd5b80638f1e94051461060657806393b170431461063457600080fd5b80632669f2131161023d57806375f12b21116101f15780637cdd102e116101cb5780637cdd102e1461057e5780638133192d1461059e57806384133d4a146105ce57600080fd5b806375f12b211461051a5780637830120d1461054b5780637b6250e41461056b57600080fd5b80633b350429116102225780633b350429146104ab5780634bdf2897146104d857806353b1a411146104f857600080fd5b80632669f213146104755780632695a9b41461049557600080fd5b80630c4775321161029f57806311b490d61161027957806311b490d61461041557806311fd19571461043557806321bdb3931461045557600080fd5b80630c477532146103b15780630e3f6c89146103c75780630fb76dd9146103f557600080fd5b8063046f7da2116102d0578063046f7da21461034d57806307da68f51461036c57806309cb02981461039157600080fd5b80625887b2146102eb57806301339c2114610336575b600080fd5b3480156102f757600080fd5b506103236103063660046129c3565b8051602081830181018051600e8252928201919093012091525481565b6040519081526020015b60405180910390f35b34801561034257600080fd5b5061034b6108d8565b005b34801561035957600080fd5b5061034b6000805460ff60b81b19169055565b34801561037857600080fd5b5061034b6000805460ff60b81b1916600160b81b179055565b34801561039d57600080fd5b506103236103ac366004612a1c565b6109b0565b3480156103bd57600080fd5b5061032360025481565b3480156103d357600080fd5b506103e76103e2366004612a46565b6109e1565b60405161032d929190612aed565b34801561040157600080fd5b5061034b610410366004612b06565b610ac6565b34801561042157600080fd5b5061034b610430366004612b8e565b610ccf565b34801561044157600080fd5b5061034b610450366004612bb0565b610db3565b34801561046157600080fd5b5061034b610470366004612b8e565b610f11565b34801561048157600080fd5b5061034b610490366004612b8e565b6110d3565b3480156104a157600080fd5b5061032360055481565b3480156104b757600080fd5b506104cb6104c63660046129c3565b6112b0565b60405161032d9190612bc9565b3480156104e457600080fd5b5061034b6104f3366004612bb0565b611320565b34801561050457600080fd5b5061050d611499565b60405161032d9190612c0d565b34801561052657600080fd5b5060005461053b90600160b81b900460ff1681565b604051901515815260200161032d565b34801561055757600080fd5b50610323610566366004612a1c565b611527565b61034b6105793660046129c3565b611543565b34801561058a57600080fd5b5061034b610599366004612b8e565b6116a4565b3480156105aa57600080fd5b5061053b6105b9366004612bb0565b600b6020526000908152604090205460ff1681565b3480156105da57600080fd5b506105ee6105e9366004612bb0565b611849565b6040516001600160a01b03909116815260200161032d565b34801561061257600080fd5b50610626610621366004612bb0565b611873565b60405161032d929190612c20565b34801561064057600080fd5b5061034b61064f366004612b8e565b611934565b34801561066057600080fd5b5061034b61066f366004612c4e565b611b13565b34801561068057600080fd5b5061034b61068f3660046129c3565b611c91565b3480156106a057600080fd5b5061034b6106af366004612c9c565b611d64565b3480156106c057600080fd5b506106c96120c5565b60405161032d9190612ce3565b3480156106e257600080fd5b5061053b6106f1366004612b8e565b600c6020526000908152604090205460ff1681565b34801561071257600080fd5b5061032360065481565b34801561072857600080fd5b506104cb612248565b34801561073d57600080fd5b5061053b61074c366004612d68565b81516020818401810180516012825292820194820194909420919093529091526000908152604090205460ff1681565b34801561078857600080fd5b5061079161232f565b60405161032d9190612dad565b3480156107aa57600080fd5b5061032360015481565b3480156107c057600080fd5b5061034b6107cf366004612c9c565b61238d565b3480156107e057600080fd5b506105ee6107ef366004612bb0565b612494565b34801561080057600080fd5b506104cb6124a4565b34801561081557600080fd5b50610323610824366004612d68565b612589565b34801561083557600080fd5b5061034b610844366004612bb0565b6125b4565b34801561085557600080fd5b50610791612762565b34801561086a57600080fd5b5061032360045481565b34801561088057600080fd5b506000546001600160a01b03166105ee565b34801561089e57600080fd5b5061032360035481565b3480156108b457600080fd5b5061053b6108c3366004612b8e565b600d6020526000908152604090205460ff1681565b6000546001600160a01b0316331461093d5760405162461bcd60e51b815260206004820152602f602482015260008051602061303683398151915260448201526e3936903a3434b99030b1ba34b7b71760891b60648201526084015b60405180910390fd5b610970600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b179055565b6109ae6040518060400160405280601d81526020017f436f6c6f6e79206c61756e63686564207375636365737366756c6c792e0000008152506127bf565b565b600f60205281600052604060002081815481106109cc57600080fd5b90600052602060002001600091509150505481565b60136020908152600084815260409020835180850183018051928152908301928501929092209152805482908110610a1857600080fd5b90600052602060002090600202016000925092505050806000015490806001018054610a4390612df1565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6f90612df1565b8015610abc5780601f10610a9157610100808354040283529160200191610abc565b820191906000526020600020905b815481529060010190602001808311610a9f57829003601f168201915b5050505050905082565b600054600160b01b900460ff1615610b295760405162461bcd60e51b8152602060048201526032602482015260008051602061305683398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610934565b6000546001600160a01b03163314610b895760405162461bcd60e51b815260206004820152602f602482015260008051602061303683398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610934565b604080518082019091528281526020810182905260098054600181018255600091909152815160029091027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01908190610be39082612e79565b5060208201516001820190610bf89082612e79565b505060095460009150610c0d90600190612f4f565b9050601184604051610c1f9190612f68565b9081526040516020918190038201812080546001808201835560009283529390912001839055601290610c53908790612f68565b90815260408051602092819003830181206000868152908452828120805460ff19908116961515969096179055600b845282902080549094166001179093558281019052601a82527f526577617264206164646564207375636365737366756c6c792e00000000000090820152610cc9906127bf565b50505050565b600054600160b01b900460ff1615610d325760405162461bcd60e51b8152602060048201526032602482015260008051602061305683398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610934565b6000546001600160a01b03163314610d925760405162461bcd60e51b815260206004820152602f602482015260008051602061303683398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610934565b600080546001600160a01b0319166001600160a01b03831617905550565b50565b600054600160b01b900460ff1615610e165760405162461bcd60e51b8152602060048201526032602482015260008051602061305683398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610934565b6000546001600160a01b03163314610e765760405162461bcd60e51b815260206004820152602f602482015260008051602061303683398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610934565b600454600a54600091610e8891612f4f565b821015905080610f0b5760405162461bcd60e51b815260206004820152604260248201527f436f6c6f6e793a206d61785a6f6f786573206d757374206e6f74206265206c6560448201527f7373207468616e20746865206578697374696e6720616374697665207a6f6f78606482015261657360f01b608482015260a401610934565b50600255565b600054600160b01b900460ff1615610f745760405162461bcd60e51b8152602060048201526032602482015260008051602061305683398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610934565b6000546001600160a01b03163314610fd45760405162461bcd60e51b815260206004820152602f602482015260008051602061303683398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610934565b6001600160a01b0381166000908152600c602052604090205460ff166110625760405162461bcd60e51b815260206004820152603a60248201527f436f6c6f6e793a2072657761726420646561637469766174696f6e206661696c60448201527f65642073696e6365207a6f6f7820697320696e6163746976652e0000000000006064820152608401610934565b6001600160a01b0381166000908152600c60205260408120805460ff19169055600480549161109083612f84565b9190505550610db06040518060400160405280601e81526020017f5a6f6f78206465616374697661746564207375636365737366756c6c792e00008152506127bf565b600054600160b01b900460ff16156111365760405162461bcd60e51b8152602060048201526032602482015260008051602061305683398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610934565b6000546001600160a01b031633146111965760405162461bcd60e51b815260206004820152602f602482015260008051602061303683398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610934565b6004546002546111a891600a916127fc565b6111fe5760405162461bcd60e51b815260206004820152602160248201527f436f6c6f6e793a2063616e27742061646420616e79206d6f7265207a6f6f78656044820152607360f81b6064820152608401610934565b60408051602080820183526001600160a01b03848116808452600a805460018082018355600092835295517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890910180546001600160a01b03191691909416179092558152600c8252839020805460ff19169092179091558151808301909252601882527f5a6f6f78206164646564207375636365737366756c6c792e000000000000000090820152610db0906127bf565b60606011826040516112c29190612f68565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561131457602002820191906000526020600020905b815481526020019060010190808311611300575b50505050509050919050565b600054600160b01b900460ff16156113835760405162461bcd60e51b8152602060048201526032602482015260008051602061305683398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610934565b6000546001600160a01b031633146113e35760405162461bcd60e51b815260206004820152602f602482015260008051602061303683398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610934565b6003546008546000916113f591612f4f565b8210159050806114935760405162461bcd60e51b815260206004820152604860248201527f436f6c6f6e793a206d6178506c616e6b746f6e73206d757374206e6f7420626560448201527f206c657373207468616e20746865206578697374696e6720616374697665207060648201527f6c616e6b746f6e73000000000000000000000000000000000000000000000000608482015260a401610934565b50600155565b600780546114a690612df1565b80601f01602080910402602001604051908101604052809291908181526020018280546114d290612df1565b801561151f5780601f106114f45761010080835404028352916020019161151f565b820191906000526020600020905b81548152906001019060200180831161150257829003601f168201915b505050505081565b601060205281600052604060002081815481106109cc57600080fd5b600054600160b81b900460ff16610db05760065433600090815260136020526040908190209051611575908490612f68565b90815260405190819003602001902054106115f85760405162461bcd60e51b815260206004820152603460248201527f436f6c6f6e793a204d617820636f6e747269627574696f6e732065786365656460448201527f656420666f7220746869732070726f6a6563742e0000000000000000000000006064820152608401610934565b33600090815260136020526040908190209051611616908390612f68565b908152604080519182900360209081018320838301909252348352828101848152825460018181018555600094855292909320845160029094020192835551908201906116639082612e79565b505050610db06040518060400160405280601d81526020017f4f666673657420636f6e747269627574696f6e2061636365707465642e0000008152506127bf565b600054600160b01b900460ff16156117075760405162461bcd60e51b8152602060048201526032602482015260008051602061305683398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610934565b6000546001600160a01b031633146117675760405162461bcd60e51b815260206004820152602f602482015260008051602061303683398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610934565b6001600160a01b0381166000908152600d602052604090205460ff166117f55760405162461bcd60e51b815260206004820152603e60248201527f436f6c6f6e793a2072657761726420646561637469766174696f6e206661696c60448201527f65642073696e636520706c616e6b746f6e20697320696e6163746976652e00006064820152608401610934565b6001600160a01b0381166000908152600d60205260408120805460ff19169055600380549161182383612f84565b9190505550610db0604051806060016040528060228152602001612fe2602291396127bf565b600a818154811061185957600080fd5b6000918252602090912001546001600160a01b0316905081565b6009818154811061188357600080fd5b90600052602060002090600202016000915090508060000180546118a690612df1565b80601f01602080910402602001604051908101604052809291908181526020018280546118d290612df1565b801561191f5780601f106118f45761010080835404028352916020019161191f565b820191906000526020600020905b81548152906001019060200180831161190257829003601f168201915b505050505090806001018054610a4390612df1565b600054600160b01b900460ff16156119975760405162461bcd60e51b8152602060048201526032602482015260008051602061305683398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610934565b6000546001600160a01b031633146119f75760405162461bcd60e51b815260206004820152602f602482015260008051602061303683398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610934565b600354600154611a09916008916127fc565b611a615760405162461bcd60e51b8152602060048201526024808201527f436f6c6f6e793a2063616e27742061646420616e79206d6f726520706c616e6b604482015263746f6e7360e01b6064820152608401610934565b60408051602080820183526001600160a01b038481168084526008805460018082018355600092835295517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee390910180546001600160a01b03191691909416179092558152600d8252839020805460ff19169092179091558151808301909252601c82527f506c616e6b746f6e206164646564207375636365737366756c6c792e0000000090820152610db0906127bf565b600054600160a81b900460ff1615808015611b3b57506000546001600160a01b90910460ff16105b80611b5c5750303b158015611b5c5750600054600160a01b900460ff166001145b611bce5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610934565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790558015611c16576000805460ff60a81b1916600160a81b1790555b600080546001600160a01b031916331790556007611c348582612e79565b506001839055600282905560046006558015610cc9576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b600054600160b01b900460ff1615611cf45760405162461bcd60e51b8152602060048201526032602482015260008051602061305683398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610934565b6000546001600160a01b03163314611d545760405162461bcd60e51b815260206004820152602f602482015260008051602061303683398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610934565b6007611d608282612e79565b5050565b336000908152600d602052604090205460ff16611de95760405162461bcd60e51b815260206004820152603660248201527f436f6c6f6e793a204f6e6c792061637469766520706c616e6b746f6e7320636160448201527f6e20706572666f726d207468697320616374696f6e2e000000000000000000006064820152608401610934565b6000828152600b6020526040902054829060ff16611e6f5760405162461bcd60e51b815260206004820152603e60248201527f436f6c6f6e793a205468697320616374696f6e2063616e206f6e6c792062652060448201527f706572666f726d6564206f6e20616e20616374697665207265776172642e00006064820152608401610934565b6000838152600b602052604090205460ff16611ef35760405162461bcd60e51b815260206004820152602660248201527f436f6c6f6e793a20526577617264206973206e6f206c6f6e67657220636c616960448201527f6d61626c652e00000000000000000000000000000000000000000000000000006064820152608401610934565b601282604051611f039190612f68565b90815260408051602092819003830190206000868152925290205460ff16611f935760405162461bcd60e51b815260206004820152602b60248201527f436f6c6f6e793a20526577617264206e6f74206173736f63696174656420776960448201527f74682070726f6a6563742e0000000000000000000000000000000000000000006064820152608401610934565b33600090815260136020526040908190209051611fc99190611fb6908590612f68565b9081526020016040518091039020612819565b600e83604051611fd99190612f68565b90815260200160405180910390205411156120415760405162461bcd60e51b815260206004820152602260248201527f436f6c6f6e793a20696e73756666696369656e7420636f6e747269627574696f604482015261371760f11b6064820152608401610934565b336000818152600f602090815260408083208054600181810183559185528385200188905593835260108252808320805494850181558352918190209092018590558051808201909152601c81527f52657761726420636c61696d6564207375636365737366756c6c792e00000000918101919091526120c0906127bf565b505050565b60606009805480602002602001604051908101604052809291908181526020016000905b8282101561223f578382906000526020600020906002020160405180604001604052908160008201805461211c90612df1565b80601f016020809104026020016040519081016040528092919081815260200182805461214890612df1565b80156121955780601f1061216a57610100808354040283529160200191612195565b820191906000526020600020905b81548152906001019060200180831161217857829003601f168201915b505050505081526020016001820180546121ae90612df1565b80601f01602080910402602001604051908101604052809291908181526020018280546121da90612df1565b80156122275780601f106121fc57610100808354040283529160200191612227565b820191906000526020600020905b81548152906001019060200180831161220a57829003601f168201915b505050505081525050815260200190600101906120e9565b50505050905090565b336000908152600d602052604090205460609060ff166122d05760405162461bcd60e51b815260206004820152603660248201527f436f6c6f6e793a204f6e6c792061637469766520706c616e6b746f6e7320636160448201527f6e20706572666f726d207468697320616374696f6e2e000000000000000000006064820152608401610934565b336000908152601060209081526040918290208054835181840281018401909452808452909183018282801561232557602002820191906000526020600020905b815481526020019060010190808311612311575b5050505050905090565b60606008805480602002602001604051908101604052809291908181526020016000905b8282101561223f57600084815260209081902060408051808401909152908401546001600160a01b03168152825260019092019101612353565b600054600160b01b900460ff16156123f05760405162461bcd60e51b8152602060048201526032602482015260008051602061305683398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610934565b6000546001600160a01b031633146124505760405162461bcd60e51b815260206004820152602f602482015260008051602061303683398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610934565b81600e826040516124619190612f68565b908152602001604051809103902081905550611d60604051806060016040528060328152602001613004603291396127bf565b6008818154811061185957600080fd5b336000908152600d602052604090205460609060ff1661252c5760405162461bcd60e51b815260206004820152603660248201527f436f6c6f6e793a204f6e6c792061637469766520706c616e6b746f6e7320636160448201527f6e20706572666f726d207468697320616374696f6e2e000000000000000000006064820152608401610934565b336000908152600f6020908152604091829020805483518184028101840190945280845290918301828280156123255760200282019190600052602060002090815481526020019060010190808311612311575050505050905090565b815160208184018101805160118252928201918501919091209190528054829081106109cc57600080fd5b600054600160b01b900460ff16156126175760405162461bcd60e51b8152602060048201526032602482015260008051602061305683398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610934565b6000546001600160a01b031633146126775760405162461bcd60e51b815260206004820152602f602482015260008051602061303683398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610934565b6000818152600b602052604090205460ff166126fb5760405162461bcd60e51b815260206004820152603c60248201527f436f6c6f6e793a2072657761726420646561637469766174696f6e206661696c60448201527f65642073696e63652072657761726420697320696e6163746976652e000000006064820152608401610934565b6000818152600b60205260408120805460ff19169055600580549161271f83612f84565b9190505550610db06040518060400160405280602081526020017f526577617264206465616374697661746564207375636365737366756c6c792e8152506127bf565b6060600a805480602002602001604051908101604052809291908181526020016000908282101561223f57600084815260209081902060408051808401909152908401546001600160a01b03168152825260019092019101612353565b7fd24275ad1510852f638f0106b2ee573e94217b50a4b0c9bd3861278c341cda256001826040516127f1929190612f9d565b60405180910390a150565b8254600090819061280e908590612f4f565b909211949350505050565b60008060005b835481101561291957600084828154811061283c5761283c612fb8565b90600052602060002090600202016040518060400160405290816000820154815260200160018201805461286f90612df1565b80601f016020809104026020016040519081016040528092919081815260200182805461289b90612df1565b80156128e85780601f106128bd576101008083540402835291602001916128e8565b820191906000526020600020905b8154815290600101906020018083116128cb57829003601f168201915b50505050508152505090508060000151836129039190612fce565b925050808061291190612f84565b91505061281f565b5092915050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261294757600080fd5b813567ffffffffffffffff8082111561296257612962612920565b604051601f8301601f19908116603f0116810190828211818310171561298a5761298a612920565b816040528381528660208588010111156129a357600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156129d557600080fd5b813567ffffffffffffffff8111156129ec57600080fd5b6129f884828501612936565b949350505050565b80356001600160a01b0381168114612a1757600080fd5b919050565b60008060408385031215612a2f57600080fd5b612a3883612a00565b946020939093013593505050565b600080600060608486031215612a5b57600080fd5b612a6484612a00565b9250602084013567ffffffffffffffff811115612a8057600080fd5b612a8c86828701612936565b925050604084013590509250925092565b60005b83811015612ab8578181015183820152602001612aa0565b50506000910152565b60008151808452612ad9816020860160208601612a9d565b601f01601f19169290920160200192915050565b8281526040602082015260006129f86040830184612ac1565b600080600060608486031215612b1b57600080fd5b833567ffffffffffffffff80821115612b3357600080fd5b612b3f87838801612936565b94506020860135915080821115612b5557600080fd5b612b6187838801612936565b93506040860135915080821115612b7757600080fd5b50612b8486828701612936565b9150509250925092565b600060208284031215612ba057600080fd5b612ba982612a00565b9392505050565b600060208284031215612bc257600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015612c0157835183529284019291840191600101612be5565b50909695505050505050565b602081526000612ba96020830184612ac1565b604081526000612c336040830185612ac1565b8281036020840152612c458185612ac1565b95945050505050565b600080600060608486031215612c6357600080fd5b833567ffffffffffffffff811115612c7a57600080fd5b612c8686828701612936565b9660208601359650604090950135949350505050565b60008060408385031215612caf57600080fd5b82359150602083013567ffffffffffffffff811115612ccd57600080fd5b612cd985828601612936565b9150509250929050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612d5a57888303603f1901855281518051878552612d2e88860182612ac1565b91890151858303868b0152919050612d468183612ac1565b968901969450505090860190600101612d0a565b509098975050505050505050565b60008060408385031215612d7b57600080fd5b823567ffffffffffffffff811115612d9257600080fd5b612d9e85828601612936565b95602094909401359450505050565b6020808252825182820181905260009190848201906040850190845b81811015612c01578351516001600160a01b0316835260208301938501939250600101612dc9565b600181811c90821680612e0557607f821691505b602082108103612e2557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156120c057600081815260208120601f850160051c81016020861015612e525750805b601f850160051c820191505b81811015612e7157828155600101612e5e565b505050505050565b815167ffffffffffffffff811115612e9357612e93612920565b612ea781612ea18454612df1565b84612e2b565b602080601f831160018114612edc5760008415612ec45750858301515b600019600386901b1c1916600185901b178555612e71565b600085815260208120601f198616915b82811015612f0b57888601518255948401946001909101908401612eec565b5085821015612f295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b81810381811115612f6257612f62612f39565b92915050565b60008251612f7a818460208701612a9d565b9190910192915050565b600060018201612f9657612f96612f39565b5060010190565b82151581526040602082015260006129f86040830184612ac1565b634e487b7160e01b600052603260045260246000fd5b80820180821115612f6257612f62612f3956fe506c616e6b746f6e206465616374697661746564207375636365737366756c6c792e50726f6a656374206d696e696d756d20636f6e747269627574696f6e20646566696e6564207375636365737366756c6c792e436f6c6f6e793a204f6e6c792074686520706f6c79702063616e20706572666f4d6f6469666961626c653a20546869732073797374656d2063616e206e6f206ca164736f6c6343000811000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1193,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1221,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "isFinal",
        "offset": 22,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1246,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "stopped",
        "offset": 23,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 491,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "maxPlanktons",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 493,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "maxZooxes",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 495,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "totalInactivePlanktons",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 497,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "totalInactiveZooxes",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 499,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "totalInactiveRewards",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 501,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "maxInstalmentsPerPlankton",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 503,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "colonyName",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 507,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_planktons",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Plankton)1176_storage)dyn_storage"
      },
      {
        "astId": 511,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_rewards",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Reward)1183_storage)dyn_storage"
      },
      {
        "astId": 515,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_zooxes",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Zoox)1188_storage)dyn_storage"
      },
      {
        "astId": 519,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "rewardIsActive",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 523,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "zooxIsActive",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 527,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "planktonIsActive",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 531,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "minContributionPerProject",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 536,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_claimed",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 541,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_assigned",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 546,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_projectRewards",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 552,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_activeProjectRewards",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 560,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_planktonContributions",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_array(t_struct(Contribution)1171_storage)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Contribution)1171_storage)dyn_storage": {
        "base": "t_struct(Contribution)1171_storage",
        "encoding": "dynamic_array",
        "label": "struct Contribution[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Plankton)1176_storage)dyn_storage": {
        "base": "t_struct(Plankton)1176_storage",
        "encoding": "dynamic_array",
        "label": "struct Plankton[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Reward)1183_storage)dyn_storage": {
        "base": "t_struct(Reward)1183_storage",
        "encoding": "dynamic_array",
        "label": "struct Reward[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Zoox)1188_storage)dyn_storage": {
        "base": "t_struct(Zoox)1188_storage",
        "encoding": "dynamic_array",
        "label": "struct Zoox[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_array(t_struct(Contribution)1171_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => struct Contribution[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_array(t_struct(Contribution)1171_storage)dyn_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(Contribution)1171_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Contribution[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Contribution)1171_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Contribution)1171_storage": {
        "encoding": "inplace",
        "label": "struct Contribution",
        "members": [
          {
            "astId": 1168,
            "contract": "contracts/colony/Colony.sol:Colony",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1170,
            "contract": "contracts/colony/Colony.sol:Colony",
            "label": "projectId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Plankton)1176_storage": {
        "encoding": "inplace",
        "label": "struct Plankton",
        "members": [
          {
            "astId": 1175,
            "contract": "contracts/colony/Colony.sol:Colony",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Reward)1183_storage": {
        "encoding": "inplace",
        "label": "struct Reward",
        "members": [
          {
            "astId": 1180,
            "contract": "contracts/colony/Colony.sol:Colony",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1182,
            "contract": "contracts/colony/Colony.sol:Colony",
            "label": "location",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Zoox)1188_storage": {
        "encoding": "inplace",
        "label": "struct Zoox",
        "members": [
          {
            "astId": 1187,
            "contract": "contracts/colony/Colony.sol:Colony",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}