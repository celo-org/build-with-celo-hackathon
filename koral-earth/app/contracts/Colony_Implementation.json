{
  "address": "0x8Bfe44d62978647f85D23a3E722272fae988c44f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "statement",
          "type": "string"
        }
      ],
      "name": "ActionDone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_planktons",
      "outputs": [
        {
          "internalType": "address",
          "name": "id",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rewards",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_zooxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "id",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "plankton",
          "type": "address"
        }
      ],
      "name": "addPlankton",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_location",
          "type": "string"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zoox",
          "type": "address"
        }
      ],
      "name": "addZoox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assigned",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planktonId",
          "type": "uint256"
        }
      ],
      "name": "deactivatePlankton",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        }
      ],
      "name": "deactivateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "zooxId",
          "type": "uint256"
        }
      ],
      "name": "deactivateZoox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_maxPlanktons",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxZooxes",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPlanktons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxZooxes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "planktons",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            }
          ],
          "internalType": "struct Koral.Plankton[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polyp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resume",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            }
          ],
          "internalType": "struct Koral.Reward[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPlanktons",
          "type": "uint256"
        }
      ],
      "name": "setMaxPlanktons",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxZooxes",
          "type": "uint256"
        }
      ],
      "name": "setMaxZooxes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_polyp",
          "type": "address"
        }
      ],
      "name": "setPolyp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopped",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInactivePlanktons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInactiveRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInactiveZooxes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zooxes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            }
          ],
          "internalType": "struct Koral.Zoox[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x181255c9b23ae9f7d5a4d1451e27c6e44cc6775af1a5a52c7a2de9247a94700d",
  "receipt": {
    "to": null,
    "from": "0x4A94B66910404Fcb39Aa70e8526291E7d983d43E",
    "contractAddress": "0x8Bfe44d62978647f85D23a3E722272fae988c44f",
    "transactionIndex": 0,
    "gasUsed": "1815692",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9283584ebbe4c5f0b4a574f970f08565471d237b4e88860bafd69246c31ad844",
    "transactionHash": "0x181255c9b23ae9f7d5a4d1451e27c6e44cc6775af1a5a52c7a2de9247a94700d",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "1815692",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d746472bcb2112de10ba996d6341ea78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"statement\",\"type\":\"string\"}],\"name\":\"ActionDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_planktons\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rewards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_zooxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"plankton\",\"type\":\"address\"}],\"name\":\"addPlankton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_location\",\"type\":\"string\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zoox\",\"type\":\"address\"}],\"name\":\"addZoox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assigned\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planktonId\",\"type\":\"uint256\"}],\"name\":\"deactivatePlankton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"deactivateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zooxId\",\"type\":\"uint256\"}],\"name\":\"deactivateZoox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxPlanktons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxZooxes\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPlanktons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxZooxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planktons\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"internalType\":\"struct Koral.Plankton[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polyp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"internalType\":\"struct Koral.Reward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPlanktons\",\"type\":\"uint256\"}],\"name\":\"setMaxPlanktons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxZooxes\",\"type\":\"uint256\"}],\"name\":\"setMaxZooxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_polyp\",\"type\":\"address\"}],\"name\":\"setPolyp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInactivePlanktons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInactiveRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInactiveZooxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zooxes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"internalType\":\"struct Koral.Zoox[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/colony/Colony.sol\":\"Colony\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"contracts/colony/Colony.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\n// This smart contract is for demo purposes only\\n// The protocol is still a WIP and this was made to show basic ideas using a smart contract\\n// Specifically, this contract intentionally omits the implementation of the \\n// rules definition & plankton accomplishment tracker - an essential part of the protocol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../shared/access/Administrable.sol\\\";\\nimport \\\"../shared/access/Modifiable.sol\\\";\\nimport \\\"../shared/access/Stoppable.sol\\\";\\nimport \\\"../shared/events/EmitsEvent.sol\\\";\\nimport \\\"../shared/libs/Koral.sol\\\";\\n\\ncontract Colony is Administrable, EmitsEvent, Initializable, Modifiable, Stoppable {\\n  using Koral for Koral.Plankton[];\\n  using Koral for Koral.Reward[];\\n  using Koral for Koral.Zoox[];\\n\\n  uint public maxPlanktons;\\n  uint public maxZooxes;\\n  uint public totalInactivePlanktons;\\n  uint public totalInactiveZooxes;\\n  uint public totalInactiveRewards;\\n  string public name;\\n  \\n  Koral.Plankton[] public _planktons;\\n  Koral.Reward[] public _rewards;\\n  Koral.Zoox[] public _zooxes;\\n\\n  mapping(uint => bool) zooxIsActive;\\n  mapping(uint => bool) planktonIsActive;\\n  mapping(uint => bool) rewardIsActive;\\n\\n  mapping(uint => Koral.Reward) public claimed;\\n  mapping(uint => Koral.Reward) public assigned;\\n\\n  modifier isPolyp {\\n    require(isAdmin(), \\\"Colony: Only the polyp can perform this action.\\\"); _;\\n  }\\n\\n  function initialize(string memory _name, uint _maxPlanktons, uint _maxZooxes) public initializer {\\n    assignNewAdmin(msg.sender);\\n    name = _name;\\n    maxPlanktons = _maxPlanktons;\\n    maxZooxes = _maxZooxes;\\n  }\\n\\n  function launch() public isPolyp {\\n    makeFinal();\\n    emitActionSuccess(\\\"Colony launched successfully.\\\");\\n  }\\n\\n  function addReward(string memory _name, string memory _location) public isModifiable isPolyp {\\n    _rewards.push(\\n      Koral.Reward(_name, _location)\\n    );\\n\\n    rewardIsActive[_rewards.length - 1] = true;\\n\\n    emitActionSuccess(\\\"Reward added successfully.\\\");\\n  }\\n\\n  function deactivateReward(uint rewardId) public isModifiable isPolyp {\\n    require(rewardIsActive[rewardId], \\\"Colony: reward deactivation failed since reward is inactive.\\\");\\n\\n    rewardIsActive[rewardId] = false;\\n    totalInactiveRewards++;\\n\\n    emitActionSuccess(\\\"Reward deactivated successfully.\\\");\\n  }\\n\\n  function addZoox(address zoox) public isModifiable isPolyp {\\n    require(_zooxes.canAcceptMoreZooxes(totalInactiveZooxes, maxZooxes), \\\"Colony: can't add any more zooxes\\\");\\n\\n    _zooxes.push(\\n      Koral.Zoox(zoox)\\n    );\\n\\n    zooxIsActive[_zooxes.length - 1] = true;\\n    \\n    emitActionSuccess(\\\"Zoox added successfully.\\\");\\n  }\\n\\n  function deactivateZoox(uint zooxId) public isModifiable isPolyp {\\n    require(zooxIsActive[zooxId], \\\"Colony: reward deactivation failed since zoox is inactive.\\\");\\n\\n    zooxIsActive[zooxId] = false;\\n    totalInactiveZooxes++;\\n\\n    emitActionSuccess(\\\"Zoox deactivated successfully.\\\");\\n  }\\n\\n  function addPlankton(address plankton) public isModifiable isPolyp {\\n    require(_planktons.canAcceptMorePlanktons(totalInactivePlanktons, maxPlanktons), \\\"Colony: can't add any more planktons\\\");\\n\\n    _planktons.push(\\n      Koral.Plankton(plankton)\\n    );\\n\\n    planktonIsActive[_planktons.length - 1] = true;\\n\\n    emitActionSuccess(\\\"Plankton added successfully.\\\");\\n  }\\n\\n  function deactivatePlankton(uint planktonId) public isModifiable isPolyp {\\n    require(planktonIsActive[planktonId], \\\"Colony: reward deactivation failed since plankton is inactive.\\\");\\n\\n    planktonIsActive[planktonId] = false;\\n    totalInactivePlanktons++;\\n\\n    emitActionSuccess(\\\"Plankton deactivated successfully.\\\");\\n  }\\n\\n  function setPolyp(address _polyp) public isModifiable isPolyp  {\\n    assignNewAdmin(_polyp);\\n  }\\n\\n  function setName(string memory _name) public isModifiable isPolyp {\\n    name = _name;\\n  }\\n\\n  function setMaxPlanktons(uint _maxPlanktons) public isModifiable isPolyp {\\n    bool isValidMaxPlantons = _maxPlanktons >= (_planktons.length - totalInactivePlanktons);\\n\\n    require(isValidMaxPlantons, \\\"Colony: maxPlanktons must not be less than the existing active planktons\\\");\\n\\n    maxPlanktons = _maxPlanktons;\\n  }\\n\\n  function setMaxZooxes(uint _maxZooxes) public isModifiable isPolyp {\\n    bool isValidMaxZooxes = _maxZooxes >= (_zooxes.length - totalInactiveZooxes);\\n\\n    require(isValidMaxZooxes, \\\"Colony: maxZooxes must not be less than the existing active zooxes\\\");\\n\\n    maxZooxes = _maxZooxes;\\n  }\\n\\n  function polyp() view public returns (address) {\\n    return admin;\\n  }\\n\\n  function rewards() view public returns (Koral.Reward[] memory) {\\n    return _rewards;\\n  }\\n\\n  function zooxes() view public returns (Koral.Zoox[] memory) {\\n    return _zooxes;\\n  }\\n\\n  function planktons() view public returns (Koral.Plankton[] memory) {\\n    return _planktons;\\n  }\\n}\",\"keccak256\":\"0x35f94ca2b276448ef1db0487bf58ca614ab9f1d3ca66d64478aff82781441478\",\"license\":\"GPLv3\"},\"contracts/shared/access/Administrable.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Administrable\\n * @dev This guarantees administration power to the system that inherits this contract\\n */\\nabstract contract Administrable {\\n  \\n  address internal admin;\\n\\n  function isAdmin() internal view returns (bool)  {\\n    return msg.sender == admin;\\n  }\\n  \\n  function assignNewAdmin(address _admin) internal {\\n    admin = _admin;\\n  }\\n}\\n\",\"keccak256\":\"0x0a0ce8e205fa5e0767b5d606e61d2bc2b977f90d1f3dd8277b376d33d0b98790\",\"license\":\"GPLv3\"},\"contracts/shared/access/Modifiable.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interactable\\n * @dev This guarantees the terms of modifiability of a system that inherits this contract\\n */\\nabstract contract Modifiable {\\n  \\n  bool internal isFinal = false;\\n\\n  modifier isModifiable {\\n    require(!isFinal, \\\"Modifiable: This system can no longer be modified.\\\"); _;\\n  } \\n\\n  function makeFinal() internal {\\n    isFinal = true;\\n  }\\n}\\n\",\"keccak256\":\"0x89c8b7be6251872357a0f4555d0b47c51bba58566566bcf1c0c51afbabc450d6\",\"license\":\"GPLv3\"},\"contracts/shared/access/Stoppable.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Stoppable\\n * @dev This provides a contract with the ability to be stopped\\n */\\nabstract contract Stoppable {\\n  \\n  bool public stopped = false;\\n  \\n  modifier stopInEmergency { if (!stopped) _; }\\n\\n  modifier onlyInEmergency { if (stopped) _; }\\n\\n  function stop() public {\\n    stopped = true;\\n  }\\n\\n  function resume() public {\\n    stopped = false;\\n  }\\n}\\n\",\"keccak256\":\"0xb5a4290b532583f5d042e039fe5471a612c5369dcb4722bc1f3eb91473b237b9\",\"license\":\"GPLv3\"},\"contracts/shared/events/EmitsEvent.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title EmitsEvent\\n * @dev contract to hold all the events that we emit\\n */\\nabstract contract EmitsEvent {\\n  \\n  event ActionDone(bool status, string statement);\\n\\n  function emitActionSuccess(string memory statement) internal\\n  {\\n    emit ActionDone(true, statement);\\n  }\\n\\n  function emitActionFailure(string memory statement) internal\\n  {\\n    emit ActionDone(false, statement);\\n  } \\n}\\n\",\"keccak256\":\"0x40ceb14f9736998ccd66bfffac7707a15a4cd85c66c077123698241320321ad4\",\"license\":\"GPLv3\"},\"contracts/shared/libs/Koral.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n// koral.earth smart contracts\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Koral {\\n  struct Plankton {\\n    address id;\\n  }\\n\\n  struct Zoox {\\n    address id;\\n  }\\n  \\n  struct Reward {\\n    string name;\\n    string location;\\n  }\\n\\n  function canAcceptMorePlanktons(Plankton[] storage planktons, uint inactivePlanktons, uint maxPlanktonsAllowed) internal view returns (bool) {\\n    uint totalActivePlanktons = planktons.length - inactivePlanktons;\\n    return totalActivePlanktons < maxPlanktonsAllowed;\\n  }\\n\\n  function canAcceptMoreZooxes(Zoox[] storage zooxes, uint inactiveZooxes, uint maxZooxesAllowed) internal view returns (bool) {\\n    uint totalActiveZooxes = zooxes.length - inactiveZooxes;\\n    return totalActiveZooxes < maxZooxesAllowed;\\n  }\\n}\",\"keccak256\":\"0xf87a915d4fc9b51b5af7b4eb9ad4a017909f1a3878c243360edd93957883e3ab\",\"license\":\"GPLv3\"}},\"version\":1}",
  "bytecode": "0x60806040526000805461ffff60b01b1916905534801561001e57600080fd5b50611fdc8061002e6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80639701c78911610104578063d3658823116100a2578063ec2cc06511610071578063ec2cc065146103fe578063ee8998e414610406578063f842696c1461040f578063fdf5d34d1461042057600080fd5b8063d3658823146103b2578063d4633698146103c5578063dbe7e3bd146103d8578063eabdc5b4146103eb57600080fd5b8063b4550b00116100de578063b4550b001461036e578063c47f002714610383578063cf2b7d9b14610396578063d2d890cb1461039f57600080fd5b80639701c78914610333578063977d08c0146103465780639ec5a8941461035957600080fd5b80632669f2131161017c57806375f12b211161014b57806375f12b21146102b057806384133d4a146102d45780638f1e9405146102ff57806393b170431461032057600080fd5b80632669f2131461026e5780632695a9b414610281578063431eef651461028a5780634bdf28971461029d57600080fd5b806307da68f5116101b857806307da68f5146102195780630c4775321461023157806311b490d61461024857806311fd19571461025b57600080fd5b806301339c21146101df578063046f7da2146101e957806306fdde03146101fb575b600080fd5b6101e7610429565b005b6101e76000805460ff60b81b19169055565b610203610501565b6040516102109190611ad0565b60405180910390f35b6101e76000805460ff60b81b1916600160b81b179055565b61023a60025481565b604051908152602001610210565b6101e7610256366004611aea565b61058f565b6101e7610269366004611b13565b610673565b6101e761027c366004611aea565b6107d1565b61023a60055481565b6101e7610298366004611b13565b6109d5565b6101e76102ab366004611b13565b610b83565b6000546102c490600160b81b900460ff1681565b6040519015158152602001610210565b6102e76102e2366004611b13565b610cfc565b6040516001600160a01b039091168152602001610210565b61031261030d366004611b13565b610d26565b604051610210929190611b2c565b6101e761032e366004611aea565b610e6a565b610312610341366004611b13565b611070565b6101e7610354366004611bfd565b61108b565b610361611205565b6040516102109190611c4b565b610376611388565b6040516102109190611cd0565b6101e7610391366004611d20565b6113e6565b61023a60015481565b6102e76103ad366004611b13565b6114b9565b6101e76103c0366004611b13565b6114c9565b6101e76103d3366004611d5d565b61165a565b6103126103e6366004611b13565b61180a565b6101e76103f9366004611b13565b611825565b6103766119d3565b61023a60045481565b6000546001600160a01b03166102e7565b61023a60035481565b6000546001600160a01b0316331461048e5760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b60648201526084015b60405180910390fd5b6104c1600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b179055565b6104ff6040518060400160405280601d81526020017f436f6c6f6e79206c61756e63686564207375636365737366756c6c792e000000815250611a30565b565b6006805461050e90611dc1565b80601f016020809104026020016040519081016040528092919081815260200182805461053a90611dc1565b80156105875780601f1061055c57610100808354040283529160200191610587565b820191906000526020600020905b81548152906001019060200180831161056a57829003601f168201915b505050505081565b600054600160b01b900460ff16156105f25760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b031633146106525760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b600080546001600160a01b0319166001600160a01b03831617905550565b50565b600054600160b01b900460ff16156106d65760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b031633146107365760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b60045460095460009161074891611e11565b8210159050806107cb5760405162461bcd60e51b815260206004820152604260248201527f436f6c6f6e793a206d61785a6f6f786573206d757374206e6f74206265206c6560448201527f7373207468616e20746865206578697374696e6720616374697665207a6f6f78606482015261657360f01b608482015260a401610485565b50600255565b600054600160b01b900460ff16156108345760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b031633146108945760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b6004546002546108a691600991611a6d565b6108fc5760405162461bcd60e51b815260206004820152602160248201527f436f6c6f6e793a2063616e27742061646420616e79206d6f7265207a6f6f78656044820152607360f81b6064820152608401610485565b60408051602081019091526001600160a01b0382811682526009805460018082018355600083815294517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90920180546001600160a01b0319169290941691909117909255549091600a91610972908490611e11565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506106706040518060400160405280601881526020017f5a6f6f78206164646564207375636365737366756c6c792e0000000000000000815250611a30565b600054600160b01b900460ff1615610a385760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b03163314610a985760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b6000818152600a602052604090205460ff16610b1c5760405162461bcd60e51b815260206004820152603a60248201527f436f6c6f6e793a2072657761726420646561637469766174696f6e206661696c60448201527f65642073696e6365207a6f6f7820697320696e6163746976652e0000000000006064820152608401610485565b6000818152600a60205260408120805460ff191690556004805491610b4083611e2a565b91905055506106706040518060400160405280601e81526020017f5a6f6f78206465616374697661746564207375636365737366756c6c792e0000815250611a30565b600054600160b01b900460ff1615610be65760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b03163314610c465760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b600354600754600091610c5891611e11565b821015905080610cf65760405162461bcd60e51b815260206004820152604860248201527f436f6c6f6e793a206d6178506c616e6b746f6e73206d757374206e6f7420626560448201527f206c657373207468616e20746865206578697374696e6720616374697665207060648201527f6c616e6b746f6e73000000000000000000000000000000000000000000000000608482015260a401610485565b50600155565b60098181548110610d0c57600080fd5b6000918252602090912001546001600160a01b0316905081565b60088181548110610d3657600080fd5b9060005260206000209060020201600091509050806000018054610d5990611dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8590611dc1565b8015610dd25780601f10610da757610100808354040283529160200191610dd2565b820191906000526020600020905b815481529060010190602001808311610db557829003601f168201915b505050505090806001018054610de790611dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1390611dc1565b8015610e605780601f10610e3557610100808354040283529160200191610e60565b820191906000526020600020905b815481529060010190602001808311610e4357829003601f168201915b5050505050905082565b600054600160b01b900460ff1615610ecd5760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b03163314610f2d5760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b600354600154610f3f91600791611a6d565b610f975760405162461bcd60e51b8152602060048201526024808201527f436f6c6f6e793a2063616e27742061646420616e79206d6f726520706c616e6b604482015263746f6e7360e01b6064820152608401610485565b60408051602081019091526001600160a01b0382811682526007805460018082018355600083815294517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890920180546001600160a01b0319169290941691909117909255549091600b9161100d908490611e11565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506106706040518060400160405280601c81526020017f506c616e6b746f6e206164646564207375636365737366756c6c792e00000000815250611a30565b600e60205260009081526040902080548190610d5990611dc1565b600054600160a81b900460ff16158080156110b357506000546001600160a01b90910460ff16105b806110d45750303b1580156110d45750600054600160a01b900460ff166001145b6111465760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610485565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b179055801561118e576000805460ff60a81b1916600160a81b1790555b600080546001600160a01b0319163317905560066111ac8582611e92565b506001839055600282905580156111ff576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60606008805480602002602001604051908101604052809291908181526020016000905b8282101561137f578382906000526020600020906002020160405180604001604052908160008201805461125c90611dc1565b80601f016020809104026020016040519081016040528092919081815260200182805461128890611dc1565b80156112d55780601f106112aa576101008083540402835291602001916112d5565b820191906000526020600020905b8154815290600101906020018083116112b857829003601f168201915b505050505081526020016001820180546112ee90611dc1565b80601f016020809104026020016040519081016040528092919081815260200182805461131a90611dc1565b80156113675780601f1061133c57610100808354040283529160200191611367565b820191906000526020600020905b81548152906001019060200180831161134a57829003601f168201915b50505050508152505081526020019060010190611229565b50505050905090565b60606007805480602002602001604051908101604052809291908181526020016000905b8282101561137f57600084815260209081902060408051808401909152908401546001600160a01b031681528252600190920191016113ac565b600054600160b01b900460ff16156114495760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b031633146114a95760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b60066114b58282611e92565b5050565b60078181548110610d0c57600080fd5b600054600160b01b900460ff161561152c5760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b0316331461158c5760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b6000818152600b602052604090205460ff166116105760405162461bcd60e51b815260206004820152603e60248201527f436f6c6f6e793a2072657761726420646561637469766174696f6e206661696c60448201527f65642073696e636520706c616e6b746f6e20697320696e6163746976652e00006064820152608401610485565b6000818152600b60205260408120805460ff19169055600380549161163483611e2a565b9190505550610670604051806060016040528060228152602001611f6e60229139611a30565b600054600160b01b900460ff16156116bd5760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b0316331461171d5760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b604080518082019091528281526020810182905260088054600181018255600091909152815160029091027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3019081906117779082611e92565b506020820151600182019061178c9082611e92565b5050506001600c600060016008805490506117a79190611e11565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506114b56040518060400160405280601a81526020017f526577617264206164646564207375636365737366756c6c792e000000000000815250611a30565b600d60205260009081526040902080548190610d5990611dc1565b600054600160b01b900460ff16156118885760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b031633146118e85760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b6000818152600c602052604090205460ff1661196c5760405162461bcd60e51b815260206004820152603c60248201527f436f6c6f6e793a2072657761726420646561637469766174696f6e206661696c60448201527f65642073696e63652072657761726420697320696e6163746976652e000000006064820152608401610485565b6000818152600c60205260408120805460ff19169055600580549161199083611e2a565b91905055506106706040518060400160405280602081526020017f526577617264206465616374697661746564207375636365737366756c6c792e815250611a30565b60606009805480602002602001604051908101604052809291908181526020016000908282101561137f57600084815260209081902060408051808401909152908401546001600160a01b031681528252600190920191016113ac565b7fd24275ad1510852f638f0106b2ee573e94217b50a4b0c9bd3861278c341cda25600182604051611a62929190611f52565b60405180910390a150565b82546000908190611a7f908590611e11565b909211949350505050565b6000815180845260005b81811015611ab057602081850181015186830182015201611a94565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611ae36020830184611a8a565b9392505050565b600060208284031215611afc57600080fd5b81356001600160a01b0381168114611ae357600080fd5b600060208284031215611b2557600080fd5b5035919050565b604081526000611b3f6040830185611a8a565b8281036020840152611b518185611a8a565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611b8157600080fd5b813567ffffffffffffffff80821115611b9c57611b9c611b5a565b604051601f8301601f19908116603f01168101908282118183101715611bc457611bc4611b5a565b81604052838152866020858801011115611bdd57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215611c1257600080fd5b833567ffffffffffffffff811115611c2957600080fd5b611c3586828701611b70565b9660208601359650604090950135949350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611cc257888303603f1901855281518051878552611c9688860182611a8a565b91890151858303868b0152919050611cae8183611a8a565b968901969450505090860190600101611c72565b509098975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611d14578351516001600160a01b0316835260208301938501939250600101611cec565b50909695505050505050565b600060208284031215611d3257600080fd5b813567ffffffffffffffff811115611d4957600080fd5b611d5584828501611b70565b949350505050565b60008060408385031215611d7057600080fd5b823567ffffffffffffffff80821115611d8857600080fd5b611d9486838701611b70565b93506020850135915080821115611daa57600080fd5b50611db785828601611b70565b9150509250929050565b600181811c90821680611dd557607f821691505b602082108103611df557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611e2457611e24611dfb565b92915050565b600060018201611e3c57611e3c611dfb565b5060010190565b601f821115611e8d57600081815260208120601f850160051c81016020861015611e6a5750805b601f850160051c820191505b81811015611e8957828155600101611e76565b5050505b505050565b815167ffffffffffffffff811115611eac57611eac611b5a565b611ec081611eba8454611dc1565b84611e43565b602080601f831160018114611ef55760008415611edd5750858301515b600019600386901b1c1916600185901b178555611e89565b600085815260208120601f198616915b82811015611f2457888601518255948401946001909101908401611f05565b5085821015611f425787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8215158152604060208201526000611d556040830184611a8a56fe506c616e6b746f6e206465616374697661746564207375636365737366756c6c792e436f6c6f6e793a204f6e6c792074686520706f6c79702063616e20706572666f4d6f6469666961626c653a20546869732073797374656d2063616e206e6f206ca164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80639701c78911610104578063d3658823116100a2578063ec2cc06511610071578063ec2cc065146103fe578063ee8998e414610406578063f842696c1461040f578063fdf5d34d1461042057600080fd5b8063d3658823146103b2578063d4633698146103c5578063dbe7e3bd146103d8578063eabdc5b4146103eb57600080fd5b8063b4550b00116100de578063b4550b001461036e578063c47f002714610383578063cf2b7d9b14610396578063d2d890cb1461039f57600080fd5b80639701c78914610333578063977d08c0146103465780639ec5a8941461035957600080fd5b80632669f2131161017c57806375f12b211161014b57806375f12b21146102b057806384133d4a146102d45780638f1e9405146102ff57806393b170431461032057600080fd5b80632669f2131461026e5780632695a9b414610281578063431eef651461028a5780634bdf28971461029d57600080fd5b806307da68f5116101b857806307da68f5146102195780630c4775321461023157806311b490d61461024857806311fd19571461025b57600080fd5b806301339c21146101df578063046f7da2146101e957806306fdde03146101fb575b600080fd5b6101e7610429565b005b6101e76000805460ff60b81b19169055565b610203610501565b6040516102109190611ad0565b60405180910390f35b6101e76000805460ff60b81b1916600160b81b179055565b61023a60025481565b604051908152602001610210565b6101e7610256366004611aea565b61058f565b6101e7610269366004611b13565b610673565b6101e761027c366004611aea565b6107d1565b61023a60055481565b6101e7610298366004611b13565b6109d5565b6101e76102ab366004611b13565b610b83565b6000546102c490600160b81b900460ff1681565b6040519015158152602001610210565b6102e76102e2366004611b13565b610cfc565b6040516001600160a01b039091168152602001610210565b61031261030d366004611b13565b610d26565b604051610210929190611b2c565b6101e761032e366004611aea565b610e6a565b610312610341366004611b13565b611070565b6101e7610354366004611bfd565b61108b565b610361611205565b6040516102109190611c4b565b610376611388565b6040516102109190611cd0565b6101e7610391366004611d20565b6113e6565b61023a60015481565b6102e76103ad366004611b13565b6114b9565b6101e76103c0366004611b13565b6114c9565b6101e76103d3366004611d5d565b61165a565b6103126103e6366004611b13565b61180a565b6101e76103f9366004611b13565b611825565b6103766119d3565b61023a60045481565b6000546001600160a01b03166102e7565b61023a60035481565b6000546001600160a01b0316331461048e5760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b60648201526084015b60405180910390fd5b6104c1600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b179055565b6104ff6040518060400160405280601d81526020017f436f6c6f6e79206c61756e63686564207375636365737366756c6c792e000000815250611a30565b565b6006805461050e90611dc1565b80601f016020809104026020016040519081016040528092919081815260200182805461053a90611dc1565b80156105875780601f1061055c57610100808354040283529160200191610587565b820191906000526020600020905b81548152906001019060200180831161056a57829003601f168201915b505050505081565b600054600160b01b900460ff16156105f25760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b031633146106525760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b600080546001600160a01b0319166001600160a01b03831617905550565b50565b600054600160b01b900460ff16156106d65760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b031633146107365760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b60045460095460009161074891611e11565b8210159050806107cb5760405162461bcd60e51b815260206004820152604260248201527f436f6c6f6e793a206d61785a6f6f786573206d757374206e6f74206265206c6560448201527f7373207468616e20746865206578697374696e6720616374697665207a6f6f78606482015261657360f01b608482015260a401610485565b50600255565b600054600160b01b900460ff16156108345760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b031633146108945760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b6004546002546108a691600991611a6d565b6108fc5760405162461bcd60e51b815260206004820152602160248201527f436f6c6f6e793a2063616e27742061646420616e79206d6f7265207a6f6f78656044820152607360f81b6064820152608401610485565b60408051602081019091526001600160a01b0382811682526009805460018082018355600083815294517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90920180546001600160a01b0319169290941691909117909255549091600a91610972908490611e11565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506106706040518060400160405280601881526020017f5a6f6f78206164646564207375636365737366756c6c792e0000000000000000815250611a30565b600054600160b01b900460ff1615610a385760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b03163314610a985760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b6000818152600a602052604090205460ff16610b1c5760405162461bcd60e51b815260206004820152603a60248201527f436f6c6f6e793a2072657761726420646561637469766174696f6e206661696c60448201527f65642073696e6365207a6f6f7820697320696e6163746976652e0000000000006064820152608401610485565b6000818152600a60205260408120805460ff191690556004805491610b4083611e2a565b91905055506106706040518060400160405280601e81526020017f5a6f6f78206465616374697661746564207375636365737366756c6c792e0000815250611a30565b600054600160b01b900460ff1615610be65760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b03163314610c465760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b600354600754600091610c5891611e11565b821015905080610cf65760405162461bcd60e51b815260206004820152604860248201527f436f6c6f6e793a206d6178506c616e6b746f6e73206d757374206e6f7420626560448201527f206c657373207468616e20746865206578697374696e6720616374697665207060648201527f6c616e6b746f6e73000000000000000000000000000000000000000000000000608482015260a401610485565b50600155565b60098181548110610d0c57600080fd5b6000918252602090912001546001600160a01b0316905081565b60088181548110610d3657600080fd5b9060005260206000209060020201600091509050806000018054610d5990611dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8590611dc1565b8015610dd25780601f10610da757610100808354040283529160200191610dd2565b820191906000526020600020905b815481529060010190602001808311610db557829003601f168201915b505050505090806001018054610de790611dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1390611dc1565b8015610e605780601f10610e3557610100808354040283529160200191610e60565b820191906000526020600020905b815481529060010190602001808311610e4357829003601f168201915b5050505050905082565b600054600160b01b900460ff1615610ecd5760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b03163314610f2d5760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b600354600154610f3f91600791611a6d565b610f975760405162461bcd60e51b8152602060048201526024808201527f436f6c6f6e793a2063616e27742061646420616e79206d6f726520706c616e6b604482015263746f6e7360e01b6064820152608401610485565b60408051602081019091526001600160a01b0382811682526007805460018082018355600083815294517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890920180546001600160a01b0319169290941691909117909255549091600b9161100d908490611e11565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506106706040518060400160405280601c81526020017f506c616e6b746f6e206164646564207375636365737366756c6c792e00000000815250611a30565b600e60205260009081526040902080548190610d5990611dc1565b600054600160a81b900460ff16158080156110b357506000546001600160a01b90910460ff16105b806110d45750303b1580156110d45750600054600160a01b900460ff166001145b6111465760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610485565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b179055801561118e576000805460ff60a81b1916600160a81b1790555b600080546001600160a01b0319163317905560066111ac8582611e92565b506001839055600282905580156111ff576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60606008805480602002602001604051908101604052809291908181526020016000905b8282101561137f578382906000526020600020906002020160405180604001604052908160008201805461125c90611dc1565b80601f016020809104026020016040519081016040528092919081815260200182805461128890611dc1565b80156112d55780601f106112aa576101008083540402835291602001916112d5565b820191906000526020600020905b8154815290600101906020018083116112b857829003601f168201915b505050505081526020016001820180546112ee90611dc1565b80601f016020809104026020016040519081016040528092919081815260200182805461131a90611dc1565b80156113675780601f1061133c57610100808354040283529160200191611367565b820191906000526020600020905b81548152906001019060200180831161134a57829003601f168201915b50505050508152505081526020019060010190611229565b50505050905090565b60606007805480602002602001604051908101604052809291908181526020016000905b8282101561137f57600084815260209081902060408051808401909152908401546001600160a01b031681528252600190920191016113ac565b600054600160b01b900460ff16156114495760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b031633146114a95760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b60066114b58282611e92565b5050565b60078181548110610d0c57600080fd5b600054600160b01b900460ff161561152c5760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b0316331461158c5760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b6000818152600b602052604090205460ff166116105760405162461bcd60e51b815260206004820152603e60248201527f436f6c6f6e793a2072657761726420646561637469766174696f6e206661696c60448201527f65642073696e636520706c616e6b746f6e20697320696e6163746976652e00006064820152608401610485565b6000818152600b60205260408120805460ff19169055600380549161163483611e2a565b9190505550610670604051806060016040528060228152602001611f6e60229139611a30565b600054600160b01b900460ff16156116bd5760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b0316331461171d5760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b604080518082019091528281526020810182905260088054600181018255600091909152815160029091027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3019081906117779082611e92565b506020820151600182019061178c9082611e92565b5050506001600c600060016008805490506117a79190611e11565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506114b56040518060400160405280601a81526020017f526577617264206164646564207375636365737366756c6c792e000000000000815250611a30565b600d60205260009081526040902080548190610d5990611dc1565b600054600160b01b900460ff16156118885760405162461bcd60e51b81526020600482015260326024820152600080516020611fb083398151915260448201527137b733b2b91031329036b7b234b334b2b21760711b6064820152608401610485565b6000546001600160a01b031633146118e85760405162461bcd60e51b815260206004820152602f6024820152600080516020611f9083398151915260448201526e3936903a3434b99030b1ba34b7b71760891b6064820152608401610485565b6000818152600c602052604090205460ff1661196c5760405162461bcd60e51b815260206004820152603c60248201527f436f6c6f6e793a2072657761726420646561637469766174696f6e206661696c60448201527f65642073696e63652072657761726420697320696e6163746976652e000000006064820152608401610485565b6000818152600c60205260408120805460ff19169055600580549161199083611e2a565b91905055506106706040518060400160405280602081526020017f526577617264206465616374697661746564207375636365737366756c6c792e815250611a30565b60606009805480602002602001604051908101604052809291908181526020016000908282101561137f57600084815260209081902060408051808401909152908401546001600160a01b031681528252600190920191016113ac565b7fd24275ad1510852f638f0106b2ee573e94217b50a4b0c9bd3861278c341cda25600182604051611a62929190611f52565b60405180910390a150565b82546000908190611a7f908590611e11565b909211949350505050565b6000815180845260005b81811015611ab057602081850181015186830182015201611a94565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611ae36020830184611a8a565b9392505050565b600060208284031215611afc57600080fd5b81356001600160a01b0381168114611ae357600080fd5b600060208284031215611b2557600080fd5b5035919050565b604081526000611b3f6040830185611a8a565b8281036020840152611b518185611a8a565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611b8157600080fd5b813567ffffffffffffffff80821115611b9c57611b9c611b5a565b604051601f8301601f19908116603f01168101908282118183101715611bc457611bc4611b5a565b81604052838152866020858801011115611bdd57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215611c1257600080fd5b833567ffffffffffffffff811115611c2957600080fd5b611c3586828701611b70565b9660208601359650604090950135949350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611cc257888303603f1901855281518051878552611c9688860182611a8a565b91890151858303868b0152919050611cae8183611a8a565b968901969450505090860190600101611c72565b509098975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611d14578351516001600160a01b0316835260208301938501939250600101611cec565b50909695505050505050565b600060208284031215611d3257600080fd5b813567ffffffffffffffff811115611d4957600080fd5b611d5584828501611b70565b949350505050565b60008060408385031215611d7057600080fd5b823567ffffffffffffffff80821115611d8857600080fd5b611d9486838701611b70565b93506020850135915080821115611daa57600080fd5b50611db785828601611b70565b9150509250929050565b600181811c90821680611dd557607f821691505b602082108103611df557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611e2457611e24611dfb565b92915050565b600060018201611e3c57611e3c611dfb565b5060010190565b601f821115611e8d57600081815260208120601f850160051c81016020861015611e6a5750805b601f850160051c820191505b81811015611e8957828155600101611e76565b5050505b505050565b815167ffffffffffffffff811115611eac57611eac611b5a565b611ec081611eba8454611dc1565b84611e43565b602080601f831160018114611ef55760008415611edd5750858301515b600019600386901b1c1916600185901b178555611e89565b600085815260208120601f198616915b82811015611f2457888601518255948401946001909101908401611f05565b5085821015611f425787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8215158152604060208201526000611d556040830184611a8a56fe506c616e6b746f6e206465616374697661746564207375636365737366756c6c792e436f6c6f6e793a204f6e6c792074686520706f6c79702063616e20706572666f4d6f6469666961626c653a20546869732073797374656d2063616e206e6f206ca164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 920,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 948,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "isFinal",
        "offset": 22,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 973,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "stopped",
        "offset": 23,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 487,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "maxPlanktons",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 489,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "maxZooxes",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 491,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "totalInactivePlanktons",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 493,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "totalInactiveZooxes",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 495,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "totalInactiveRewards",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 497,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 501,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_planktons",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(Plankton)1040_storage)dyn_storage"
      },
      {
        "astId": 505,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_rewards",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Reward)1048_storage)dyn_storage"
      },
      {
        "astId": 509,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "_zooxes",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Zoox)1043_storage)dyn_storage"
      },
      {
        "astId": 513,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "zooxIsActive",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 517,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "planktonIsActive",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 521,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "rewardIsActive",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 526,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "claimed",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Reward)1048_storage)"
      },
      {
        "astId": 531,
        "contract": "contracts/colony/Colony.sol:Colony",
        "label": "assigned",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Reward)1048_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Plankton)1040_storage)dyn_storage": {
        "base": "t_struct(Plankton)1040_storage",
        "encoding": "dynamic_array",
        "label": "struct Koral.Plankton[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Reward)1048_storage)dyn_storage": {
        "base": "t_struct(Reward)1048_storage",
        "encoding": "dynamic_array",
        "label": "struct Koral.Reward[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Zoox)1043_storage)dyn_storage": {
        "base": "t_struct(Zoox)1043_storage",
        "encoding": "dynamic_array",
        "label": "struct Koral.Zoox[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Reward)1048_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Koral.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)1048_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Plankton)1040_storage": {
        "encoding": "inplace",
        "label": "struct Koral.Plankton",
        "members": [
          {
            "astId": 1039,
            "contract": "contracts/colony/Colony.sol:Colony",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Reward)1048_storage": {
        "encoding": "inplace",
        "label": "struct Koral.Reward",
        "members": [
          {
            "astId": 1045,
            "contract": "contracts/colony/Colony.sol:Colony",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1047,
            "contract": "contracts/colony/Colony.sol:Colony",
            "label": "location",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Zoox)1043_storage": {
        "encoding": "inplace",
        "label": "struct Koral.Zoox",
        "members": [
          {
            "astId": 1042,
            "contract": "contracts/colony/Colony.sol:Colony",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}