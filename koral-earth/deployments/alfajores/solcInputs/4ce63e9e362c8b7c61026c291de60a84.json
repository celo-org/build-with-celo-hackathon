{
  "language": "Solidity",
  "sources": {
    "contracts/colony/Colony.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\n// koral.earth smart contracts\n\n// This smart contract is for demo purposes only\n// The protocol is still a WIP and this was made to show basic ideas using a smart contract\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../shared/access/Administrable.sol\";\nimport \"../shared/access/Modifiable.sol\";\nimport \"../shared/access/Stoppable.sol\";\nimport \"../shared/events/EmitsEvent.sol\";\nimport \"../shared/libs/Koral.sol\";\nimport \"./Plankton.sol\";\nimport \"./Reward.sol\";\nimport \"./Zoox.sol\";\nimport \"./Contribution.sol\";\n\ncontract Colony is Administrable, EmitsEvent, Initializable, Modifiable, Stoppable {\n  using Koral for Plankton[];\n  using Koral for Zoox[];\n  using Koral for Contribution[];\n\n  uint public maxPlanktons;\n  uint public maxZooxes;\n  uint public totalInactivePlanktons;\n  uint public totalInactiveZooxes;\n  uint public totalInactiveRewards;\n  uint public maxInstalmentsPerPlankton;\n  string public colonyName;\n  \n  Plankton[] public _planktons;\n  Reward[] public _rewards;\n  Zoox[] public _zooxes;\n\n  mapping(uint => bool) public rewardIsActive;\n  mapping(address => bool) public zooxIsActive;\n  mapping(address => bool) public planktonIsActive;\n\n  mapping(string => uint) public minContributionPerProject;\n\n  mapping(address => uint[]) public _claimed;\n  mapping(address => uint[]) public _assigned;\n\n  mapping(string => uint[]) public _projectRewards;\n  mapping(string => mapping(uint => bool)) public _activeProjectRewards;\n  mapping(address => mapping(string => Contribution[])) public _planktonContributions;\n\n\n  modifier isPolyp {\n    require(isAdmin(), \"Colony: Only the polyp can perform this action.\"); _;\n  }\n\n  modifier isActivePlankton {\n    require(planktonIsActive[msg.sender], \"Colony: Only active planktons can perform this action.\"); _;\n  }\n\n  modifier isActiveZoox {\n    require(zooxIsActive[msg.sender], \"Colony: Only active zooxes can perform this action.\"); _;\n  }\n\n  modifier isValidReward(uint rewardId) {\n    require(rewardIsActive[rewardId], \"Colony: This action can only be performed on an active reward.\"); _;\n  }\n\n  function initialize(string memory _colonyName, uint _maxPlanktons, uint _maxZooxes) public initializer {\n    assignNewAdmin(msg.sender);\n    colonyName = _colonyName;\n    maxPlanktons = _maxPlanktons;\n    maxZooxes = _maxZooxes;\n    maxInstalmentsPerPlankton = 4; // carefully chosen to avoid DoS attacks\n  }\n\n  function launch() public isPolyp {\n    makeFinal();\n    emitActionSuccess(\"Colony launched successfully.\");\n  }\n\n  function setProjectMinContributionAmount(uint minContributionAmount, string memory projectId)public isModifiable isPolyp {\n    minContributionPerProject[projectId] = minContributionAmount;\n\n    emitActionSuccess(\"Project minimum contribution defined successfully.\");\n  }\n\n  function addReward(string memory projectId, string memory name, string memory location) public isModifiable isPolyp {\n    _rewards.push(\n      Reward(name, location)\n    );\n\n    uint rewardId = _rewards.length - 1;\n\n    _projectRewards[projectId].push(rewardId);\n    _activeProjectRewards[projectId][rewardId] = true;\n\n    rewardIsActive[rewardId] = true;\n\n    emitActionSuccess(\"Reward added successfully.\");\n  }\n\n  function deactivateReward(uint rewardId) public isModifiable isPolyp {\n    require(rewardIsActive[rewardId], \"Colony: reward deactivation failed since reward is inactive.\");\n\n    rewardIsActive[rewardId] = false;\n    \n    totalInactiveRewards++;\n\n    emitActionSuccess(\"Reward deactivated successfully.\");\n  }\n\n  function contributeToOffset(string memory projectId) public payable stopInEmergency {\n    require(\n      _planktonContributions[msg.sender][projectId].length < maxInstalmentsPerPlankton, \n      \"Colony: Max contributions exceeded for this project.\"\n    );\n\n    _planktonContributions[msg.sender][projectId].push(\n      Contribution(msg.value, projectId)\n    );\n\n    emitActionSuccess(\"Offset contribution accepted.\");\n  }\n\n  function claimReward(uint rewardId, string memory projectId) public isActivePlankton isValidReward(rewardId) {\n    require(rewardIsActive[rewardId], \"Colony: Reward is no longer claimable.\");\n    require(_activeProjectRewards[projectId][rewardId], \"Colony: Reward not associated with project.\"); \n    require(\n      minContributionPerProject[projectId] <= _planktonContributions[msg.sender][projectId].totalContributions(), \n      \"Colony: insufficient contribution.\"\n    );\n\n    // NB: For simplicity reasons, rewards are currently deemed to be \n    // claimable and assignable perpetually and simultaneously,\n    // In reality, the rules could be different and more explicit. \n    // In such cases, filtering and double spending prevention mechanisms should be implemented.\n\n    _claimed[msg.sender].push(rewardId);\n    _assigned[msg.sender].push(rewardId);\n\n    emitActionSuccess(\"Reward claimed successfully.\");\n  }\n\n  function addZoox(address zoox) public isModifiable isPolyp {\n    require(_zooxes.canAcceptMoreZooxes(totalInactiveZooxes, maxZooxes), \"Colony: can't add any more zooxes\");\n\n    _zooxes.push(\n      Zoox(zoox)\n    );\n\n    zooxIsActive[zoox] = true;\n    \n    emitActionSuccess(\"Zoox added successfully.\");\n  }\n\n  function deactivateZoox(address zoox) public isModifiable isPolyp {\n    require(zooxIsActive[zoox], \"Colony: reward deactivation failed since zoox is inactive.\");\n\n    zooxIsActive[zoox] = false;\n    totalInactiveZooxes++;\n\n    emitActionSuccess(\"Zoox deactivated successfully.\");\n  }\n\n  function addPlankton(address plankton) public isModifiable isPolyp {\n    require(_planktons.canAcceptMorePlanktons(totalInactivePlanktons, maxPlanktons), \"Colony: can't add any more planktons\");\n\n    _planktons.push(\n      Plankton(plankton)\n    );\n\n    planktonIsActive[plankton] = true;\n\n    emitActionSuccess(\"Plankton added successfully.\");\n  }\n\n  function deactivatePlankton(address plankton) public isModifiable isPolyp {\n    require(planktonIsActive[plankton], \"Colony: reward deactivation failed since plankton is inactive.\");\n\n    planktonIsActive[plankton] = false;\n    totalInactivePlanktons++;\n\n    emitActionSuccess(\"Plankton deactivated successfully.\");\n  }\n\n  function setPolyp(address _polyp) public isModifiable isPolyp  {\n    assignNewAdmin(_polyp);\n  }\n\n  function setColonyName(string memory _colonyName) public isModifiable isPolyp {\n    colonyName = _colonyName;\n  }\n\n  function setMaxPlanktons(uint _maxPlanktons) public isModifiable isPolyp {\n    bool isValidMaxPlantons = _maxPlanktons >= (_planktons.length - totalInactivePlanktons);\n\n    require(isValidMaxPlantons, \"Colony: maxPlanktons must not be less than the existing active planktons\");\n\n    maxPlanktons = _maxPlanktons;\n  }\n\n  function setMaxZooxes(uint _maxZooxes) public isModifiable isPolyp {\n    bool isValidMaxZooxes = _maxZooxes >= (_zooxes.length - totalInactiveZooxes);\n\n    require(isValidMaxZooxes, \"Colony: maxZooxes must not be less than the existing active zooxes\");\n\n    maxZooxes = _maxZooxes;\n  }\n\n  function polyp() view public returns (address) {\n    return admin;\n  }\n\n  function rewards() view public returns (Reward[] memory) {\n    return _rewards;\n  }\n\n  function projectRewards(string memory projectId) view public returns (uint[] memory) {\n    return _projectRewards[projectId];\n  }\n\n  function zooxes() view public returns (Zoox[] memory) {\n    return _zooxes;\n  }\n\n  function planktons() view public returns (Plankton[] memory) {\n    return _planktons;\n  }\n\n  function claimed() view public isActivePlankton returns (uint[] memory) {\n    return _claimed[msg.sender];\n  }\n\n  function assigned() view public isActivePlankton returns (uint[] memory) {\n    return _assigned[msg.sender];\n  }\n}"
    },
    "contracts/shared/access/Administrable.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\n// koral.earth smart contracts\n\npragma solidity ^0.8.0;\n\n/**\n * @title Administrable\n * @dev This guarantees administration power to the system that inherits this contract\n */\nabstract contract Administrable {\n  \n  address internal admin;\n\n  function isAdmin() internal view returns (bool)  {\n    return msg.sender == admin;\n  }\n  \n  function assignNewAdmin(address _admin) internal {\n    admin = _admin;\n  }\n}\n"
    },
    "contracts/shared/access/Modifiable.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\n// koral.earth smart contracts\n\npragma solidity ^0.8.0;\n\n/**\n * @title Interactable\n * @dev This guarantees the terms of modifiability of a system that inherits this contract\n */\nabstract contract Modifiable {\n  \n  bool internal isFinal = false;\n\n  modifier isModifiable {\n    require(!isFinal, \"Modifiable: This system can no longer be modified.\"); _;\n  } \n\n  function makeFinal() internal {\n    isFinal = true;\n  }\n}\n"
    },
    "contracts/shared/access/Stoppable.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\n// koral.earth smart contracts\n\npragma solidity ^0.8.0;\n\n/**\n * @title Stoppable\n * @dev This provides a contract with the ability to be stopped\n */\nabstract contract Stoppable {\n  \n  bool public stopped = false;\n  \n  modifier stopInEmergency { if (!stopped) _; }\n\n  modifier onlyInEmergency { if (stopped) _; }\n\n  function stop() public {\n    stopped = true;\n  }\n\n  function resume() public {\n    stopped = false;\n  }\n}\n"
    },
    "contracts/shared/events/EmitsEvent.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\n// koral.earth smart contracts\n\npragma solidity ^0.8.0;\n\n/**\n * @title EmitsEvent\n * @dev contract to hold all the events that we emit\n */\nabstract contract EmitsEvent {\n  \n  event ActionDone(bool status, string statement);\n\n  function emitActionSuccess(string memory statement) internal\n  {\n    emit ActionDone(true, statement);\n  }\n\n  function emitActionFailure(string memory statement) internal\n  {\n    emit ActionDone(false, statement);\n  } \n}\n"
    },
    "contracts/shared/libs/Koral.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\n// koral.earth smart contracts\n\npragma solidity ^0.8.0;\n\nimport \"../../colony/Plankton.sol\";\nimport \"../../colony/Zoox.sol\";\nimport \"../../colony/Contribution.sol\";\n\nlibrary Koral {\n  function canAcceptMorePlanktons(Plankton[] storage planktons, uint inactivePlanktons, uint maxPlanktonsAllowed) internal view returns (bool) {\n    uint totalActivePlanktons = planktons.length - inactivePlanktons;\n    return totalActivePlanktons < maxPlanktonsAllowed;\n  }\n\n  function canAcceptMoreZooxes(Zoox[] storage zooxes, uint inactiveZooxes, uint maxZooxesAllowed) internal view returns (bool) {\n    uint totalActiveZooxes = zooxes.length - inactiveZooxes;\n    return totalActiveZooxes < maxZooxesAllowed;\n  }\n\n  function totalContributions(Contribution[] storage contributions) internal view returns (uint) {\n    uint totalContributed;\n    // since maxContributions is chosen carefully, DoS attacks can be prevented\n    for(uint i = 0; i < contributions.length; i++) \n    {\n      Contribution memory contribution = contributions[i];\n      totalContributed += contribution.amount;\n    }\n    return totalContributed;\n  }\n}"
    },
    "contracts/colony/Plankton.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\n// koral.earth smart contracts\n\npragma solidity ^0.8.0;\n\nstruct Plankton {\n  address id;\n}"
    },
    "contracts/colony/Reward.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\n// koral.earth smart contracts\n\npragma solidity ^0.8.0;\n  \nstruct Reward {\n  string name;\n  string location;\n}"
    },
    "contracts/colony/Zoox.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\n// koral.earth smart contracts\n\npragma solidity ^0.8.0;\n\nstruct Zoox {\n  address id;\n}"
    },
    "contracts/colony/Contribution.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\n// koral.earth smart contracts\n\npragma solidity ^0.8.0;\n\nstruct Contribution {\n  // amount in CELO wei\n  uint amount;\n\n  // carbon offsetting project ID\n  string projectId;\n}"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}