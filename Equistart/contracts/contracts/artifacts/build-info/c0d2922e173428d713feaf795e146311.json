{
	"id": "c0d2922e173428d713feaf795e146311",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.6",
	"solcLongVersion": "0.8.6+commit.11564f7e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/CrowdsaleFactory.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.4;\n\nimport \"./Crowdsale.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract CrowdsaleFactory is Ownable{\n    \n    uint numOfCrowdsale;\n\n    struct crowdsaleMeta {\n        ERC20 token;\n        uint rate;\n        address beneficiaryAddr;\n        address crowdsaleContractAddr;\n    }\n\n    mapping(uint => crowdsaleMeta) private deployedCrowdsale;\n\n    event newCrowdSaleCreatedAt(address crowdsaleContract );\n\n\n    // constructor(){\n    //     // TODO: Add the owner as msg.sender from Ownable contract\n    // }\n\n\n    function createCrowdSale(uint256 _rate, address _wallet, ERC20 _token) public {\n        uint crowdsaleId = numOfCrowdsale++;\n        crowdsaleMeta storage currentCrowdsale = deployedCrowdsale[crowdsaleId];\n        currentCrowdsale.token = _token;\n        currentCrowdsale.rate = _rate;\n        currentCrowdsale.beneficiaryAddr = _wallet;\n        currentCrowdsale.crowdsaleContractAddr = address(new Crowdsale(_rate, _wallet, _token));\n        emit newCrowdSaleCreatedAt(currentCrowdsale.crowdsaleContractAddr);\n\n    }\n\n    function getAllDeployedProjects () public view returns (crowdsaleMeta[] memory props){\n        // return deployedProjects;\n        props = new crowdsaleMeta[](numOfCrowdsale);\n        \n        for (uint256 index =0; index< numOfCrowdsale; index++){\n            props[index] = deployedCrowdsale[index];\n        }\n    }\n\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"contracts/Crowdsale.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\n// import \"../token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n\n// Steps:\n// Create ERC20 token\n// Inititalise crowdsale with rate, beneficiary wallet and ERC20 token address\n// Transfer tokens to this contract and check the new balances\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n * behavior.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  ERC20 public token;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // How many token units a buyer gets per wei\n  uint256 public rate;\n\n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param _rate Number of token units a buyer gets per wei\n   * @param _wallet Address where collected funds will be forwarded to\n   * @param _token Address of the token being sold\n   */\n  constructor(uint256 _rate, address _wallet, ERC20 _token) {\n    require(_rate > 0);\n    require(_wallet != address(0));\n    require(address(_token) != address(0));\n\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  fallback () external payable {\n    buyTokens(msg.sender);\n  }\n\n  receive () external payable {\n      buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    pure\n    internal\n  {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n    virtual\n  {\n    token.transfer(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount)\n    internal view returns (uint256)\n  {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    payable(wallet).transfer(msg.value);\n  }\n}"
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 100
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1403:12617  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore(0x40, 0x80)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1978:2091  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2044:2057  _name = name_ */\n  dup2\n  mload\n  tag_6\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2044:2049  _name */\n  0x03\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2044:2057  _name = name_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2084  _symbol = symbol_ */\n  dup1\n  mload\n  tag_8\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2074  _symbol */\n  0x04\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2084  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1978:2091  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1403:12617  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  jump(tag_21)\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_10\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_13\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_16)\ntag_13:\n  dup3\n  0x1f\n  lt\n  tag_14\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_16)\ntag_14:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_16\n  jumpi\n  swap2\n  dup3\n  add\ntag_15:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_16\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_15)\ntag_16:\n  pop\n  tag_17\n  swap3\n  swap2\n  pop\n  tag_18\n  jump\t// in\ntag_17:\n  pop\n  swap1\n  jump\t// out\ntag_18:\ntag_19:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_17\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_19)\n    /* \"#utility.yul\":14:899   */\ntag_22:\n    /* \"#utility.yul\":68:73   */\n  0x00\n    /* \"#utility.yul\":121:124   */\n  dup3\n    /* \"#utility.yul\":114:118   */\n  0x1f\n    /* \"#utility.yul\":106:112   */\n  dup4\n    /* \"#utility.yul\":102:119   */\n  add\n    /* \"#utility.yul\":98:125   */\n  slt\n    /* \"#utility.yul\":88:90   */\n  tag_24\n  jumpi\n    /* \"#utility.yul\":139:140   */\n  0x00\n    /* \"#utility.yul\":136:137   */\n  dup1\n    /* \"#utility.yul\":129:141   */\n  revert\n    /* \"#utility.yul\":88:90   */\ntag_24:\n    /* \"#utility.yul\":162:175   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":224:234   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":221:223   */\n  iszero\n  tag_26\n  jumpi\n    /* \"#utility.yul\":237:255   */\n  tag_26\n  tag_27\n  jump\t// in\ntag_26:\n    /* \"#utility.yul\":312:314   */\n  0x40\n    /* \"#utility.yul\":306:315   */\n  mload\n    /* \"#utility.yul\":280:282   */\n  0x1f\n    /* \"#utility.yul\":366:379   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":362:384   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":386:388   */\n  0x3f\n    /* \"#utility.yul\":358:389   */\n  add\n    /* \"#utility.yul\":354:394   */\n  and\n    /* \"#utility.yul\":342:395   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":410:428   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":430:452   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":407:453   */\n  or\n    /* \"#utility.yul\":404:406   */\n  iszero\n  tag_29\n  jumpi\n    /* \"#utility.yul\":456:474   */\n  tag_29\n  tag_27\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":496:506   */\n  dup2\n    /* \"#utility.yul\":492:494   */\n  0x40\n    /* \"#utility.yul\":485:507   */\n  mstore\n    /* \"#utility.yul\":531:533   */\n  dup4\n    /* \"#utility.yul\":523:529   */\n  dup2\n    /* \"#utility.yul\":516:534   */\n  mstore\n    /* \"#utility.yul\":553:557   */\n  0x20\n    /* \"#utility.yul\":543:557   */\n  swap3\n  pop\n    /* \"#utility.yul\":598:601   */\n  dup7\n    /* \"#utility.yul\":593:595   */\n  dup4\n    /* \"#utility.yul\":588:590   */\n  dup6\n    /* \"#utility.yul\":580:586   */\n  dup9\n    /* \"#utility.yul\":576:591   */\n  add\n    /* \"#utility.yul\":572:596   */\n  add\n    /* \"#utility.yul\":569:602   */\n  gt\n    /* \"#utility.yul\":566:568   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":615:616   */\n  0x00\n    /* \"#utility.yul\":612:613   */\n  dup1\n    /* \"#utility.yul\":605:617   */\n  revert\n    /* \"#utility.yul\":566:568   */\ntag_30:\n    /* \"#utility.yul\":637:638   */\n  0x00\n    /* \"#utility.yul\":628:638   */\n  swap2\n  pop\n    /* \"#utility.yul\":647:780   */\ntag_31:\n    /* \"#utility.yul\":661:663   */\n  dup4\n    /* \"#utility.yul\":658:659   */\n  dup3\n    /* \"#utility.yul\":655:664   */\n  lt\n    /* \"#utility.yul\":647:780   */\n  iszero\n  tag_33\n  jumpi\n    /* \"#utility.yul\":749:763   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":745:768   */\n  dup4\n  add\n    /* \"#utility.yul\":739:769   */\n  mload\n    /* \"#utility.yul\":718:732   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":714:737   */\n  dup5\n  add\n    /* \"#utility.yul\":707:770   */\n  mstore\n    /* \"#utility.yul\":672:682   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":647:780   */\n  jump(tag_31)\ntag_33:\n    /* \"#utility.yul\":798:800   */\n  dup4\n    /* \"#utility.yul\":795:796   */\n  dup3\n    /* \"#utility.yul\":792:801   */\n  gt\n    /* \"#utility.yul\":789:791   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":857:858   */\n  0x00\n    /* \"#utility.yul\":852:854   */\n  dup4\n    /* \"#utility.yul\":847:849   */\n  dup6\n    /* \"#utility.yul\":839:845   */\n  dup4\n    /* \"#utility.yul\":835:850   */\n  add\n    /* \"#utility.yul\":831:855   */\n  add\n    /* \"#utility.yul\":824:859   */\n  mstore\n    /* \"#utility.yul\":789:791   */\ntag_34:\n    /* \"#utility.yul\":887:893   */\n  swap7\n    /* \"#utility.yul\":78:899   */\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":904:1466   */\ntag_3:\n    /* \"#utility.yul\":1003:1009   */\n  0x00\n    /* \"#utility.yul\":1011:1017   */\n  dup1\n    /* \"#utility.yul\":1064:1066   */\n  0x40\n    /* \"#utility.yul\":1052:1061   */\n  dup4\n    /* \"#utility.yul\":1043:1050   */\n  dup6\n    /* \"#utility.yul\":1039:1062   */\n  sub\n    /* \"#utility.yul\":1035:1067   */\n  slt\n    /* \"#utility.yul\":1032:1034   */\n  iszero\n  tag_36\n  jumpi\n    /* \"#utility.yul\":1080:1081   */\n  0x00\n    /* \"#utility.yul\":1077:1078   */\n  dup1\n    /* \"#utility.yul\":1070:1082   */\n  revert\n    /* \"#utility.yul\":1032:1034   */\ntag_36:\n    /* \"#utility.yul\":1107:1123   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1172:1186   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1169:1171   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":1199:1200   */\n  0x00\n    /* \"#utility.yul\":1196:1197   */\n  dup1\n    /* \"#utility.yul\":1189:1201   */\n  revert\n    /* \"#utility.yul\":1169:1171   */\ntag_37:\n    /* \"#utility.yul\":1222:1283   */\n  tag_38\n    /* \"#utility.yul\":1275:1282   */\n  dup7\n    /* \"#utility.yul\":1266:1272   */\n  dup4\n    /* \"#utility.yul\":1255:1264   */\n  dup8\n    /* \"#utility.yul\":1251:1273   */\n  add\n    /* \"#utility.yul\":1222:1283   */\n  tag_22\n  jump\t// in\ntag_38:\n    /* \"#utility.yul\":1212:1283   */\n  swap4\n  pop\n    /* \"#utility.yul\":1329:1331   */\n  0x20\n    /* \"#utility.yul\":1318:1327   */\n  dup6\n    /* \"#utility.yul\":1314:1332   */\n  add\n    /* \"#utility.yul\":1308:1333   */\n  mload\n    /* \"#utility.yul\":1292:1333   */\n  swap2\n  pop\n    /* \"#utility.yul\":1358:1360   */\n  dup1\n    /* \"#utility.yul\":1348:1356   */\n  dup3\n    /* \"#utility.yul\":1345:1361   */\n  gt\n    /* \"#utility.yul\":1342:1344   */\n  iszero\n  tag_39\n  jumpi\n    /* \"#utility.yul\":1374:1375   */\n  0x00\n    /* \"#utility.yul\":1371:1372   */\n  dup1\n    /* \"#utility.yul\":1364:1376   */\n  revert\n    /* \"#utility.yul\":1342:1344   */\ntag_39:\n  pop\n    /* \"#utility.yul\":1397:1460   */\n  tag_40\n    /* \"#utility.yul\":1452:1459   */\n  dup6\n    /* \"#utility.yul\":1441:1449   */\n  dup3\n    /* \"#utility.yul\":1430:1439   */\n  dup7\n    /* \"#utility.yul\":1426:1450   */\n  add\n    /* \"#utility.yul\":1397:1460   */\n  tag_22\n  jump\t// in\ntag_40:\n    /* \"#utility.yul\":1387:1460   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1022:1466   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1471:1851   */\ntag_11:\n    /* \"#utility.yul\":1550:1551   */\n  0x01\n    /* \"#utility.yul\":1546:1558   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1593:1605   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1614:1616   */\n  tag_42\n  jumpi\n    /* \"#utility.yul\":1668:1672   */\n  0x7f\n    /* \"#utility.yul\":1660:1666   */\n  dup3\n    /* \"#utility.yul\":1656:1673   */\n  and\n    /* \"#utility.yul\":1646:1673   */\n  swap2\n  pop\n    /* \"#utility.yul\":1614:1616   */\ntag_42:\n    /* \"#utility.yul\":1721:1723   */\n  0x20\n    /* \"#utility.yul\":1713:1719   */\n  dup3\n    /* \"#utility.yul\":1710:1724   */\n  lt\n    /* \"#utility.yul\":1690:1708   */\n  dup2\n    /* \"#utility.yul\":1687:1725   */\n  eq\n    /* \"#utility.yul\":1684:1686   */\n  iszero\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1767:1777   */\n  0x4e487b71\n    /* \"#utility.yul\":1762:1765   */\n  0xe0\n    /* \"#utility.yul\":1758:1778   */\n  shl\n    /* \"#utility.yul\":1755:1756   */\n  0x00\n    /* \"#utility.yul\":1748:1779   */\n  mstore\n    /* \"#utility.yul\":1802:1806   */\n  0x22\n    /* \"#utility.yul\":1799:1800   */\n  0x04\n    /* \"#utility.yul\":1792:1807   */\n  mstore\n    /* \"#utility.yul\":1830:1834   */\n  0x24\n    /* \"#utility.yul\":1827:1828   */\n  0x00\n    /* \"#utility.yul\":1820:1835   */\n  revert\n    /* \"#utility.yul\":1684:1686   */\ntag_43:\n  pop\n    /* \"#utility.yul\":1526:1851   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1856:1983   */\ntag_27:\n    /* \"#utility.yul\":1917:1927   */\n  0x4e487b71\n    /* \"#utility.yul\":1912:1915   */\n  0xe0\n    /* \"#utility.yul\":1908:1928   */\n  shl\n    /* \"#utility.yul\":1905:1906   */\n  0x00\n    /* \"#utility.yul\":1898:1929   */\n  mstore\n    /* \"#utility.yul\":1948:1952   */\n  0x41\n    /* \"#utility.yul\":1945:1946   */\n  0x04\n    /* \"#utility.yul\":1938:1953   */\n  mstore\n    /* \"#utility.yul\":1972:1976   */\n  0x24\n    /* \"#utility.yul\":1969:1970   */\n  0x00\n    /* \"#utility.yul\":1962:1977   */\n  revert\n    /* \"#utility.yul\":1888:1983   */\ntag_21:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1403:12617  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1403:12617  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2156:2254  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1405:1419   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1398:1420   */\n      iszero\n        /* \"#utility.yul\":1380:1421   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1368:1370   */\n      0x20\n        /* \"#utility.yul\":1353:1371   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":1335:1427   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3244:3350  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3331:3343  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3244:3350  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":4969:4994   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":4957:4959   */\n      0x20\n        /* \"#utility.yul\":4942:4960   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3244:3350  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_17\n        /* \"#utility.yul\":4924:5000   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5192:5478  function transferFrom(... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3093:3184  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3175:3177  18 */\n      0x12\n        /* \"#utility.yul\":5147:5183   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5135:5137   */\n      0x20\n        /* \"#utility.yul\":5120:5138   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3093:3184  function decimals() public view virtual override returns (uint8) {... */\n      tag_17\n        /* \"#utility.yul\":5102:5189   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:6107  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3408:3533  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3508:3526  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3482:3489  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3508:3526  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3408:3533  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2367:2469  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6594:7021  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3729:3918  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3976:4125  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2156:2254  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2210:2223  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2242:2247  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2235:2247  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2156:2254  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4516:4520  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4570:4602  _approve(owner, spender, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4586:4593  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4595:4601  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4570:4578  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4570:4602  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4619:4623  true */\n      0x01\n      swap4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5192:5478  function transferFrom(... */\n    tag_32:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5319:5323  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5375:5413  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5391:5395  from */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5406:5412  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5375:5390  _spendAllowance */\n      tag_79\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5375:5413  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5423:5450  _transfer(from, to, amount) */\n      tag_80\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5433:5437  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5439:5441  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5443:5449  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5423:5432  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5423:5450  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5467:5471  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5192:5478  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:6107  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5961:5965  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6015:6079  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_73\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6031:6038  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6068:6078  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6065  allowance(owner, spender) */\n      tag_86\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6031:6038  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6049  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6065  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6078  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6015:6023  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6015:6079  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2367:2469  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2423:2436  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2455:2462  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2448:2462  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6594:7021  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6687:6691  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6687:6691  bool */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6768:6793  allowance(owner, spender) */\n      tag_98\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6785:6792  spender */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6768:6777  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6768:6793  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6741:6793  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6831:6846  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6811:6827  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6811:6846  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6803:6888  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4619:4621   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6803:6888  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4601:4622   */\n      mstore\n        /* \"#utility.yul\":4658:4660   */\n      0x25\n        /* \"#utility.yul\":4638:4656   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4631:4661   */\n      mstore\n        /* \"#utility.yul\":4697:4731   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":4677:4695   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4670:4732   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":4748:4766   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4741:4776   */\n      mstore\n        /* \"#utility.yul\":4793:4812   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6803:6888  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6922:6982  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6931:6936  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6938:6945  spender */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6966:6981  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6947:6963  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6947:6981  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6922:6930  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6922:6982  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3729:3918  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3808:3812  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3862:3890  _transfer(owner, to, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3879:3881  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3883:3889  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3862:3871  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3862:3890  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3976:4125  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4065:4072  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4102  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4118  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3976:4125  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10110:10480  function _approve(... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10241:10260  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10233:10301  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4214:4216   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10233:10301  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4196:4217   */\n      mstore\n        /* \"#utility.yul\":4253:4255   */\n      0x24\n        /* \"#utility.yul\":4233:4251   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":4226:4256   */\n      mstore\n        /* \"#utility.yul\":4292:4326   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":4272:4290   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4265:4327   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":4343:4361   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4336:4370   */\n      mstore\n        /* \"#utility.yul\":4387:4406   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10233:10301  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4186:4412   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10233:10301  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10319:10340  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10311:10379  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2640:2642   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10311:10379  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2622:2643   */\n      mstore\n        /* \"#utility.yul\":2679:2681   */\n      0x22\n        /* \"#utility.yul\":2659:2677   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2652:2682   */\n      mstore\n        /* \"#utility.yul\":2718:2752   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":2698:2716   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2691:2753   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":2769:2787   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2762:2794   */\n      mstore\n        /* \"#utility.yul\":2811:2830   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10311:10379  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":2612:2836   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10311:10379  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10390:10408  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10390:10401  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10390:10408  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10390:10417  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10390:10426  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10441:10473  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":4969:4994   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10441:10473  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":4942:4960   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10441:10473  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10110:10480  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10761:11202  function _spendAllowance(... */\n    tag_79:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10891:10915  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10918:10943  allowance(owner, spender) */\n      tag_117\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10928:10933  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10935:10942  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10918:10927  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10918:10943  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10891:10943  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10957:10973  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10957:10994  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10953:11196  if (currentAllowance != type(uint256).max) {... */\n      tag_122\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11038:11044  amount */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11018:11034  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11018:11044  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11010:11078  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3043:3045   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11010:11078  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3025:3046   */\n      mstore\n        /* \"#utility.yul\":3082:3084   */\n      0x1d\n        /* \"#utility.yul\":3062:3080   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3055:3085   */\n      mstore\n        /* \"#utility.yul\":3121:3152   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":3101:3119   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3094:3153   */\n      mstore\n        /* \"#utility.yul\":3170:3188   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11010:11078  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_100\n        /* \"#utility.yul\":3015:3194   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11010:11078  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_119:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11120:11171  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11129:11134  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11136:11143  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11164:11170  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11145:11161  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11145:11170  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11120:11128  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11120:11171  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11202  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10761:11202  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7475:8126  function _transfer(... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7601:7619  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7593:7661  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3808:3810   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7593:7661  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3790:3811   */\n      mstore\n        /* \"#utility.yul\":3847:3849   */\n      0x25\n        /* \"#utility.yul\":3827:3845   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3820:3850   */\n      mstore\n        /* \"#utility.yul\":3886:3920   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":3866:3884   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3859:3921   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":3937:3955   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3930:3965   */\n      mstore\n        /* \"#utility.yul\":3982:4001   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7593:7661  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3780:4007   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7593:7661  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7679:7695  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7671:7735  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2236:2238   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7671:7735  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2218:2239   */\n      mstore\n        /* \"#utility.yul\":2275:2277   */\n      0x23\n        /* \"#utility.yul\":2255:2273   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2248:2278   */\n      mstore\n        /* \"#utility.yul\":2314:2348   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":2294:2312   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2287:2349   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":2365:2383   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2358:2391   */\n      mstore\n        /* \"#utility.yul\":2408:2427   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7671:7735  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":2208:2433   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7671:7735  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7817:7832  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7795:7814  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7817:7832  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7850:7871  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7842:7914  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3401:3403   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7842:7914  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3383:3404   */\n      mstore\n        /* \"#utility.yul\":3440:3442   */\n      0x26\n        /* \"#utility.yul\":3420:3438   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3413:3443   */\n      mstore\n        /* \"#utility.yul\":3479:3513   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":3459:3477   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3452:3514   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":3530:3548   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3523:3559   */\n      mstore\n        /* \"#utility.yul\":3576:3595   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7842:7914  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"#utility.yul\":3373:3601   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7842:7914  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7948:7963  _balances[from] */\n      dup1\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7948:7957  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7948:7963  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7966:7986  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7948:7986  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8006:8019  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8006:8029  _balances[to] += amount */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7980:7986  amount */\n      dup5\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7948:7957  _balances */\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8006:8029  _balances[to] += amount */\n      tag_135\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7980:7986  amount */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8006:8029  _balances[to] += amount */\n      tag_88\n      jump\t// in\n    tag_135:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8060:8062  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8045:8071  Transfer(from, to, amount) */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8054:8058  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8045:8071  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8064:8070  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8045:8071  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_136\n      swap2\n        /* \"#utility.yul\":4969:4994   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4957:4959   */\n      0x20\n        /* \"#utility.yul\":4942:4960   */\n      add\n      swap1\n        /* \"#utility.yul\":4924:5000   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8045:8071  Transfer(from, to, amount) */\n    tag_136:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8082:8119  _afterTokenTransfer(from, to, amount) */\n      tag_122\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11786:11907  function _beforeTokenTransfer(... */\n      jump\n        /* \"#utility.yul\":14:187   */\n    tag_142:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:113   */\n      tag_144\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      dup1\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":111:113   */\n    tag_144:\n        /* \"#utility.yul\":63:187   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":192:378   */\n    tag_44:\n        /* \"#utility.yul\":251:257   */\n      0x00\n        /* \"#utility.yul\":304:306   */\n      0x20\n        /* \"#utility.yul\":292:301   */\n      dup3\n        /* \"#utility.yul\":283:290   */\n      dup5\n        /* \"#utility.yul\":279:302   */\n      sub\n        /* \"#utility.yul\":275:307   */\n      slt\n        /* \"#utility.yul\":272:274   */\n      iszero\n      tag_146\n      jumpi\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":272:274   */\n    tag_146:\n        /* \"#utility.yul\":343:372   */\n      tag_147\n        /* \"#utility.yul\":362:371   */\n      dup3\n        /* \"#utility.yul\":343:372   */\n      tag_142\n      jump\t// in\n    tag_147:\n        /* \"#utility.yul\":333:372   */\n      swap4\n        /* \"#utility.yul\":262:378   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":383:643   */\n    tag_60:\n        /* \"#utility.yul\":451:457   */\n      0x00\n        /* \"#utility.yul\":459:465   */\n      dup1\n        /* \"#utility.yul\":512:514   */\n      0x40\n        /* \"#utility.yul\":500:509   */\n      dup4\n        /* \"#utility.yul\":491:498   */\n      dup6\n        /* \"#utility.yul\":487:510   */\n      sub\n        /* \"#utility.yul\":483:515   */\n      slt\n        /* \"#utility.yul\":480:482   */\n      iszero\n      tag_149\n      jumpi\n        /* \"#utility.yul\":528:529   */\n      0x00\n        /* \"#utility.yul\":525:526   */\n      dup1\n        /* \"#utility.yul\":518:530   */\n      revert\n        /* \"#utility.yul\":480:482   */\n    tag_149:\n        /* \"#utility.yul\":551:580   */\n      tag_150\n        /* \"#utility.yul\":570:579   */\n      dup4\n        /* \"#utility.yul\":551:580   */\n      tag_142\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":541:580   */\n      swap2\n      pop\n        /* \"#utility.yul\":599:637   */\n      tag_151\n        /* \"#utility.yul\":633:635   */\n      0x20\n        /* \"#utility.yul\":622:631   */\n      dup5\n        /* \"#utility.yul\":618:636   */\n      add\n        /* \"#utility.yul\":599:637   */\n      tag_142\n      jump\t// in\n    tag_151:\n        /* \"#utility.yul\":589:637   */\n      swap1\n      pop\n        /* \"#utility.yul\":470:643   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":648:976   */\n    tag_31:\n        /* \"#utility.yul\":725:731   */\n      0x00\n        /* \"#utility.yul\":733:739   */\n      dup1\n        /* \"#utility.yul\":741:747   */\n      0x00\n        /* \"#utility.yul\":794:796   */\n      0x60\n        /* \"#utility.yul\":782:791   */\n      dup5\n        /* \"#utility.yul\":773:780   */\n      dup7\n        /* \"#utility.yul\":769:792   */\n      sub\n        /* \"#utility.yul\":765:797   */\n      slt\n        /* \"#utility.yul\":762:764   */\n      iszero\n      tag_153\n      jumpi\n        /* \"#utility.yul\":810:811   */\n      0x00\n        /* \"#utility.yul\":807:808   */\n      dup1\n        /* \"#utility.yul\":800:812   */\n      revert\n        /* \"#utility.yul\":762:764   */\n    tag_153:\n        /* \"#utility.yul\":833:862   */\n      tag_154\n        /* \"#utility.yul\":852:861   */\n      dup5\n        /* \"#utility.yul\":833:862   */\n      tag_142\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":823:862   */\n      swap3\n      pop\n        /* \"#utility.yul\":881:919   */\n      tag_155\n        /* \"#utility.yul\":915:917   */\n      0x20\n        /* \"#utility.yul\":904:913   */\n      dup6\n        /* \"#utility.yul\":900:918   */\n      add\n        /* \"#utility.yul\":881:919   */\n      tag_142\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":871:919   */\n      swap2\n      pop\n        /* \"#utility.yul\":966:968   */\n      0x40\n        /* \"#utility.yul\":955:964   */\n      dup5\n        /* \"#utility.yul\":951:969   */\n      add\n        /* \"#utility.yul\":938:970   */\n      calldataload\n        /* \"#utility.yul\":928:970   */\n      swap1\n      pop\n        /* \"#utility.yul\":752:976   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":981:1235   */\n    tag_21:\n        /* \"#utility.yul\":1049:1055   */\n      0x00\n        /* \"#utility.yul\":1057:1063   */\n      dup1\n        /* \"#utility.yul\":1110:1112   */\n      0x40\n        /* \"#utility.yul\":1098:1107   */\n      dup4\n        /* \"#utility.yul\":1089:1096   */\n      dup6\n        /* \"#utility.yul\":1085:1108   */\n      sub\n        /* \"#utility.yul\":1081:1113   */\n      slt\n        /* \"#utility.yul\":1078:1080   */\n      iszero\n      tag_157\n      jumpi\n        /* \"#utility.yul\":1126:1127   */\n      0x00\n        /* \"#utility.yul\":1123:1124   */\n      dup1\n        /* \"#utility.yul\":1116:1128   */\n      revert\n        /* \"#utility.yul\":1078:1080   */\n    tag_157:\n        /* \"#utility.yul\":1149:1178   */\n      tag_158\n        /* \"#utility.yul\":1168:1177   */\n      dup4\n        /* \"#utility.yul\":1149:1178   */\n      tag_142\n      jump\t// in\n    tag_158:\n        /* \"#utility.yul\":1139:1178   */\n      swap5\n        /* \"#utility.yul\":1225:1227   */\n      0x20\n        /* \"#utility.yul\":1210:1228   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1197:1229   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1068:1235   */\n      jump\t// out\n        /* \"#utility.yul\":1432:2029   */\n    tag_18:\n        /* \"#utility.yul\":1544:1548   */\n      0x00\n        /* \"#utility.yul\":1573:1575   */\n      0x20\n        /* \"#utility.yul\":1602:1604   */\n      dup1\n        /* \"#utility.yul\":1591:1600   */\n      dup4\n        /* \"#utility.yul\":1584:1605   */\n      mstore\n        /* \"#utility.yul\":1634:1640   */\n      dup4\n        /* \"#utility.yul\":1628:1641   */\n      mload\n        /* \"#utility.yul\":1677:1683   */\n      dup1\n        /* \"#utility.yul\":1672:1674   */\n      dup3\n        /* \"#utility.yul\":1661:1670   */\n      dup6\n        /* \"#utility.yul\":1657:1675   */\n      add\n        /* \"#utility.yul\":1650:1684   */\n      mstore\n        /* \"#utility.yul\":1702:1703   */\n      0x00\n        /* \"#utility.yul\":1712:1852   */\n    tag_161:\n        /* \"#utility.yul\":1726:1732   */\n      dup2\n        /* \"#utility.yul\":1723:1724   */\n      dup2\n        /* \"#utility.yul\":1720:1733   */\n      lt\n        /* \"#utility.yul\":1712:1852   */\n      iszero\n      tag_163\n      jumpi\n        /* \"#utility.yul\":1821:1835   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":1817:1840   */\n      dup4\n      add\n        /* \"#utility.yul\":1811:1841   */\n      mload\n        /* \"#utility.yul\":1787:1804   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":1806:1808   */\n      0x40\n        /* \"#utility.yul\":1783:1809   */\n      add\n        /* \"#utility.yul\":1776:1842   */\n      mstore\n        /* \"#utility.yul\":1741:1751   */\n      dup3\n      add\n        /* \"#utility.yul\":1712:1852   */\n      jump(tag_161)\n    tag_163:\n        /* \"#utility.yul\":1870:1876   */\n      dup2\n        /* \"#utility.yul\":1867:1868   */\n      dup2\n        /* \"#utility.yul\":1864:1877   */\n      gt\n        /* \"#utility.yul\":1861:1863   */\n      iszero\n      tag_164\n      jumpi\n        /* \"#utility.yul\":1940:1941   */\n      0x00\n        /* \"#utility.yul\":1935:1937   */\n      0x40\n        /* \"#utility.yul\":1926:1932   */\n      dup4\n        /* \"#utility.yul\":1915:1924   */\n      dup8\n        /* \"#utility.yul\":1911:1933   */\n      add\n        /* \"#utility.yul\":1907:1938   */\n      add\n        /* \"#utility.yul\":1900:1942   */\n      mstore\n        /* \"#utility.yul\":1861:1863   */\n    tag_164:\n      pop\n        /* \"#utility.yul\":2013:2015   */\n      0x1f\n        /* \"#utility.yul\":1992:2007   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1988:2017   */\n      and\n        /* \"#utility.yul\":1973:2018   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":2020:2022   */\n      0x40\n        /* \"#utility.yul\":1969:2023   */\n      add\n      swap4\n        /* \"#utility.yul\":1553:2029   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5194:5419   */\n    tag_88:\n        /* \"#utility.yul\":5234:5237   */\n      0x00\n        /* \"#utility.yul\":5265:5266   */\n      dup3\n        /* \"#utility.yul\":5261:5267   */\n      not\n        /* \"#utility.yul\":5258:5259   */\n      dup3\n        /* \"#utility.yul\":5255:5268   */\n      gt\n        /* \"#utility.yul\":5252:5254   */\n      iszero\n      tag_175\n      jumpi\n        /* \"#utility.yul\":5310:5320   */\n      0x4e487b71\n        /* \"#utility.yul\":5305:5308   */\n      0xe0\n        /* \"#utility.yul\":5301:5321   */\n      shl\n        /* \"#utility.yul\":5298:5299   */\n      0x00\n        /* \"#utility.yul\":5291:5322   */\n      mstore\n        /* \"#utility.yul\":5345:5349   */\n      0x11\n        /* \"#utility.yul\":5342:5343   */\n      0x04\n        /* \"#utility.yul\":5335:5350   */\n      mstore\n        /* \"#utility.yul\":5373:5377   */\n      0x24\n        /* \"#utility.yul\":5370:5371   */\n      0x00\n        /* \"#utility.yul\":5363:5378   */\n      revert\n        /* \"#utility.yul\":5252:5254   */\n    tag_175:\n      pop\n        /* \"#utility.yul\":5404:5413   */\n      add\n      swap1\n        /* \"#utility.yul\":5242:5419   */\n      jump\t// out\n        /* \"#utility.yul\":5424:5804   */\n    tag_65:\n        /* \"#utility.yul\":5503:5504   */\n      0x01\n        /* \"#utility.yul\":5499:5511   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":5546:5558   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":5567:5569   */\n      tag_177\n      jumpi\n        /* \"#utility.yul\":5621:5625   */\n      0x7f\n        /* \"#utility.yul\":5613:5619   */\n      dup3\n        /* \"#utility.yul\":5609:5626   */\n      and\n        /* \"#utility.yul\":5599:5626   */\n      swap2\n      pop\n        /* \"#utility.yul\":5567:5569   */\n    tag_177:\n        /* \"#utility.yul\":5674:5676   */\n      0x20\n        /* \"#utility.yul\":5666:5672   */\n      dup3\n        /* \"#utility.yul\":5663:5677   */\n      lt\n        /* \"#utility.yul\":5643:5661   */\n      dup2\n        /* \"#utility.yul\":5640:5678   */\n      eq\n        /* \"#utility.yul\":5637:5639   */\n      iszero\n      tag_178\n      jumpi\n        /* \"#utility.yul\":5720:5730   */\n      0x4e487b71\n        /* \"#utility.yul\":5715:5718   */\n      0xe0\n        /* \"#utility.yul\":5711:5731   */\n      shl\n        /* \"#utility.yul\":5708:5709   */\n      0x00\n        /* \"#utility.yul\":5701:5732   */\n      mstore\n        /* \"#utility.yul\":5755:5759   */\n      0x22\n        /* \"#utility.yul\":5752:5753   */\n      0x04\n        /* \"#utility.yul\":5745:5760   */\n      mstore\n        /* \"#utility.yul\":5783:5787   */\n      0x24\n        /* \"#utility.yul\":5780:5781   */\n      0x00\n        /* \"#utility.yul\":5773:5788   */\n      revert\n        /* \"#utility.yul\":5637:5639   */\n    tag_178:\n      pop\n        /* \"#utility.yul\":5479:5804   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220d76346b3f386c40d8f0a4526ca75a064c0f0baf6deebf9d1893844dfe9e5299e64736f6c63430008060033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_157": {
									"entryPoint": null,
									"id": 157,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 270,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 453,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"extract_byte_array_length": {
									"entryPoint": 559,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 620,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1985:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "78:821:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "127:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "136:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "139:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "129:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "129:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "129:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "106:6:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "114:4:8",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "102:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "102:17:8"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "121:3:8"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "98:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "98:27:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "91:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "91:35:8"
															},
															"nodeType": "YulIf",
															"src": "88:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "152:23:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "168:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "162:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "162:13:8"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "156:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "184:28:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "202:2:8",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "206:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "198:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "198:10:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "210:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "194:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "194:18:8"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "188:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "235:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "237:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "237:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "237:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "227:2:8"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "231:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "224:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "224:10:8"
															},
															"nodeType": "YulIf",
															"src": "221:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "266:17:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "280:2:8",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "276:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "276:7:8"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "270:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "292:23:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "312:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "306:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "306:9:8"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "296:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "324:71:8",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "346:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "370:2:8"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "374:4:8",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "366:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "366:13:8"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "381:2:8"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "362:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "362:22:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "386:2:8",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "358:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "358:31:8"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "391:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "354:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "354:40:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "342:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "342:53:8"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "328:10:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "454:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "456:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "456:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "456:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "413:10:8"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "425:2:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "410:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "410:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "433:10:8"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "445:6:8"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "430:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "430:22:8"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "407:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "407:46:8"
															},
															"nodeType": "YulIf",
															"src": "404:2:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "492:2:8",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "496:10:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "485:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "485:22:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "485:22:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "523:6:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "531:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "516:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "516:18:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "516:18:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "543:14:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "553:4:8",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "547:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "603:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "612:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "615:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "605:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "605:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "605:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "580:6:8"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "588:2:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "576:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "576:15:8"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "593:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "572:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "572:24:8"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "598:3:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "569:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "569:33:8"
															},
															"nodeType": "YulIf",
															"src": "566:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "628:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "637:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "632:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "693:87:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "722:6:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "730:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "718:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "718:14:8"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "734:2:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "714:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "714:23:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "753:6:8"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "761:1:8"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "749:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "749:14:8"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "765:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "745:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "745:23:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "739:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "739:30:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "707:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "707:63:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "707:63:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "658:1:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "661:2:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "655:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "655:9:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "665:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "667:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "676:1:8"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "679:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "672:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "672:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "667:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "651:3:8",
																"statements": []
															},
															"src": "647:133:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "810:59:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "839:6:8"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "847:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "835:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "835:15:8"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "852:2:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "831:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "831:24:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "857:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "824:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "824:35:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "824:35:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "795:1:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "798:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "792:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "792:9:8"
															},
															"nodeType": "YulIf",
															"src": "789:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "878:15:8",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "887:6:8"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "878:5:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "52:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "60:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "68:5:8",
														"type": ""
													}
												],
												"src": "14:885:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1022:444:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1068:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1077:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1080:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1070:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1070:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1070:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1043:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1052:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1039:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1039:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1064:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1035:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1035:32:8"
															},
															"nodeType": "YulIf",
															"src": "1032:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1093:30:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1113:9:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1107:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1107:16:8"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1097:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1132:28:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1150:2:8",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1154:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1146:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1146:10:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1158:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1142:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1142:18:8"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1136:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1187:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1196:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1199:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1189:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1189:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1189:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1175:6:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1183:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1172:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1172:14:8"
															},
															"nodeType": "YulIf",
															"src": "1169:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1212:71:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1255:9:8"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1266:6:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1251:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1251:22:8"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1275:7:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1222:28:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1222:61:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1212:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1292:41:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1318:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1329:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1314:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1314:18:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1308:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1308:25:8"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1296:8:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1362:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1371:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1374:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1364:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1364:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1364:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1348:8:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1358:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1345:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1345:16:8"
															},
															"nodeType": "YulIf",
															"src": "1342:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1387:73:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1430:9:8"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1441:8:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1426:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1426:24:8"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1452:7:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1397:28:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1397:63:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1387:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "980:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "991:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1003:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1011:6:8",
														"type": ""
													}
												],
												"src": "904:562:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1526:325:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1536:22:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1550:1:8",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1553:4:8"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1546:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1546:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1536:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1567:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1597:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1603:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1593:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1593:12:8"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1571:18:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1644:31:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1646:27:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1660:6:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1668:4:8",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1656:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1656:17:8"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1646:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1624:18:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1617:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1617:26:8"
															},
															"nodeType": "YulIf",
															"src": "1614:2:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1734:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1755:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1762:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1767:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1758:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1758:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1748:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1748:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1748:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1799:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1802:4:8",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1792:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1792:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1792:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1827:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1830:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1820:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1820:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1820:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1690:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1713:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1721:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1710:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1710:14:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1687:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1687:38:8"
															},
															"nodeType": "YulIf",
															"src": "1684:2:8"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1506:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1515:6:8",
														"type": ""
													}
												],
												"src": "1471:380:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1888:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1905:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1912:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1917:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1908:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1908:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1898:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1898:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1898:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1945:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1948:4:8",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1938:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1938:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1938:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1969:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1972:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1962:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1962:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1962:15:8"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "1856:127:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162000b1938038062000b198339810160408190526200003491620001c5565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000282565b82805462000076906200022f565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200012057600080fd5b81516001600160401b03808211156200013d576200013d6200026c565b604051601f8301601f19908116603f011681019082821181831017156200016857620001686200026c565b816040528381526020925086838588010111156200018557600080fd5b600091505b83821015620001a957858201830151818301840152908201906200018a565b83821115620001bb5760008385830101525b9695505050505050565b60008060408385031215620001d957600080fd5b82516001600160401b0380821115620001f157600080fd5b620001ff868387016200010e565b935060208501519150808211156200021657600080fd5b5062000225858286016200010e565b9150509250929050565b600181811c908216806200024457607f821691505b602082108114156200026657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61088780620002926000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c3919061079b565b60405180910390f35b6100df6100da366004610771565b610232565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610735565b61024a565b604051601281526020016100c3565b6100df610131366004610771565b61026e565b6100f36101443660046106e0565b6001600160a01b031660009081526020819052604090205490565b6100b6610290565b6100df610175366004610771565b61029f565b6100df610188366004610771565b61031f565b6100f361019b366004610702565b61032d565b6060600380546101af90610816565b80601f01602080910402602001604051908101604052809291908181526020018280546101db90610816565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b91906107f0565b610358565b6060600480546101af90610816565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260208190526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061066b9084906107f0565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106b791815260200190565b60405180910390a36104f0565b80356001600160a01b03811681146106db57600080fd5b919050565b6000602082840312156106f257600080fd5b6106fb826106c4565b9392505050565b6000806040838503121561071557600080fd5b61071e836106c4565b915061072c602084016106c4565b90509250929050565b60008060006060848603121561074a57600080fd5b610753846106c4565b9250610761602085016106c4565b9150604084013590509250925092565b6000806040838503121561078457600080fd5b61078d836106c4565b946020939093013593505050565b600060208083528351808285015260005b818110156107c8578581018301518582016040015282016107ac565b818111156107da576000604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561081157634e487b7160e01b600052601160045260246000fd5b500190565b600181811c9082168061082a57607f821691505b6020821081141561084b57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220d76346b3f386c40d8f0a4526ca75a064c0f0baf6deebf9d1893844dfe9e5299e64736f6c63430008060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xB19 CODESIZE SUB DUP1 PUSH3 0xB19 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1C5 JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x282 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x22F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x13D JUMPI PUSH3 0x13D PUSH3 0x26C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x168 JUMPI PUSH3 0x168 PUSH3 0x26C JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1A9 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x18A JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1BB JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x1F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1FF DUP7 DUP4 DUP8 ADD PUSH3 0x10E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x225 DUP6 DUP3 DUP7 ADD PUSH3 0x10E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x244 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x266 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x887 DUP1 PUSH3 0x292 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x79B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x735 JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x702 JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x816 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x816 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x7F0 JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x816 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x66B SWAP1 DUP5 SWAP1 PUSH2 0x7F0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6B7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6FB DUP3 PUSH2 0x6C4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x71E DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH2 0x72C PUSH1 0x20 DUP5 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x753 DUP5 PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP PUSH2 0x761 PUSH1 0x20 DUP6 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x784 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x78D DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7C8 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x7AC JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7DA JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x811 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x82A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x84B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 PUSH4 0x46B3F386 0xC4 0xD DUP16 EXP GASLIMIT 0x26 0xCA PUSH22 0xA064C0F0BAF6DEEBF9D1893844DFE9E5299E64736F6C PUSH4 0x43000806 STOP CALLER ",
							"sourceMap": "1403:11214:1:-:0;;;1978:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2044:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2067:17:1;;;;:7;;:17;;;;;:::i;:::-;;1978:113;;1403:11214;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1403:11214:1;;;-1:-1:-1;1403:11214:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:885:8;68:5;121:3;114:4;106:6;102:17;98:27;88:2;;139:1;136;129:12;88:2;162:13;;-1:-1:-1;;;;;224:10:8;;;221:2;;;237:18;;:::i;:::-;312:2;306:9;280:2;366:13;;-1:-1:-1;;362:22:8;;;386:2;358:31;354:40;342:53;;;410:18;;;430:22;;;407:46;404:2;;;456:18;;:::i;:::-;496:10;492:2;485:22;531:2;523:6;516:18;553:4;543:14;;598:3;593:2;588;580:6;576:15;572:24;569:33;566:2;;;615:1;612;605:12;566:2;637:1;628:10;;647:133;661:2;658:1;655:9;647:133;;;749:14;;;745:23;;739:30;718:14;;;714:23;;707:63;672:10;;;;647:133;;;798:2;795:1;792:9;789:2;;;857:1;852:2;847;839:6;835:15;831:24;824:35;789:2;887:6;78:821;-1:-1:-1;;;;;;78:821:8:o;904:562::-;1003:6;1011;1064:2;1052:9;1043:7;1039:23;1035:32;1032:2;;;1080:1;1077;1070:12;1032:2;1107:16;;-1:-1:-1;;;;;1172:14:8;;;1169:2;;;1199:1;1196;1189:12;1169:2;1222:61;1275:7;1266:6;1255:9;1251:22;1222:61;:::i;:::-;1212:71;;1329:2;1318:9;1314:18;1308:25;1292:41;;1358:2;1348:8;1345:16;1342:2;;;1374:1;1371;1364:12;1342:2;;1397:63;1452:7;1441:8;1430:9;1426:24;1397:63;:::i;:::-;1387:73;;;1022:444;;;;;:::o;1471:380::-;1550:1;1546:12;;;;1593;;;1614:2;;1668:4;1660:6;1656:17;1646:27;;1614:2;1721;1713:6;1710:14;1690:18;1687:38;1684:2;;;1767:10;1762:3;1758:20;1755:1;1748:31;1802:4;1799:1;1792:15;1830:4;1827:1;1820:15;1684:2;;1526:325;;;:::o;1856:127::-;1917:10;1912:3;1908:20;1905:1;1898:31;1948:4;1945:1;1938:15;1972:4;1969:1;1962:15;1888:95;1403:11214:1;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_697": {
									"entryPoint": null,
									"id": 697,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_632": {
									"entryPoint": 856,
									"id": 632,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_686": {
									"entryPoint": null,
									"id": 686,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_813": {
									"entryPoint": null,
									"id": 813,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_675": {
									"entryPoint": 1148,
									"id": 675,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_459": {
									"entryPoint": 1270,
									"id": 459,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_254": {
									"entryPoint": 813,
									"id": 254,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_279": {
									"entryPoint": 562,
									"id": 279,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_211": {
									"entryPoint": null,
									"id": 211,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_187": {
									"entryPoint": null,
									"id": 187,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_382": {
									"entryPoint": 671,
									"id": 382,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_341": {
									"entryPoint": 622,
									"id": 341,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_167": {
									"entryPoint": 416,
									"id": 167,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_177": {
									"entryPoint": 656,
									"id": 177,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_197": {
									"entryPoint": null,
									"id": 197,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_312": {
									"entryPoint": 586,
									"id": 312,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_236": {
									"entryPoint": 799,
									"id": 236,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 1732,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1760,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 1794,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 1845,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 1905,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1947,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2032,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 2070,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5806:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "63:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "165:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "174:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "177:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "150:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "155:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "159:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:50:8"
															},
															"nodeType": "YulIf",
															"src": "111:2:8"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "42:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:8",
														"type": ""
													}
												],
												"src": "14:173:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "262:116:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "308:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "317:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "320:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "310:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "310:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "283:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "292:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "279:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "279:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "304:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "275:32:8"
															},
															"nodeType": "YulIf",
															"src": "272:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "333:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "362:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "343:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "343:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "333:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "228:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "239:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "251:6:8",
														"type": ""
													}
												],
												"src": "192:186:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "470:173:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "516:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "525:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "528:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "518:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "518:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "518:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "491:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "500:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "487:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "487:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "512:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "483:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "483:32:8"
															},
															"nodeType": "YulIf",
															"src": "480:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "541:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "570:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "551:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "551:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "541:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "589:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "622:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "633:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "618:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "618:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "599:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "599:38:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "589:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "428:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "439:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "451:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "459:6:8",
														"type": ""
													}
												],
												"src": "383:260:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "752:224:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "798:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "807:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "810:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "800:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "800:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "800:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "773:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "782:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "769:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "769:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "794:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "765:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "765:32:8"
															},
															"nodeType": "YulIf",
															"src": "762:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "823:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "852:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "833:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "833:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "823:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "871:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "904:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "915:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "900:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "900:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "881:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "881:38:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "871:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "928:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "955:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "966:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "951:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "951:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "938:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "938:32:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "928:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "702:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "713:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "725:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "733:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "741:6:8",
														"type": ""
													}
												],
												"src": "648:328:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1068:167:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1114:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1123:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1126:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1116:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1116:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1116:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1089:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1098:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1085:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1085:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1110:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1081:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1081:32:8"
															},
															"nodeType": "YulIf",
															"src": "1078:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1139:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1168:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1149:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1149:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1139:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1187:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1214:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1225:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1210:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1210:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1197:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1197:32:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1187:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1026:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1037:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1049:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1057:6:8",
														"type": ""
													}
												],
												"src": "981:254:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1335:92:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1345:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1357:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1368:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1353:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1353:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1345:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1387:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1412:6:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1405:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1405:14:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1398:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1398:22:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1380:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1380:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1380:41:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1304:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1315:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1326:4:8",
														"type": ""
													}
												],
												"src": "1240:187:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1553:476:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1563:12:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1573:2:8",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1567:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1591:9:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1602:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1584:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1584:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1584:21:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1614:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1634:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1628:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1628:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1618:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1661:9:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1672:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1657:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1657:18:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1677:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1650:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1650:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1650:34:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1693:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1702:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1697:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1762:90:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1791:9:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1802:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1787:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1787:17:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1806:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1783:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1783:26:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "1825:6:8"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "1833:1:8"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "1821:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1821:14:8"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "1837:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1817:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1817:23:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1811:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1811:30:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1776:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1776:66:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1776:66:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1723:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1726:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1720:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1720:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1734:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1736:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1745:1:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1748:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1741:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1741:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1736:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1716:3:8",
																"statements": []
															},
															"src": "1712:140:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1886:66:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1915:9:8"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "1926:6:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1911:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1911:22:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1935:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1907:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1907:31:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1940:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1900:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1900:42:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1900:42:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1867:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1870:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1864:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1864:13:8"
															},
															"nodeType": "YulIf",
															"src": "1861:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1961:62:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1977:9:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1996:6:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2004:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1992:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1992:15:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2013:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2009:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2009:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1988:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1988:29:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1973:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1973:45:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2020:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1969:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1969:54:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1961:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1522:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1533:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1544:4:8",
														"type": ""
													}
												],
												"src": "1432:597:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2208:225:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2225:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2236:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2218:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2218:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2218:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2259:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2270:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2255:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2255:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2275:2:8",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2248:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2248:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2248:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2298:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2309:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2294:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2294:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2314:34:8",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2287:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2287:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2287:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2369:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2380:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2365:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2365:18:8"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2385:5:8",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2358:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2358:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2358:33:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2400:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2412:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2423:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2408:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2408:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2400:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2185:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2199:4:8",
														"type": ""
													}
												],
												"src": "2034:399:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2612:224:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2629:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2640:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2622:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2622:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2622:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2663:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2674:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2659:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2659:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2679:2:8",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2652:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2652:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2652:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2702:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2713:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2698:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2698:18:8"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2718:34:8",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2691:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2691:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2691:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2773:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2784:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2769:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2769:18:8"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2789:4:8",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2762:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2762:32:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2762:32:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2803:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2815:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2826:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2811:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2811:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2803:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2589:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2603:4:8",
														"type": ""
													}
												],
												"src": "2438:398:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3015:179:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3032:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3043:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3025:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3025:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3025:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3066:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3077:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3062:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3062:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3082:2:8",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3055:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3055:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3055:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3105:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3116:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3101:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3101:18:8"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3121:31:8",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3094:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3094:59:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3094:59:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3162:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3174:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3185:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3170:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3170:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3162:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2992:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3006:4:8",
														"type": ""
													}
												],
												"src": "2841:353:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3373:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3390:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3401:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3383:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3383:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3383:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3424:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3435:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3420:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3420:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3440:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3413:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3413:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3413:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3463:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3474:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3459:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3459:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3479:34:8",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3452:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3452:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3452:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3534:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3545:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3530:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3530:18:8"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3550:8:8",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3523:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3523:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3523:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3568:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3580:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3591:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3576:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3576:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3568:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3350:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3364:4:8",
														"type": ""
													}
												],
												"src": "3199:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3780:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3797:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3808:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3790:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3790:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3790:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3831:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3842:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3827:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3827:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3847:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3820:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3820:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3820:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3870:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3881:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3866:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3866:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3886:34:8",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3859:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3859:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3859:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3941:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3952:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3937:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3937:18:8"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3957:7:8",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3930:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3930:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3930:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3974:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3986:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3997:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3982:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3982:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3974:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3757:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3771:4:8",
														"type": ""
													}
												],
												"src": "3606:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4186:226:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4203:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4214:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4196:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4196:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4196:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4237:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4248:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4233:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4233:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4253:2:8",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4226:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4226:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4226:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4276:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4287:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4272:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4272:18:8"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4292:34:8",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4265:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4265:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4265:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4347:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4358:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4343:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4343:18:8"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4363:6:8",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4336:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4336:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4336:34:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4379:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4391:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4402:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4387:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4387:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4379:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4163:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4177:4:8",
														"type": ""
													}
												],
												"src": "4012:400:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4591:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4608:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4619:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4601:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4601:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4601:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4642:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4653:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4638:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4638:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4658:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4631:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4631:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4631:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4681:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4692:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4677:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4677:18:8"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4697:34:8",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4670:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4670:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4670:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4752:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4763:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4748:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4748:18:8"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4768:7:8",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4741:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4741:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4741:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4785:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4797:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4808:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4793:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4793:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4785:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4568:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4582:4:8",
														"type": ""
													}
												],
												"src": "4417:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4924:76:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4934:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4946:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4957:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4942:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4942:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4934:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4976:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4987:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4969:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4969:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4969:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4893:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4904:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4915:4:8",
														"type": ""
													}
												],
												"src": "4823:177:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5102:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5112:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5124:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5135:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5120:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5120:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5112:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5154:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5169:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5177:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5165:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5165:17:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5147:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5147:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5147:36:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5071:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5082:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5093:4:8",
														"type": ""
													}
												],
												"src": "5005:184:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5242:177:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5277:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5298:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5305:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5310:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5301:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5301:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5291:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5291:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5291:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5342:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5345:4:8",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5335:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5335:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5335:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5370:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5373:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5363:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5363:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5363:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5258:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5265:1:8"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "5261:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5261:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5255:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5255:13:8"
															},
															"nodeType": "YulIf",
															"src": "5252:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5397:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5408:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5411:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5404:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5404:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "5397:3:8"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5225:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5228:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "5234:3:8",
														"type": ""
													}
												],
												"src": "5194:225:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5479:325:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5489:22:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5503:1:8",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5506:4:8"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5499:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5499:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "5489:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5520:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5550:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5556:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5546:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5546:12:8"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "5524:18:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5597:31:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5599:27:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "5613:6:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5621:4:8",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "5609:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5609:17:8"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5599:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5577:18:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5570:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5570:26:8"
															},
															"nodeType": "YulIf",
															"src": "5567:2:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5687:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5708:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5715:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5720:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5711:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5711:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5701:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5701:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5701:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5752:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5755:4:8",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5745:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5745:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5745:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5780:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5783:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5773:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5773:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5773:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5643:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5666:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5674:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5663:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5663:14:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "5640:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5640:38:8"
															},
															"nodeType": "YulIf",
															"src": "5637:2:8"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "5459:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5468:6:8",
														"type": ""
													}
												],
												"src": "5424:380:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c3919061079b565b60405180910390f35b6100df6100da366004610771565b610232565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610735565b61024a565b604051601281526020016100c3565b6100df610131366004610771565b61026e565b6100f36101443660046106e0565b6001600160a01b031660009081526020819052604090205490565b6100b6610290565b6100df610175366004610771565b61029f565b6100df610188366004610771565b61031f565b6100f361019b366004610702565b61032d565b6060600380546101af90610816565b80601f01602080910402602001604051908101604052809291908181526020018280546101db90610816565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b91906107f0565b610358565b6060600480546101af90610816565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260208190526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061066b9084906107f0565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106b791815260200190565b60405180910390a36104f0565b80356001600160a01b03811681146106db57600080fd5b919050565b6000602082840312156106f257600080fd5b6106fb826106c4565b9392505050565b6000806040838503121561071557600080fd5b61071e836106c4565b915061072c602084016106c4565b90509250929050565b60008060006060848603121561074a57600080fd5b610753846106c4565b9250610761602085016106c4565b9150604084013590509250925092565b6000806040838503121561078457600080fd5b61078d836106c4565b946020939093013593505050565b600060208083528351808285015260005b818110156107c8578581018301518582016040015282016107ac565b818111156107da576000604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561081157634e487b7160e01b600052601160045260246000fd5b500190565b600181811c9082168061082a57607f821691505b6020821081141561084b57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220d76346b3f386c40d8f0a4526ca75a064c0f0baf6deebf9d1893844dfe9e5299e64736f6c63430008060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x79B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x735 JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x702 JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x816 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x816 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x7F0 JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x816 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x66B SWAP1 DUP5 SWAP1 PUSH2 0x7F0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6B7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6FB DUP3 PUSH2 0x6C4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x71E DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH2 0x72C PUSH1 0x20 DUP5 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x753 DUP5 PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP PUSH2 0x761 PUSH1 0x20 DUP6 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x784 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x78D DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7C8 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x7AC JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7DA JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x811 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x82A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x84B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 PUSH4 0x46B3F386 0xC4 0xD DUP16 EXP GASLIMIT 0x26 0xCA PUSH22 0xA064C0F0BAF6DEEBF9D1893844DFE9E5299E64736F6C PUSH4 0x43000806 STOP CALLER ",
							"sourceMap": "1403:11214:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4433:197;;;;;;:::i;:::-;;:::i;:::-;;;1405:14:8;;1398:22;1380:41;;1368:2;1353:18;4433:197:1;1335:92:8;3244:106:1;3331:12;;3244:106;;;4969:25:8;;;4957:2;4942:18;3244:106:1;4924:76:8;5192:286:1;;;;;;:::i;:::-;;:::i;3093:91::-;;;3175:2;5147:36:8;;5135:2;5120:18;3093:91:1;5102:87:8;5873:234:1;;;;;;:::i;:::-;;:::i;3408:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3508:18:1;3482:7;3508:18;;;;;;;;;;;;3408:125;2367:102;;;:::i;6594:427::-;;;;;;:::i;:::-;;:::i;3729:189::-;;;;;;:::i;:::-;;:::i;3976:149::-;;;;;;:::i;:::-;;:::i;2156:98::-;2210:13;2242:5;2235:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98;:::o;4433:197::-;4516:4;719:10:4;4570:32:1;719:10:4;4586:7:1;4595:6;4570:8;:32::i;:::-;-1:-1:-1;4619:4:1;;4433:197;-1:-1:-1;;;4433:197:1:o;5192:286::-;5319:4;719:10:4;5375:38:1;5391:4;719:10:4;5406:6:1;5375:15;:38::i;:::-;5423:27;5433:4;5439:2;5443:6;5423:9;:27::i;:::-;-1:-1:-1;5467:4:1;;5192:286;-1:-1:-1;;;;5192:286:1:o;5873:234::-;5961:4;719:10:4;6015:64:1;719:10:4;6031:7:1;6068:10;6040:25;719:10:4;6031:7:1;6040:9;:25::i;:::-;:38;;;;:::i;:::-;6015:8;:64::i;2367:102::-;2423:13;2455:7;2448:14;;;;;:::i;6594:427::-;6687:4;719:10:4;6687:4:1;6768:25;719:10:4;6785:7:1;6768:9;:25::i;:::-;6741:52;;6831:15;6811:16;:35;;6803:85;;;;-1:-1:-1;;;6803:85:1;;4619:2:8;6803:85:1;;;4601:21:8;4658:2;4638:18;;;4631:30;4697:34;4677:18;;;4670:62;-1:-1:-1;;;4748:18:8;;;4741:35;4793:19;;6803:85:1;;;;;;;;;6922:60;6931:5;6938:7;6966:15;6947:16;:34;6922:8;:60::i;3729:189::-;3808:4;719:10:4;3862:28:1;719:10:4;3879:2:1;3883:6;3862:9;:28::i;3976:149::-;-1:-1:-1;;;;;4091:18:1;;;4065:7;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3976:149::o;10110:370::-;-1:-1:-1;;;;;10241:19:1;;10233:68;;;;-1:-1:-1;;;10233:68:1;;4214:2:8;10233:68:1;;;4196:21:8;4253:2;4233:18;;;4226:30;4292:34;4272:18;;;4265:62;-1:-1:-1;;;4343:18:8;;;4336:34;4387:19;;10233:68:1;4186:226:8;10233:68:1;-1:-1:-1;;;;;10319:21:1;;10311:68;;;;-1:-1:-1;;;10311:68:1;;2640:2:8;10311:68:1;;;2622:21:8;2679:2;2659:18;;;2652:30;2718:34;2698:18;;;2691:62;-1:-1:-1;;;2769:18:8;;;2762:32;2811:19;;10311:68:1;2612:224:8;10311:68:1;-1:-1:-1;;;;;10390:18:1;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10441:32;;4969:25:8;;;10441:32:1;;4942:18:8;10441:32:1;;;;;;;10110:370;;;:::o;10761:441::-;10891:24;10918:25;10928:5;10935:7;10918:9;:25::i;:::-;10891:52;;-1:-1:-1;;10957:16:1;:37;10953:243;;11038:6;11018:16;:26;;11010:68;;;;-1:-1:-1;;;11010:68:1;;3043:2:8;11010:68:1;;;3025:21:8;3082:2;3062:18;;;3055:30;3121:31;3101:18;;;3094:59;3170:18;;11010:68:1;3015:179:8;11010:68:1;11120:51;11129:5;11136:7;11164:6;11145:16;:25;11120:8;:51::i;:::-;10881:321;10761:441;;;:::o;7475:651::-;-1:-1:-1;;;;;7601:18:1;;7593:68;;;;-1:-1:-1;;;7593:68:1;;3808:2:8;7593:68:1;;;3790:21:8;3847:2;3827:18;;;3820:30;3886:34;3866:18;;;3859:62;-1:-1:-1;;;3937:18:8;;;3930:35;3982:19;;7593:68:1;3780:227:8;7593:68:1;-1:-1:-1;;;;;7679:16:1;;7671:64;;;;-1:-1:-1;;;7671:64:1;;2236:2:8;7671:64:1;;;2218:21:8;2275:2;2255:18;;;2248:30;2314:34;2294:18;;;2287:62;-1:-1:-1;;;2365:18:8;;;2358:33;2408:19;;7671:64:1;2208:225:8;7671:64:1;-1:-1:-1;;;;;7817:15:1;;7795:19;7817:15;;;;;;;;;;;7850:21;;;;7842:72;;;;-1:-1:-1;;;7842:72:1;;3401:2:8;7842:72:1;;;3383:21:8;3440:2;3420:18;;;3413:30;3479:34;3459:18;;;3452:62;-1:-1:-1;;;3530:18:8;;;3523:36;3576:19;;7842:72:1;3373:228:8;7842:72:1;-1:-1:-1;;;;;7948:15:1;;;:9;:15;;;;;;;;;;;7966:20;;;7948:38;;8006:13;;;;;;;;:23;;7980:6;;7948:9;8006:23;;7980:6;;8006:23;:::i;:::-;;;;;;;;8060:2;-1:-1:-1;;;;;8045:26:1;8054:4;-1:-1:-1;;;;;8045:26:1;;8064:6;8045:26;;;;4969:25:8;;4957:2;4942:18;;4924:76;8045:26:1;;;;;;;;8082:37;11786:121;14:173:8;82:20;;-1:-1:-1;;;;;131:31:8;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:186::-;251:6;304:2;292:9;283:7;279:23;275:32;272:2;;;320:1;317;310:12;272:2;343:29;362:9;343:29;:::i;:::-;333:39;262:116;-1:-1:-1;;;262:116:8:o;383:260::-;451:6;459;512:2;500:9;491:7;487:23;483:32;480:2;;;528:1;525;518:12;480:2;551:29;570:9;551:29;:::i;:::-;541:39;;599:38;633:2;622:9;618:18;599:38;:::i;:::-;589:48;;470:173;;;;;:::o;648:328::-;725:6;733;741;794:2;782:9;773:7;769:23;765:32;762:2;;;810:1;807;800:12;762:2;833:29;852:9;833:29;:::i;:::-;823:39;;881:38;915:2;904:9;900:18;881:38;:::i;:::-;871:48;;966:2;955:9;951:18;938:32;928:42;;752:224;;;;;:::o;981:254::-;1049:6;1057;1110:2;1098:9;1089:7;1085:23;1081:32;1078:2;;;1126:1;1123;1116:12;1078:2;1149:29;1168:9;1149:29;:::i;:::-;1139:39;1225:2;1210:18;;;;1197:32;;-1:-1:-1;;;1068:167:8:o;1432:597::-;1544:4;1573:2;1602;1591:9;1584:21;1634:6;1628:13;1677:6;1672:2;1661:9;1657:18;1650:34;1702:1;1712:140;1726:6;1723:1;1720:13;1712:140;;;1821:14;;;1817:23;;1811:30;1787:17;;;1806:2;1783:26;1776:66;1741:10;;1712:140;;;1870:6;1867:1;1864:13;1861:2;;;1940:1;1935:2;1926:6;1915:9;1911:22;1907:31;1900:42;1861:2;-1:-1:-1;2013:2:8;1992:15;-1:-1:-1;;1988:29:8;1973:45;;;;2020:2;1969:54;;1553:476;-1:-1:-1;;;1553:476:8:o;5194:225::-;5234:3;5265:1;5261:6;5258:1;5255:13;5252:2;;;5310:10;5305:3;5301:20;5298:1;5291:31;5345:4;5342:1;5335:15;5373:4;5370:1;5363:15;5252:2;-1:-1:-1;5404:9:8;;5242:177::o;5424:380::-;5503:1;5499:12;;;;5546;;;5567:2;;5621:4;5613:6;5609:17;5599:27;;5567:2;5674;5666:6;5663:14;5643:18;5640:38;5637:2;;;5720:10;5715:3;5711:20;5708:1;5701:31;5755:4;5752:1;5745:15;5783:4;5780:1;5773:15;5637:2;;5479:325;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "436600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24624",
								"balanceOf(address)": "2562",
								"decimals()": "266",
								"decreaseAllowance(address,uint256)": "27016",
								"increaseAllowance(address,uint256)": "26978",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2326",
								"transfer(address,uint256)": "51270",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSHSIZE",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "CODESIZE",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSHSIZE",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "3"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "tag",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2044,
									"end": 2049,
									"name": "PUSH",
									"source": 1,
									"value": "3"
								},
								{
									"begin": 2044,
									"end": 2049,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "7"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "tag",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2067,
									"end": 2074,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 2067,
									"end": 2074,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "7"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "tag",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "21"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "tag",
									"source": 1,
									"value": "7"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "10"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "11"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "tag",
									"source": 1,
									"value": "10"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "KECCAK256",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "1F"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "13"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "tag",
									"source": 1,
									"value": "13"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "1F"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "14"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "NOT",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "tag",
									"source": 1,
									"value": "14"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "tag",
									"source": 1,
									"value": "15"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "GT",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "15"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "tag",
									"source": 1,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "17"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "18"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "tag",
									"source": 1,
									"value": "17"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "tag",
									"source": 1,
									"value": "18"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "tag",
									"source": 1,
									"value": "19"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "GT",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "17"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "19"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 14,
									"end": 899,
									"name": "tag",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 14,
									"end": 899,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 68,
									"end": 73,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 121,
									"end": 124,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 114,
									"end": 118,
									"name": "PUSH",
									"source": 8,
									"value": "1F"
								},
								{
									"begin": 106,
									"end": 112,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 102,
									"end": 119,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 98,
									"end": 125,
									"name": "SLT",
									"source": 8
								},
								{
									"begin": 88,
									"end": 90,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 88,
									"end": 90,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 139,
									"end": 140,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 136,
									"end": 137,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 129,
									"end": 141,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 88,
									"end": 90,
									"name": "tag",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 88,
									"end": 90,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 162,
									"end": 175,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 162,
									"end": 175,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 224,
									"end": 234,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 224,
									"end": 234,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 224,
									"end": 234,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 221,
									"end": 223,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 221,
									"end": 223,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "26"
								},
								{
									"begin": 221,
									"end": 223,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 237,
									"end": 255,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "26"
								},
								{
									"begin": 237,
									"end": 255,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "27"
								},
								{
									"begin": 237,
									"end": 255,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 237,
									"end": 255,
									"name": "tag",
									"source": 8,
									"value": "26"
								},
								{
									"begin": 237,
									"end": 255,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 312,
									"end": 314,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 306,
									"end": 315,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 280,
									"end": 282,
									"name": "PUSH",
									"source": 8,
									"value": "1F"
								},
								{
									"begin": 366,
									"end": 379,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 366,
									"end": 379,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 362,
									"end": 384,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 362,
									"end": 384,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 362,
									"end": 384,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 386,
									"end": 388,
									"name": "PUSH",
									"source": 8,
									"value": "3F"
								},
								{
									"begin": 358,
									"end": 389,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 354,
									"end": 394,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 342,
									"end": 395,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 342,
									"end": 395,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 342,
									"end": 395,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 410,
									"end": 428,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 410,
									"end": 428,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 410,
									"end": 428,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 430,
									"end": 452,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 430,
									"end": 452,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 430,
									"end": 452,
									"name": "LT",
									"source": 8
								},
								{
									"begin": 407,
									"end": 453,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 404,
									"end": 406,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 404,
									"end": 406,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "29"
								},
								{
									"begin": 404,
									"end": 406,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 456,
									"end": 474,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "29"
								},
								{
									"begin": 456,
									"end": 474,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "27"
								},
								{
									"begin": 456,
									"end": 474,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 456,
									"end": 474,
									"name": "tag",
									"source": 8,
									"value": "29"
								},
								{
									"begin": 456,
									"end": 474,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 496,
									"end": 506,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 492,
									"end": 494,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 485,
									"end": 507,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 531,
									"end": 533,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 523,
									"end": 529,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 516,
									"end": 534,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 553,
									"end": 557,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 543,
									"end": 557,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 543,
									"end": 557,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 598,
									"end": 601,
									"name": "DUP7",
									"source": 8
								},
								{
									"begin": 593,
									"end": 595,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 588,
									"end": 590,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 580,
									"end": 586,
									"name": "DUP9",
									"source": 8
								},
								{
									"begin": 576,
									"end": 591,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 572,
									"end": 596,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 569,
									"end": 602,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 566,
									"end": 568,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 566,
									"end": 568,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "30"
								},
								{
									"begin": 566,
									"end": 568,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 615,
									"end": 616,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 612,
									"end": 613,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 605,
									"end": 617,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 566,
									"end": 568,
									"name": "tag",
									"source": 8,
									"value": "30"
								},
								{
									"begin": 566,
									"end": 568,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 637,
									"end": 638,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 628,
									"end": 638,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 628,
									"end": 638,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 647,
									"end": 780,
									"name": "tag",
									"source": 8,
									"value": "31"
								},
								{
									"begin": 647,
									"end": 780,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 661,
									"end": 663,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 658,
									"end": 659,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 655,
									"end": 664,
									"name": "LT",
									"source": 8
								},
								{
									"begin": 647,
									"end": 780,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 647,
									"end": 780,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "33"
								},
								{
									"begin": 647,
									"end": 780,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 749,
									"end": 763,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 749,
									"end": 763,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 749,
									"end": 763,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 745,
									"end": 768,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 745,
									"end": 768,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 739,
									"end": 769,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 718,
									"end": 732,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 718,
									"end": 732,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 718,
									"end": 732,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 714,
									"end": 737,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 714,
									"end": 737,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 707,
									"end": 770,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 672,
									"end": 682,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 672,
									"end": 682,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 672,
									"end": 682,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 672,
									"end": 682,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 647,
									"end": 780,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "31"
								},
								{
									"begin": 647,
									"end": 780,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 647,
									"end": 780,
									"name": "tag",
									"source": 8,
									"value": "33"
								},
								{
									"begin": 647,
									"end": 780,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 798,
									"end": 800,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 795,
									"end": 796,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 792,
									"end": 801,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 789,
									"end": 791,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 789,
									"end": 791,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "34"
								},
								{
									"begin": 789,
									"end": 791,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 857,
									"end": 858,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 852,
									"end": 854,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 847,
									"end": 849,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 839,
									"end": 845,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 835,
									"end": 850,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 831,
									"end": 855,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 824,
									"end": 859,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 789,
									"end": 791,
									"name": "tag",
									"source": 8,
									"value": "34"
								},
								{
									"begin": 789,
									"end": 791,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 887,
									"end": 893,
									"name": "SWAP7",
									"source": 8
								},
								{
									"begin": 78,
									"end": 899,
									"name": "SWAP6",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 78,
									"end": 899,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 904,
									"end": 1466,
									"name": "tag",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 904,
									"end": 1466,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1003,
									"end": 1009,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1011,
									"end": 1017,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1064,
									"end": 1066,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1052,
									"end": 1061,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1043,
									"end": 1050,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 1039,
									"end": 1062,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 1035,
									"end": 1067,
									"name": "SLT",
									"source": 8
								},
								{
									"begin": 1032,
									"end": 1034,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1032,
									"end": 1034,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "36"
								},
								{
									"begin": 1032,
									"end": 1034,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1080,
									"end": 1081,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1077,
									"end": 1078,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1070,
									"end": 1082,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1032,
									"end": 1034,
									"name": "tag",
									"source": 8,
									"value": "36"
								},
								{
									"begin": 1032,
									"end": 1034,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1107,
									"end": 1123,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1107,
									"end": 1123,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1172,
									"end": 1186,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1172,
									"end": 1186,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1172,
									"end": 1186,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 1169,
									"end": 1171,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1169,
									"end": 1171,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "37"
								},
								{
									"begin": 1169,
									"end": 1171,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1199,
									"end": 1200,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1196,
									"end": 1197,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1189,
									"end": 1201,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1169,
									"end": 1171,
									"name": "tag",
									"source": 8,
									"value": "37"
								},
								{
									"begin": 1169,
									"end": 1171,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1222,
									"end": 1283,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "38"
								},
								{
									"begin": 1275,
									"end": 1282,
									"name": "DUP7",
									"source": 8
								},
								{
									"begin": 1266,
									"end": 1272,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1255,
									"end": 1264,
									"name": "DUP8",
									"source": 8
								},
								{
									"begin": 1251,
									"end": 1273,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1222,
									"end": 1283,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 1222,
									"end": 1283,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 1222,
									"end": 1283,
									"name": "tag",
									"source": 8,
									"value": "38"
								},
								{
									"begin": 1222,
									"end": 1283,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1212,
									"end": 1283,
									"name": "SWAP4",
									"source": 8
								},
								{
									"begin": 1212,
									"end": 1283,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1329,
									"end": 1331,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1318,
									"end": 1327,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 1314,
									"end": 1332,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1308,
									"end": 1333,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1292,
									"end": 1333,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1292,
									"end": 1333,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1358,
									"end": 1360,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1348,
									"end": 1356,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1345,
									"end": 1361,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 1342,
									"end": 1344,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1342,
									"end": 1344,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "39"
								},
								{
									"begin": 1342,
									"end": 1344,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1374,
									"end": 1375,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1371,
									"end": 1372,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1364,
									"end": 1376,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1342,
									"end": 1344,
									"name": "tag",
									"source": 8,
									"value": "39"
								},
								{
									"begin": 1342,
									"end": 1344,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1342,
									"end": 1344,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1397,
									"end": 1460,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1452,
									"end": 1459,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 1441,
									"end": 1449,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1430,
									"end": 1439,
									"name": "DUP7",
									"source": 8
								},
								{
									"begin": 1426,
									"end": 1450,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1397,
									"end": 1460,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 1397,
									"end": 1460,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 1397,
									"end": 1460,
									"name": "tag",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1397,
									"end": 1460,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1387,
									"end": 1460,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1387,
									"end": 1460,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1387,
									"end": 1460,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1022,
									"end": 1466,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1022,
									"end": 1466,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1022,
									"end": 1466,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1022,
									"end": 1466,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1022,
									"end": 1466,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1022,
									"end": 1466,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 1471,
									"end": 1851,
									"name": "tag",
									"source": 8,
									"value": "11"
								},
								{
									"begin": 1471,
									"end": 1851,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1550,
									"end": 1551,
									"name": "PUSH",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1546,
									"end": 1558,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1546,
									"end": 1558,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1546,
									"end": 1558,
									"name": "SHR",
									"source": 8
								},
								{
									"begin": 1546,
									"end": 1558,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1593,
									"end": 1605,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1593,
									"end": 1605,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1593,
									"end": 1605,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1614,
									"end": 1616,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "42"
								},
								{
									"begin": 1614,
									"end": 1616,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1668,
									"end": 1672,
									"name": "PUSH",
									"source": 8,
									"value": "7F"
								},
								{
									"begin": 1660,
									"end": 1666,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1656,
									"end": 1673,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1646,
									"end": 1673,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1646,
									"end": 1673,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1614,
									"end": 1616,
									"name": "tag",
									"source": 8,
									"value": "42"
								},
								{
									"begin": 1614,
									"end": 1616,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1721,
									"end": 1723,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1713,
									"end": 1719,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1710,
									"end": 1724,
									"name": "LT",
									"source": 8
								},
								{
									"begin": 1690,
									"end": 1708,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1687,
									"end": 1725,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 1684,
									"end": 1686,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1684,
									"end": 1686,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "43"
								},
								{
									"begin": 1684,
									"end": 1686,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1767,
									"end": 1777,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B71"
								},
								{
									"begin": 1762,
									"end": 1765,
									"name": "PUSH",
									"source": 8,
									"value": "E0"
								},
								{
									"begin": 1758,
									"end": 1778,
									"name": "SHL",
									"source": 8
								},
								{
									"begin": 1755,
									"end": 1756,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1748,
									"end": 1779,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1802,
									"end": 1806,
									"name": "PUSH",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 1799,
									"end": 1800,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 1792,
									"end": 1807,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1830,
									"end": 1834,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 1827,
									"end": 1828,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1820,
									"end": 1835,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1684,
									"end": 1686,
									"name": "tag",
									"source": 8,
									"value": "43"
								},
								{
									"begin": 1684,
									"end": 1686,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1684,
									"end": 1686,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1526,
									"end": 1851,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1526,
									"end": 1851,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1526,
									"end": 1851,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1526,
									"end": 1851,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 1856,
									"end": 1983,
									"name": "tag",
									"source": 8,
									"value": "27"
								},
								{
									"begin": 1856,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1917,
									"end": 1927,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B71"
								},
								{
									"begin": 1912,
									"end": 1915,
									"name": "PUSH",
									"source": 8,
									"value": "E0"
								},
								{
									"begin": 1908,
									"end": 1928,
									"name": "SHL",
									"source": 8
								},
								{
									"begin": 1905,
									"end": 1906,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1898,
									"end": 1929,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1948,
									"end": 1952,
									"name": "PUSH",
									"source": 8,
									"value": "41"
								},
								{
									"begin": 1945,
									"end": 1946,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 1938,
									"end": 1953,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1972,
									"end": 1976,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 1969,
									"end": 1970,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1962,
									"end": 1977,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1888,
									"end": 1983,
									"name": "tag",
									"source": 8,
									"value": "21"
								},
								{
									"begin": 1888,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12617,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d76346b3f386c40d8f0a4526ca75a064c0f0baf6deebf9d1893844dfe9e5299e64736f6c63430008060033",
									".code": [
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "39509351"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "39509351"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "70A08231"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "95D89B41"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "A457C2D7"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "A9059CBB"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "DD62ED3E"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "6FDDE03"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "95EA7B3"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "18160DDD"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "23B872DD"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "313CE567"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1403,
											"end": 12617,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1405,
											"end": 1419,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1405,
											"end": 1419,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1398,
											"end": 1420,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1421,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1421,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1368,
											"end": 1370,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1353,
											"end": 1371,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 1335,
											"end": 1427,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3331,
											"end": 3343,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 3331,
											"end": 3343,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "tag",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4969,
											"end": 4994,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4969,
											"end": 4994,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4969,
											"end": 4994,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4957,
											"end": 4959,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4942,
											"end": 4960,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 4924,
											"end": 5000,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "tag",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3175,
											"end": 3177,
											"name": "PUSH",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 5147,
											"end": 5183,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5147,
											"end": 5183,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5135,
											"end": 5137,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5120,
											"end": 5138,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 5102,
											"end": 5189,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "tag",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "tag",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3482,
											"end": 3489,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "tag",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "tag",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "tag",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2210,
											"end": 2223,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2242,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4516,
											"end": 4520,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4586,
											"end": 4593,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4595,
											"end": 4601,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4570,
											"end": 4578,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "tag",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4619,
											"end": 4623,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4619,
											"end": 4623,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "tag",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5319,
											"end": 5323,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 5391,
											"end": 5395,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5406,
											"end": 5412,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5375,
											"end": 5390,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "tag",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 5433,
											"end": 5437,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5439,
											"end": 5441,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5443,
											"end": 5449,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5423,
											"end": 5432,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "tag",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5467,
											"end": 5471,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5467,
											"end": 5471,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "tag",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5961,
											"end": 5965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 6015,
											"end": 6079,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6031,
											"end": 6038,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6068,
											"end": 6078,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6040,
											"end": 6065,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6031,
											"end": 6038,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6040,
											"end": 6049,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 6040,
											"end": 6065,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6040,
											"end": 6065,
											"name": "tag",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 6040,
											"end": 6065,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6040,
											"end": 6078,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 6040,
											"end": 6078,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6040,
											"end": 6078,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6040,
											"end": 6078,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "88"
										},
										{
											"begin": 6040,
											"end": 6078,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6040,
											"end": 6078,
											"name": "tag",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 6040,
											"end": 6078,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6015,
											"end": 6023,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 6015,
											"end": 6079,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "tag",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2423,
											"end": 2436,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "tag",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6687,
											"end": 6691,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 6687,
											"end": 6691,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6768,
											"end": 6793,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6785,
											"end": 6792,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 6768,
											"end": 6777,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 6768,
											"end": 6793,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6768,
											"end": 6793,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 6768,
											"end": 6793,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6741,
											"end": 6793,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6741,
											"end": 6793,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6831,
											"end": 6846,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6811,
											"end": 6827,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6811,
											"end": 6846,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 6811,
											"end": 6846,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4619,
											"end": 4621,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4601,
											"end": 4622,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4658,
											"end": 4660,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 4638,
											"end": 4656,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4638,
											"end": 4656,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4638,
											"end": 4656,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4661,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4697,
											"end": 4731,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 4677,
											"end": 4695,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4677,
											"end": 4695,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4677,
											"end": 4695,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4670,
											"end": 4732,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4748,
											"end": 4766,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4748,
											"end": 4766,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4748,
											"end": 4766,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4741,
											"end": 4776,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4793,
											"end": 4812,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 4793,
											"end": 4812,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "tag",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "tag",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6922,
											"end": 6982,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 6931,
											"end": 6936,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6938,
											"end": 6945,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 6966,
											"end": 6981,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 6947,
											"end": 6963,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6947,
											"end": 6981,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6922,
											"end": 6930,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 6922,
											"end": 6982,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "tag",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3808,
											"end": 3812,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 3862,
											"end": 3890,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3879,
											"end": 3881,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 3883,
											"end": 3889,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 3862,
											"end": 3871,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 3862,
											"end": 3890,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4065,
											"end": 4072,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4102,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 10110,
											"end": 10480,
											"name": "tag",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 10110,
											"end": 10480,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10241,
											"end": 10260,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10241,
											"end": 10260,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4214,
											"end": 4216,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4196,
											"end": 4217,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4253,
											"end": 4255,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4233,
											"end": 4251,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4233,
											"end": 4251,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4233,
											"end": 4251,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4226,
											"end": 4256,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4292,
											"end": 4326,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 4272,
											"end": 4290,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4272,
											"end": 4290,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4272,
											"end": 4290,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4265,
											"end": 4327,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4343,
											"end": 4361,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4343,
											"end": 4361,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4343,
											"end": 4361,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4336,
											"end": 4370,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4387,
											"end": 4406,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 4387,
											"end": 4406,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4186,
											"end": 4412,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "tag",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 10233,
											"end": 10301,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10319,
											"end": 10340,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10319,
											"end": 10340,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10311,
											"end": 10379,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 10311,
											"end": 10379,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10311,
											"end": 10379,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10311,
											"end": 10379,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10311,
											"end": 10379,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10311,
											"end": 10379,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2640,
											"end": 2642,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10311,
											"end": 10379,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10311,
											"end": 10379,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10311,
											"end": 10379,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2622,
											"end": 2643,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2679,
											"end": 2681,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 2659,
											"end": 2677,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2659,
											"end": 2677,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2659,
											"end": 2677,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2652,
											"end": 2682,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2718,
											"end": 2752,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 2698,
											"end": 2716,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 2698,
											"end": 2716,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2698,
											"end": 2716,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2691,
											"end": 2753,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2769,
											"end": 2787,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 2769,
											"end": 2787,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2769,
											"end": 2787,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2762,
											"end": 2794,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2811,
											"end": 2830,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 2811,
											"end": 2830,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10311,
											"end": 10379,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2612,
											"end": 2836,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10311,
											"end": 10379,
											"name": "tag",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 10311,
											"end": 10379,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10401,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10408,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10417,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10417,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10417,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10417,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10417,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10417,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10417,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10417,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10417,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10417,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10417,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10417,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10417,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10426,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10426,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10390,
											"end": 10426,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 10441,
											"end": 10473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10441,
											"end": 10473,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4969,
											"end": 4994,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4969,
											"end": 4994,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4969,
											"end": 4994,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10441,
											"end": 10473,
											"name": "PUSH",
											"source": 1,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10441,
											"end": 10473,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4942,
											"end": 4960,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10441,
											"end": 10473,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10441,
											"end": 10473,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10441,
											"end": 10473,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10441,
											"end": 10473,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10441,
											"end": 10473,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 10441,
											"end": 10473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10441,
											"end": 10473,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 10110,
											"end": 10480,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10110,
											"end": 10480,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10110,
											"end": 10480,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10110,
											"end": 10480,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 10761,
											"end": 11202,
											"name": "tag",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 10761,
											"end": 11202,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10891,
											"end": 10915,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10918,
											"end": 10943,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 10928,
											"end": 10933,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10935,
											"end": 10942,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10918,
											"end": 10927,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 10918,
											"end": 10943,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10918,
											"end": 10943,
											"name": "tag",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 10918,
											"end": 10943,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10891,
											"end": 10943,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10891,
											"end": 10943,
											"name": "POP",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10957,
											"end": 10973,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10957,
											"end": 10994,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 10953,
											"end": 11196,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 10953,
											"end": 11196,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11038,
											"end": 11044,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11034,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11044,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11044,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 11010,
											"end": 11078,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 11010,
											"end": 11078,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11010,
											"end": 11078,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11010,
											"end": 11078,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11010,
											"end": 11078,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11010,
											"end": 11078,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3043,
											"end": 3045,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11010,
											"end": 11078,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 11010,
											"end": 11078,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 11010,
											"end": 11078,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3025,
											"end": 3046,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3082,
											"end": 3084,
											"name": "PUSH",
											"source": 8,
											"value": "1D"
										},
										{
											"begin": 3062,
											"end": 3080,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3062,
											"end": 3080,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3062,
											"end": 3080,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3055,
											"end": 3085,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3121,
											"end": 3152,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 3101,
											"end": 3119,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3101,
											"end": 3119,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3101,
											"end": 3119,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3153,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3170,
											"end": 3188,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3170,
											"end": 3188,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11010,
											"end": 11078,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3015,
											"end": 3194,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11010,
											"end": 11078,
											"name": "tag",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 11010,
											"end": 11078,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11120,
											"end": 11171,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 11129,
											"end": 11134,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11136,
											"end": 11143,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11164,
											"end": 11170,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11145,
											"end": 11161,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11145,
											"end": 11170,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 11120,
											"end": 11128,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 11120,
											"end": 11171,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 11120,
											"end": 11171,
											"name": "tag",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 11120,
											"end": 11171,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10881,
											"end": 11202,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10761,
											"end": 11202,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10761,
											"end": 11202,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10761,
											"end": 11202,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10761,
											"end": 11202,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7475,
											"end": 8126,
											"name": "tag",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 7475,
											"end": 8126,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7601,
											"end": 7619,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7601,
											"end": 7619,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7593,
											"end": 7661,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 7593,
											"end": 7661,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7593,
											"end": 7661,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7593,
											"end": 7661,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7593,
											"end": 7661,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7593,
											"end": 7661,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3808,
											"end": 3810,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7593,
											"end": 7661,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7593,
											"end": 7661,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7593,
											"end": 7661,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3790,
											"end": 3811,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3847,
											"end": 3849,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 3827,
											"end": 3845,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3827,
											"end": 3845,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3827,
											"end": 3845,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3820,
											"end": 3850,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3886,
											"end": 3920,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 3866,
											"end": 3884,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3866,
											"end": 3884,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3866,
											"end": 3884,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3859,
											"end": 3921,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3937,
											"end": 3955,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3937,
											"end": 3955,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3937,
											"end": 3955,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3930,
											"end": 3965,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3982,
											"end": 4001,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 3982,
											"end": 4001,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7593,
											"end": 7661,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3780,
											"end": 4007,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7593,
											"end": 7661,
											"name": "tag",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 7593,
											"end": 7661,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7679,
											"end": 7695,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7679,
											"end": 7695,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7671,
											"end": 7735,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 7671,
											"end": 7735,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7671,
											"end": 7735,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7671,
											"end": 7735,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7671,
											"end": 7735,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7671,
											"end": 7735,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2236,
											"end": 2238,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7671,
											"end": 7735,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7671,
											"end": 7735,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7671,
											"end": 7735,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2218,
											"end": 2239,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2275,
											"end": 2277,
											"name": "PUSH",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 2255,
											"end": 2273,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2255,
											"end": 2273,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2255,
											"end": 2273,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2248,
											"end": 2278,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2314,
											"end": 2348,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 2294,
											"end": 2312,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 2294,
											"end": 2312,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2294,
											"end": 2312,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2287,
											"end": 2349,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2365,
											"end": 2383,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 2365,
											"end": 2383,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2365,
											"end": 2383,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2358,
											"end": 2391,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2408,
											"end": 2427,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 2408,
											"end": 2427,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7671,
											"end": 7735,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2208,
											"end": 2433,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7671,
											"end": 7735,
											"name": "tag",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 7671,
											"end": 7735,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7817,
											"end": 7832,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7817,
											"end": 7832,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7795,
											"end": 7814,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7817,
											"end": 7832,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7817,
											"end": 7832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7817,
											"end": 7832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7817,
											"end": 7832,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7817,
											"end": 7832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7817,
											"end": 7832,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7817,
											"end": 7832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7817,
											"end": 7832,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7817,
											"end": 7832,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7817,
											"end": 7832,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7817,
											"end": 7832,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7850,
											"end": 7871,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7850,
											"end": 7871,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7850,
											"end": 7871,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 7850,
											"end": 7871,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7842,
											"end": 7914,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "132"
										},
										{
											"begin": 7842,
											"end": 7914,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7842,
											"end": 7914,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7842,
											"end": 7914,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7842,
											"end": 7914,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7842,
											"end": 7914,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3401,
											"end": 3403,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7842,
											"end": 7914,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7842,
											"end": 7914,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7842,
											"end": 7914,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3404,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3440,
											"end": 3442,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 3420,
											"end": 3438,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3420,
											"end": 3438,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3420,
											"end": 3438,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3413,
											"end": 3443,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3479,
											"end": 3513,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 3459,
											"end": 3477,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3459,
											"end": 3477,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3459,
											"end": 3477,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3452,
											"end": 3514,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3530,
											"end": 3548,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3530,
											"end": 3548,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3530,
											"end": 3548,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3523,
											"end": 3559,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3576,
											"end": 3595,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 3576,
											"end": 3595,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7842,
											"end": 7914,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3373,
											"end": 3601,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7842,
											"end": 7914,
											"name": "tag",
											"source": 1,
											"value": "132"
										},
										{
											"begin": 7842,
											"end": 7914,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7948,
											"end": 7963,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7963,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7963,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7957,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7948,
											"end": 7963,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7963,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7963,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7963,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7948,
											"end": 7963,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7963,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7963,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7963,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7948,
											"end": 7963,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7963,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7963,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7966,
											"end": 7986,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7966,
											"end": 7986,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7966,
											"end": 7986,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7986,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7986,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8019,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8019,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8019,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8019,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8019,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8019,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8019,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8019,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7980,
											"end": 7986,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7980,
											"end": 7986,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7957,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7980,
											"end": 7986,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7980,
											"end": 7986,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "88"
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "tag",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8029,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8060,
											"end": 8062,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8054,
											"end": 8058,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "PUSH",
											"source": 1,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8064,
											"end": 8070,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "136"
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4969,
											"end": 4994,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4969,
											"end": 4994,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4957,
											"end": 4959,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4942,
											"end": 4960,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4942,
											"end": 4960,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4924,
											"end": 5000,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "tag",
											"source": 1,
											"value": "136"
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8045,
											"end": 8071,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 8082,
											"end": 8119,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 11786,
											"end": 11907,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 111,
											"end": 113,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 111,
											"end": 113,
											"name": "tag",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 63,
											"end": 187,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 63,
											"end": 187,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 63,
											"end": 187,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 63,
											"end": 187,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 192,
											"end": 378,
											"name": "tag",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 192,
											"end": 378,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 251,
											"end": 257,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 292,
											"end": 301,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 283,
											"end": 290,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 279,
											"end": 302,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 275,
											"end": 307,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 272,
											"end": 274,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 272,
											"end": 274,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 272,
											"end": 274,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 272,
											"end": 274,
											"name": "tag",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 272,
											"end": 274,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 362,
											"end": 371,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 343,
											"end": 372,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 343,
											"end": 372,
											"name": "tag",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 343,
											"end": 372,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 333,
											"end": 372,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 262,
											"end": 378,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 262,
											"end": 378,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 383,
											"end": 643,
											"name": "tag",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 383,
											"end": 643,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 451,
											"end": 457,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 465,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 512,
											"end": 514,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 500,
											"end": 509,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 491,
											"end": 498,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 487,
											"end": 510,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 483,
											"end": 515,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 480,
											"end": 482,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 480,
											"end": 482,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 480,
											"end": 482,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 528,
											"end": 529,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 525,
											"end": 526,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 518,
											"end": 530,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 480,
											"end": 482,
											"name": "tag",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 480,
											"end": 482,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 551,
											"end": 580,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 570,
											"end": 579,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 551,
											"end": 580,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 551,
											"end": 580,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 551,
											"end": 580,
											"name": "tag",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 551,
											"end": 580,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 541,
											"end": 580,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 541,
											"end": 580,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 599,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 633,
											"end": 635,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 622,
											"end": 631,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 618,
											"end": 636,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 599,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 599,
											"end": 637,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 599,
											"end": 637,
											"name": "tag",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 599,
											"end": 637,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 589,
											"end": 637,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 589,
											"end": 637,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 470,
											"end": 643,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 470,
											"end": 643,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 470,
											"end": 643,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 470,
											"end": 643,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 470,
											"end": 643,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 470,
											"end": 643,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 648,
											"end": 976,
											"name": "tag",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 648,
											"end": 976,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 725,
											"end": 731,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 733,
											"end": 739,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 741,
											"end": 747,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 794,
											"end": 796,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 782,
											"end": 791,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 773,
											"end": 780,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 769,
											"end": 792,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 765,
											"end": 797,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 762,
											"end": 764,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 762,
											"end": 764,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "153"
										},
										{
											"begin": 762,
											"end": 764,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 810,
											"end": 811,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 807,
											"end": 808,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 800,
											"end": 812,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 762,
											"end": 764,
											"name": "tag",
											"source": 8,
											"value": "153"
										},
										{
											"begin": 762,
											"end": 764,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 833,
											"end": 862,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "154"
										},
										{
											"begin": 852,
											"end": 861,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 833,
											"end": 862,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 833,
											"end": 862,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 833,
											"end": 862,
											"name": "tag",
											"source": 8,
											"value": "154"
										},
										{
											"begin": 833,
											"end": 862,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 823,
											"end": 862,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 823,
											"end": 862,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 881,
											"end": 919,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "155"
										},
										{
											"begin": 915,
											"end": 917,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 904,
											"end": 913,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 900,
											"end": 918,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 881,
											"end": 919,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 881,
											"end": 919,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 881,
											"end": 919,
											"name": "tag",
											"source": 8,
											"value": "155"
										},
										{
											"begin": 881,
											"end": 919,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 871,
											"end": 919,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 871,
											"end": 919,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 966,
											"end": 968,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 955,
											"end": 964,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 951,
											"end": 969,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 938,
											"end": 970,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 928,
											"end": 970,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 928,
											"end": 970,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 752,
											"end": 976,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 752,
											"end": 976,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 752,
											"end": 976,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 752,
											"end": 976,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 752,
											"end": 976,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 752,
											"end": 976,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 981,
											"end": 1235,
											"name": "tag",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 981,
											"end": 1235,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1049,
											"end": 1055,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1057,
											"end": 1063,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1110,
											"end": 1112,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1098,
											"end": 1107,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1089,
											"end": 1096,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1085,
											"end": 1108,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1081,
											"end": 1113,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1078,
											"end": 1080,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1078,
											"end": 1080,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 1078,
											"end": 1080,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1126,
											"end": 1127,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1123,
											"end": 1124,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 1128,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1078,
											"end": 1080,
											"name": "tag",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 1078,
											"end": 1080,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1149,
											"end": 1178,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 1168,
											"end": 1177,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1149,
											"end": 1178,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 1149,
											"end": 1178,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1149,
											"end": 1178,
											"name": "tag",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 1149,
											"end": 1178,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1139,
											"end": 1178,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1225,
											"end": 1227,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1210,
											"end": 1228,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1210,
											"end": 1228,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1210,
											"end": 1228,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1210,
											"end": 1228,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1197,
											"end": 1229,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1197,
											"end": 1229,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1068,
											"end": 1235,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1432,
											"end": 2029,
											"name": "tag",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 1432,
											"end": 2029,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1548,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1575,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1602,
											"end": 1604,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1591,
											"end": 1600,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1584,
											"end": 1605,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1634,
											"end": 1640,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1628,
											"end": 1641,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1677,
											"end": 1683,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1672,
											"end": 1674,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1661,
											"end": 1670,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1657,
											"end": 1675,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1650,
											"end": 1684,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1702,
											"end": 1703,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1712,
											"end": 1852,
											"name": "tag",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 1712,
											"end": 1852,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1726,
											"end": 1732,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1723,
											"end": 1724,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1720,
											"end": 1733,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1712,
											"end": 1852,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1712,
											"end": 1852,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 1712,
											"end": 1852,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1821,
											"end": 1835,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1821,
											"end": 1835,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1821,
											"end": 1835,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1817,
											"end": 1840,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1817,
											"end": 1840,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1811,
											"end": 1841,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1787,
											"end": 1804,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1787,
											"end": 1804,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1787,
											"end": 1804,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1806,
											"end": 1808,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1783,
											"end": 1809,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1776,
											"end": 1842,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1741,
											"end": 1751,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1741,
											"end": 1751,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1712,
											"end": 1852,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 1712,
											"end": 1852,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1712,
											"end": 1852,
											"name": "tag",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 1712,
											"end": 1852,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1870,
											"end": 1876,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1867,
											"end": 1868,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1864,
											"end": 1877,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1861,
											"end": 1863,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1861,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 1861,
											"end": 1863,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1940,
											"end": 1941,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1935,
											"end": 1937,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1926,
											"end": 1932,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1915,
											"end": 1924,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1911,
											"end": 1933,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1907,
											"end": 1938,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1900,
											"end": 1942,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1861,
											"end": 1863,
											"name": "tag",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 1861,
											"end": 1863,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2013,
											"end": 2015,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1992,
											"end": 2007,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1988,
											"end": 2017,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1973,
											"end": 2018,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1973,
											"end": 2018,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1973,
											"end": 2018,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1973,
											"end": 2018,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2020,
											"end": 2022,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1969,
											"end": 2023,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1969,
											"end": 2023,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1553,
											"end": 2029,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1553,
											"end": 2029,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5194,
											"end": 5419,
											"name": "tag",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 5194,
											"end": 5419,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5234,
											"end": 5237,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5265,
											"end": 5266,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5261,
											"end": 5267,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 5258,
											"end": 5259,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5255,
											"end": 5268,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 5252,
											"end": 5254,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5252,
											"end": 5254,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "175"
										},
										{
											"begin": 5252,
											"end": 5254,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5310,
											"end": 5320,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 5305,
											"end": 5308,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 5301,
											"end": 5321,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 5298,
											"end": 5299,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5291,
											"end": 5322,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5345,
											"end": 5349,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 5342,
											"end": 5343,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5335,
											"end": 5350,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5373,
											"end": 5377,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5370,
											"end": 5371,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5363,
											"end": 5378,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5252,
											"end": 5254,
											"name": "tag",
											"source": 8,
											"value": "175"
										},
										{
											"begin": 5252,
											"end": 5254,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5404,
											"end": 5413,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5404,
											"end": 5413,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5242,
											"end": 5419,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5424,
											"end": 5804,
											"name": "tag",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 5424,
											"end": 5804,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5503,
											"end": 5504,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 5499,
											"end": 5511,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5499,
											"end": 5511,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5499,
											"end": 5511,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 5499,
											"end": 5511,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5546,
											"end": 5558,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5546,
											"end": 5558,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5546,
											"end": 5558,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5567,
											"end": 5569,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 5567,
											"end": 5569,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5621,
											"end": 5625,
											"name": "PUSH",
											"source": 8,
											"value": "7F"
										},
										{
											"begin": 5613,
											"end": 5619,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5609,
											"end": 5626,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5599,
											"end": 5626,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5599,
											"end": 5626,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5567,
											"end": 5569,
											"name": "tag",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 5567,
											"end": 5569,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5674,
											"end": 5676,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5666,
											"end": 5672,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5663,
											"end": 5677,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 5643,
											"end": 5661,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5640,
											"end": 5678,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5637,
											"end": 5639,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5637,
											"end": 5639,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "178"
										},
										{
											"begin": 5637,
											"end": 5639,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5720,
											"end": 5730,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 5715,
											"end": 5718,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 5711,
											"end": 5731,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 5708,
											"end": 5709,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5701,
											"end": 5732,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5755,
											"end": 5759,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 5752,
											"end": 5753,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5745,
											"end": 5760,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5783,
											"end": 5787,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5780,
											"end": 5781,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5773,
											"end": 5788,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5637,
											"end": 5639,
											"name": "tag",
											"source": 8,
											"value": "178"
										},
										{
											"begin": 5637,
											"end": 5639,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5637,
											"end": 5639,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5479,
											"end": 5804,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5479,
											"end": 5804,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5479,
											"end": 5804,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5479,
											"end": 5804,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://43e46da9d9f49741ecd876a269e71bc7494058d7a8e9478429998adb5bc3eaa0\",\"dweb:/ipfs/QmUtp4cqzf22C5rJ76AabKADquGWcjsc33yjYXxXC4sDvy\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 128,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 134,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 136,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 140,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":482:6782  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":482:6782  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212201687068d3aca17adf466a0c2bc2d663e72c67f52835d1795abf68ab10f94522564736f6c63430008060033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201687068d3aca17adf466a0c2bc2d663e72c67f52835d1795abf68ab10f94522564736f6c63430008060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 AND DUP8 MOD DUP14 GASPRICE 0xCA OR 0xAD DELEGATECALL PUSH7 0xA0C2BC2D663E72 0xC6 PUSH32 0x52835D1795ABF68AB10F94522564736F6C634300080600330000000000000000 ",
							"sourceMap": "482:6300:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;482:6300:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201687068d3aca17adf466a0c2bc2d663e72c67f52835d1795abf68ab10f94522564736f6c63430008060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 AND DUP8 MOD DUP14 GASPRICE 0xCA OR 0xAD DELEGATECALL PUSH7 0xA0C2BC2D663E72 0xC6 PUSH32 0x52835D1795ABF68AB10F94522564736F6C634300080600330000000000000000 ",
							"sourceMap": "482:6300:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212201687068d3aca17adf466a0c2bc2d663e72c67f52835d1795abf68ab10f94522564736f6c63430008060033",
									".code": [
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Crowdsale.sol": {
				"Crowdsale": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_rate",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_wallet",
									"type": "address"
								},
								{
									"internalType": "contract ERC20",
									"name": "_token",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "purchaser",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "beneficiary",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "TokenPurchase",
							"type": "event"
						},
						{
							"stateMutability": "payable",
							"type": "fallback"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_beneficiary",
									"type": "address"
								}
							],
							"name": "buyTokens",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token",
							"outputs": [
								{
									"internalType": "contract ERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "wallet",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "weiRaised",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"details": "Crowdsale is a base contract for managing a token crowdsale, allowing investors to purchase tokens with ether. This contract implements such functionality in its most fundamental form and can be extended to provide additional functionality and/or custom behavior. The external interface represents the basic interface for purchasing tokens, and conform the base architecture for crowdsales. They are *not* intended to be modified / overriden. The internal interface conforms the extensible and modifiable surface of crowdsales. Override the methods to add functionality. Consider using 'super' where appropiate to concatenate behavior.",
						"events": {
							"TokenPurchase(address,address,uint256,uint256)": {
								"params": {
									"amount": "amount of tokens purchased",
									"beneficiary": "who got the tokens",
									"purchaser": "who paid for the tokens",
									"value": "weis paid for purchase"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"buyTokens(address)": {
								"details": "low level token purchase ***DO NOT OVERRIDE***",
								"params": {
									"_beneficiary": "Address performing the token purchase"
								}
							},
							"constructor": {
								"params": {
									"_rate": "Number of token units a buyer gets per wei",
									"_token": "Address of the token being sold",
									"_wallet": "Address where collected funds will be forwarded to"
								}
							}
						},
						"title": "Crowdsale",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Crowdsale.sol\":1086:5935  contract Crowdsale {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Crowdsale.sol\":1932:2160  constructor(uint256 _rate, address _wallet, ERC20 _token) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/Crowdsale.sol\":2012:2013  0 */\n  0x00\n    /* \"contracts/Crowdsale.sol\":2004:2009  _rate */\n  dup4\n    /* \"contracts/Crowdsale.sol\":2004:2013  _rate > 0 */\n  gt\n    /* \"contracts/Crowdsale.sol\":1996:2014  require(_rate > 0) */\n  tag_6\n  jumpi\n  0x00\n  dup1\n  revert\ntag_6:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"contracts/Crowdsale.sol\":2028:2049  _wallet != address(0) */\n  dup3\n  and\n    /* \"contracts/Crowdsale.sol\":2020:2050  require(_wallet != address(0)) */\n  tag_7\n  jumpi\n  0x00\n  dup1\n  revert\ntag_7:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"contracts/Crowdsale.sol\":2064:2093  address(_token) != address(0) */\n  dup2\n  and\n    /* \"contracts/Crowdsale.sol\":2056:2094  require(address(_token) != address(0)) */\n  tag_8\n  jumpi\n  0x00\n  dup1\n  revert\ntag_8:\n    /* \"contracts/Crowdsale.sol\":2101:2105  rate */\n  0x02\n    /* \"contracts/Crowdsale.sol\":2101:2113  rate = _rate */\n  swap3\n  swap1\n  swap3\n  sstore\n    /* \"contracts/Crowdsale.sol\":2119:2125  wallet */\n  0x01\n    /* \"contracts/Crowdsale.sol\":2119:2135  wallet = _wallet */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  dup4\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap2\n  dup3\n  and\n  or\n  swap1\n  swap2\n  sstore\n  0x00\n    /* \"contracts/Crowdsale.sol\":2141:2155  token = _token */\n  dup1\n  sload\n  swap3\n  swap1\n  swap4\n  and\n  swap2\n  and\n  or\n  swap1\n  sstore\n    /* \"contracts/Crowdsale.sol\":1086:5935  contract Crowdsale {... */\n  jump(tag_10)\n    /* \"#utility.yul\":14:473   */\ntag_3:\n    /* \"#utility.yul\":115:121   */\n  0x00\n    /* \"#utility.yul\":123:129   */\n  dup1\n    /* \"#utility.yul\":131:137   */\n  0x00\n    /* \"#utility.yul\":184:186   */\n  0x60\n    /* \"#utility.yul\":172:181   */\n  dup5\n    /* \"#utility.yul\":163:170   */\n  dup7\n    /* \"#utility.yul\":159:182   */\n  sub\n    /* \"#utility.yul\":155:187   */\n  slt\n    /* \"#utility.yul\":152:154   */\n  iszero\n  tag_12\n  jumpi\n    /* \"#utility.yul\":200:201   */\n  0x00\n    /* \"#utility.yul\":197:198   */\n  dup1\n    /* \"#utility.yul\":190:202   */\n  revert\n    /* \"#utility.yul\":152:154   */\ntag_12:\n    /* \"#utility.yul\":229:238   */\n  dup4\n    /* \"#utility.yul\":223:239   */\n  mload\n    /* \"#utility.yul\":213:239   */\n  swap3\n  pop\n    /* \"#utility.yul\":282:284   */\n  0x20\n    /* \"#utility.yul\":271:280   */\n  dup5\n    /* \"#utility.yul\":267:285   */\n  add\n    /* \"#utility.yul\":261:286   */\n  mload\n    /* \"#utility.yul\":295:326   */\n  tag_13\n    /* \"#utility.yul\":320:325   */\n  dup2\n    /* \"#utility.yul\":295:326   */\n  tag_14\n  jump\t// in\ntag_13:\n    /* \"#utility.yul\":395:397   */\n  0x40\n    /* \"#utility.yul\":380:398   */\n  dup6\n  add\n    /* \"#utility.yul\":374:399   */\n  mload\n    /* \"#utility.yul\":345:350   */\n  swap1\n  swap3\n  pop\n    /* \"#utility.yul\":408:441   */\n  tag_15\n    /* \"#utility.yul\":374:399   */\n  dup2\n    /* \"#utility.yul\":408:441   */\n  tag_14\n  jump\t// in\ntag_15:\n    /* \"#utility.yul\":460:467   */\n  dup1\n    /* \"#utility.yul\":450:467   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":142:473   */\n  swap3\n  pop\n  swap3\n  pop\n  swap3\n  jump\t// out\n    /* \"#utility.yul\":478:609   */\ntag_14:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":553:584   */\n  dup2\n  and\n    /* \"#utility.yul\":543:585   */\n  dup2\n  eq\n    /* \"#utility.yul\":533:535   */\n  tag_17\n  jumpi\n    /* \"#utility.yul\":599:600   */\n  0x00\n    /* \"#utility.yul\":596:597   */\n  dup1\n    /* \"#utility.yul\":589:601   */\n  revert\n    /* \"#utility.yul\":533:535   */\ntag_17:\n    /* \"#utility.yul\":523:609   */\n  pop\n  jump\t// out\ntag_10:\n    /* \"contracts/Crowdsale.sol\":1086:5935  contract Crowdsale {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Crowdsale.sol\":1086:5935  contract Crowdsale {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x2c4e722e\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x4042b66f\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x521eb273\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xec8ac4d8\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xfc0c546a\n      eq\n      tag_7\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n        /* \"contracts/Crowdsale.sol\":2456:2477  buyTokens(msg.sender) */\n      tag_10\n        /* \"contracts/Crowdsale.sol\":2466:2476  msg.sender */\n      caller\n        /* \"contracts/Crowdsale.sol\":2456:2465  buyTokens */\n      tag_11\n        /* \"contracts/Crowdsale.sol\":2456:2477  buyTokens(msg.sender) */\n      jump\t// in\n    tag_10:\n        /* \"contracts/Crowdsale.sol\":1086:5935  contract Crowdsale {... */\n      stop\n    tag_2:\n        /* \"contracts/Crowdsale.sol\":2390:2411  buyTokens(msg.sender) */\n      tag_10\n        /* \"contracts/Crowdsale.sol\":2400:2410  msg.sender */\n      caller\n        /* \"contracts/Crowdsale.sol\":2390:2399  buyTokens */\n      tag_11\n        /* \"contracts/Crowdsale.sol\":2390:2411  buyTokens(msg.sender) */\n      jump\t// in\n        /* \"contracts/Crowdsale.sol\":1301:1320  uint256 public rate */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_15\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_15:\n      pop\n      tag_16\n      sload(0x02)\n      dup2\n      jump\n    tag_16:\n      mload(0x40)\n        /* \"#utility.yul\":1441:1466   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1429:1431   */\n      0x20\n        /* \"#utility.yul\":1414:1432   */\n      add\n        /* \"contracts/Crowdsale.sol\":1301:1320  uint256 public rate */\n    tag_18:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Crowdsale.sol\":1351:1375  uint256 public weiRaised */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      pop\n      tag_16\n      sload(0x03)\n      dup2\n      jump\n        /* \"contracts/Crowdsale.sol\":1228:1249  address public wallet */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_24\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_24:\n      pop\n      sload(0x01)\n      tag_25\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_25:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":751:783   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":733:784   */\n      dup2\n      mstore\n        /* \"#utility.yul\":721:723   */\n      0x20\n        /* \"#utility.yul\":706:724   */\n      add\n        /* \"contracts/Crowdsale.sol\":1228:1249  address public wallet */\n      tag_18\n        /* \"#utility.yul\":688:790   */\n      jump\n        /* \"contracts/Crowdsale.sol\":2618:3195  function buyTokens(address _beneficiary) public payable {... */\n    tag_6:\n      tag_10\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_11\n      jump\t// in\n        /* \"contracts/Crowdsale.sol\":1166:1184  ERC20 public token */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      pop\n      sload(0x00)\n      tag_25\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/Crowdsale.sol\":2618:3195  function buyTokens(address _beneficiary) public payable {... */\n    tag_11:\n        /* \"contracts/Crowdsale.sol\":2701:2710  msg.value */\n      callvalue\n        /* \"contracts/Crowdsale.sol\":2716:2761  _preValidatePurchase(_beneficiary, weiAmount) */\n      tag_38\n        /* \"contracts/Crowdsale.sol\":2737:2749  _beneficiary */\n      dup3\n        /* \"contracts/Crowdsale.sol\":2701:2710  msg.value */\n      dup3\n        /* \"contracts/Crowdsale.sol\":2716:2736  _preValidatePurchase */\n      tag_39\n        /* \"contracts/Crowdsale.sol\":2716:2761  _preValidatePurchase(_beneficiary, weiAmount) */\n      jump\t// in\n    tag_38:\n        /* \"contracts/Crowdsale.sol\":2812:2826  uint256 tokens */\n      0x00\n        /* \"contracts/Crowdsale.sol\":2829:2855  _getTokenAmount(weiAmount) */\n      tag_40\n        /* \"contracts/Crowdsale.sol\":2845:2854  weiAmount */\n      dup3\n        /* \"contracts/Crowdsale.sol\":2829:2844  _getTokenAmount */\n      tag_41\n        /* \"contracts/Crowdsale.sol\":2829:2855  _getTokenAmount(weiAmount) */\n      jump\t// in\n    tag_40:\n        /* \"contracts/Crowdsale.sol\":2894:2903  weiRaised */\n      sload(0x03)\n        /* \"contracts/Crowdsale.sol\":2812:2855  uint256 tokens = _getTokenAmount(weiAmount) */\n      swap1\n      swap2\n      pop\n        /* \"contracts/Crowdsale.sol\":2894:2918  weiRaised.add(weiAmount) */\n      tag_42\n      swap1\n        /* \"contracts/Crowdsale.sol\":2908:2917  weiAmount */\n      dup4\n        /* \"contracts/Crowdsale.sol\":2894:2907  weiRaised.add */\n      tag_43\n        /* \"contracts/Crowdsale.sol\":2894:2918  weiRaised.add(weiAmount) */\n      jump\t// in\n    tag_42:\n        /* \"contracts/Crowdsale.sol\":2882:2891  weiRaised */\n      0x03\n        /* \"contracts/Crowdsale.sol\":2882:2918  weiRaised = weiRaised.add(weiAmount) */\n      sstore\n        /* \"contracts/Crowdsale.sol\":2925:2963  _processPurchase(_beneficiary, tokens) */\n      tag_44\n        /* \"contracts/Crowdsale.sol\":2942:2954  _beneficiary */\n      dup4\n        /* \"contracts/Crowdsale.sol\":2956:2962  tokens */\n      dup3\n        /* \"contracts/Crowdsale.sol\":2925:2941  _processPurchase */\n      tag_45\n        /* \"contracts/Crowdsale.sol\":2925:2963  _processPurchase(_beneficiary, tokens) */\n      jump\t// in\n    tag_44:\n        /* \"contracts/Crowdsale.sol\":2974:3062  TokenPurchase(... */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":1651:1676   */\n      dup4\n      dup2\n      mstore\n        /* \"#utility.yul\":1707:1709   */\n      0x20\n        /* \"#utility.yul\":1692:1710   */\n      dup2\n      add\n        /* \"#utility.yul\":1685:1719   */\n      dup4\n      swap1\n      mstore\n        /* \"contracts/Crowdsale.sol\":2974:3062  TokenPurchase(... */\n      dup2\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup7\n      and\n      swap3\n        /* \"contracts/Crowdsale.sol\":2995:3005  msg.sender */\n      caller\n      swap3\n        /* \"contracts/Crowdsale.sol\":2974:3062  TokenPurchase(... */\n      0x623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18\n      swap3\n      swap1\n      dup2\n      swap1\n      sub\n      swap1\n      swap2\n      add\n      swap1\n      log3\n        /* \"contracts/Crowdsale.sol\":3123:3138  _forwardFunds() */\n      tag_50\n        /* \"contracts/Crowdsale.sol\":3123:3136  _forwardFunds */\n      tag_51\n        /* \"contracts/Crowdsale.sol\":3123:3138  _forwardFunds() */\n      jump\t// in\n    tag_50:\n        /* \"contracts/Crowdsale.sol\":2674:3195  {... */\n      pop\n      pop\n        /* \"contracts/Crowdsale.sol\":2618:3195  function buyTokens(address _beneficiary) public payable {... */\n      pop\n      jump\t// out\n        /* \"contracts/Crowdsale.sol\":3619:3803  function _preValidatePurchase(... */\n    tag_39:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Crowdsale.sol\":3741:3767  _beneficiary != address(0) */\n      dup3\n      and\n        /* \"contracts/Crowdsale.sol\":3733:3768  require(_beneficiary != address(0)) */\n      tag_55\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_55:\n        /* \"contracts/Crowdsale.sol\":3782:3797  _weiAmount != 0 */\n      dup1\n        /* \"contracts/Crowdsale.sol\":3774:3798  require(_weiAmount != 0) */\n      tag_56\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_56:\n        /* \"contracts/Crowdsale.sol\":3619:3803  function _preValidatePurchase(... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Crowdsale.sol\":5653:5774  function _getTokenAmount(uint256 _weiAmount)... */\n    tag_41:\n        /* \"contracts/Crowdsale.sol\":5725:5732  uint256 */\n      0x00\n        /* \"contracts/Crowdsale.sol\":5749:5769  _weiAmount.mul(rate) */\n      tag_58\n        /* \"contracts/Crowdsale.sol\":5764:5768  rate */\n      sload(0x02)\n        /* \"contracts/Crowdsale.sol\":5749:5759  _weiAmount */\n      dup4\n        /* \"contracts/Crowdsale.sol\":5749:5763  _weiAmount.mul */\n      tag_59\n      swap1\n        /* \"contracts/Crowdsale.sol\":5749:5769  _weiAmount.mul(rate) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_58:\n        /* \"contracts/Crowdsale.sol\":5742:5769  return _weiAmount.mul(rate) */\n      swap3\n        /* \"contracts/Crowdsale.sol\":5653:5774  function _getTokenAmount(uint256 _weiAmount)... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2755:2851  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_43:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2813:2820  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2844  a + b */\n      tag_61\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2843:2844  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2840  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2844  a + b */\n      tag_62\n      jump\t// in\n    tag_61:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2832:2844  return a + b */\n      swap4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2755:2851  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Crowdsale.sol\":4881:5031  function _processPurchase(... */\n    tag_45:\n        /* \"contracts/Crowdsale.sol\":4984:5026  _deliverTokens(_beneficiary, _tokenAmount) */\n      tag_56\n        /* \"contracts/Crowdsale.sol\":4999:5011  _beneficiary */\n      dup3\n        /* \"contracts/Crowdsale.sol\":5013:5025  _tokenAmount */\n      dup3\n        /* \"contracts/Crowdsale.sol\":4984:4998  _deliverTokens */\n      tag_65\n        /* \"contracts/Crowdsale.sol\":4984:5026  _deliverTokens(_beneficiary, _tokenAmount) */\n      jump\t// in\n        /* \"contracts/Crowdsale.sol\":5853:5933  function _forwardFunds() internal {... */\n    tag_51:\n        /* \"contracts/Crowdsale.sol\":5901:5907  wallet */\n      sload(0x01)\n        /* \"contracts/Crowdsale.sol\":5893:5928  payable(wallet).transfer(msg.value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Crowdsale.sol\":5901:5907  wallet */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Crowdsale.sol\":5918:5927  msg.value */\n      callvalue\n        /* \"contracts/Crowdsale.sol\":5893:5928  payable(wallet).transfer(msg.value) */\n      dup1\n      iszero\n      0x08fc\n      mul\n      swap2\n        /* \"contracts/Crowdsale.sol\":5901:5907  wallet */\n      0x00\n        /* \"contracts/Crowdsale.sol\":5893:5928  payable(wallet).transfer(msg.value) */\n      dup2\n        /* \"contracts/Crowdsale.sol\":5901:5907  wallet */\n      dup2\n        /* \"contracts/Crowdsale.sol\":5893:5928  payable(wallet).transfer(msg.value) */\n      dup2\n        /* \"contracts/Crowdsale.sol\":5918:5927  msg.value */\n      dup6\n        /* \"contracts/Crowdsale.sol\":5901:5907  wallet */\n      dup9\n        /* \"contracts/Crowdsale.sol\":5893:5928  payable(wallet).transfer(msg.value) */\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_69\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_69:\n      pop\n        /* \"contracts/Crowdsale.sol\":5853:5933  function _forwardFunds() internal {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3465:3561  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_59:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3523:3530  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3549:3554  a * b */\n      tag_61\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3553:3554  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3549:3550  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3549:3554  a * b */\n      tag_73\n      jump\t// in\n        /* \"contracts/Crowdsale.sol\":4474:4634  function _deliverTokens(... */\n    tag_65:\n        /* \"contracts/Crowdsale.sol\":4587:4592  token */\n      sload(0x00)\n        /* \"contracts/Crowdsale.sol\":4587:4629  token.transfer(_beneficiary, _tokenAmount) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n        /* \"#utility.yul\":987:1019   */\n      dup5\n      dup2\n      and\n        /* \"contracts/Crowdsale.sol\":4587:4629  token.transfer(_beneficiary, _tokenAmount) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":969:1020   */\n      mstore\n        /* \"#utility.yul\":1036:1054   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1029:1063   */\n      dup5\n      swap1\n      mstore\n        /* \"contracts/Crowdsale.sol\":4587:4592  token */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Crowdsale.sol\":4587:4601  token.transfer */\n      0xa9059cbb\n      swap1\n        /* \"#utility.yul\":942:960   */\n      0x44\n      add\n        /* \"contracts/Crowdsale.sol\":4587:4629  token.transfer(_beneficiary, _tokenAmount) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_77\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_77:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_79\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_79:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_50\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n        /* \"#utility.yul\":14:300   */\n    tag_31:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:96   */\n      iszero\n      tag_84\n      jumpi\n        /* \"#utility.yul\":142:143   */\n      0x00\n        /* \"#utility.yul\":139:140   */\n      dup1\n        /* \"#utility.yul\":132:144   */\n      revert\n        /* \"#utility.yul\":94:96   */\n    tag_84:\n        /* \"#utility.yul\":168:191   */\n      dup2\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":220:251   */\n      dup2\n      and\n        /* \"#utility.yul\":210:252   */\n      dup2\n      eq\n        /* \"#utility.yul\":200:202   */\n      tag_61\n      jumpi\n        /* \"#utility.yul\":266:267   */\n      0x00\n        /* \"#utility.yul\":263:264   */\n      dup1\n        /* \"#utility.yul\":256:268   */\n      revert\n        /* \"#utility.yul\":305:582   */\n    tag_81:\n        /* \"#utility.yul\":372:378   */\n      0x00\n        /* \"#utility.yul\":425:427   */\n      0x20\n        /* \"#utility.yul\":413:422   */\n      dup3\n        /* \"#utility.yul\":404:411   */\n      dup5\n        /* \"#utility.yul\":400:423   */\n      sub\n        /* \"#utility.yul\":396:428   */\n      slt\n        /* \"#utility.yul\":393:395   */\n      iszero\n      tag_87\n      jumpi\n        /* \"#utility.yul\":441:442   */\n      0x00\n        /* \"#utility.yul\":438:439   */\n      dup1\n        /* \"#utility.yul\":431:443   */\n      revert\n        /* \"#utility.yul\":393:395   */\n    tag_87:\n        /* \"#utility.yul\":473:482   */\n      dup2\n        /* \"#utility.yul\":467:483   */\n      mload\n        /* \"#utility.yul\":526:531   */\n      dup1\n        /* \"#utility.yul\":519:532   */\n      iszero\n        /* \"#utility.yul\":512:533   */\n      iszero\n        /* \"#utility.yul\":505:510   */\n      dup2\n        /* \"#utility.yul\":502:534   */\n      eq\n        /* \"#utility.yul\":492:494   */\n      tag_61\n      jumpi\n        /* \"#utility.yul\":548:549   */\n      0x00\n        /* \"#utility.yul\":545:546   */\n      dup1\n        /* \"#utility.yul\":538:550   */\n      revert\n        /* \"#utility.yul\":1730:1858   */\n    tag_62:\n        /* \"#utility.yul\":1770:1773   */\n      0x00\n        /* \"#utility.yul\":1801:1802   */\n      dup3\n        /* \"#utility.yul\":1797:1803   */\n      not\n        /* \"#utility.yul\":1794:1795   */\n      dup3\n        /* \"#utility.yul\":1791:1804   */\n      gt\n        /* \"#utility.yul\":1788:1790   */\n      iszero\n      tag_96\n      jumpi\n        /* \"#utility.yul\":1807:1825   */\n      tag_96\n      tag_97\n      jump\t// in\n    tag_96:\n      pop\n        /* \"#utility.yul\":1843:1852   */\n      add\n      swap1\n        /* \"#utility.yul\":1778:1858   */\n      jump\t// out\n        /* \"#utility.yul\":1863:2031   */\n    tag_73:\n        /* \"#utility.yul\":1903:1910   */\n      0x00\n        /* \"#utility.yul\":1969:1970   */\n      dup2\n        /* \"#utility.yul\":1965:1966   */\n      0x00\n        /* \"#utility.yul\":1961:1967   */\n      not\n        /* \"#utility.yul\":1957:1971   */\n      div\n        /* \"#utility.yul\":1954:1955   */\n      dup4\n        /* \"#utility.yul\":1951:1972   */\n      gt\n        /* \"#utility.yul\":1946:1947   */\n      dup3\n        /* \"#utility.yul\":1939:1948   */\n      iszero\n        /* \"#utility.yul\":1932:1949   */\n      iszero\n        /* \"#utility.yul\":1928:1973   */\n      and\n        /* \"#utility.yul\":1925:1927   */\n      iszero\n      tag_100\n      jumpi\n        /* \"#utility.yul\":1976:1994   */\n      tag_100\n      tag_97\n      jump\t// in\n    tag_100:\n      pop\n        /* \"#utility.yul\":2016:2025   */\n      mul\n      swap1\n        /* \"#utility.yul\":1915:2031   */\n      jump\t// out\n        /* \"#utility.yul\":2036:2163   */\n    tag_97:\n        /* \"#utility.yul\":2097:2107   */\n      0x4e487b71\n        /* \"#utility.yul\":2092:2095   */\n      0xe0\n        /* \"#utility.yul\":2088:2108   */\n      shl\n        /* \"#utility.yul\":2085:2086   */\n      0x00\n        /* \"#utility.yul\":2078:2109   */\n      mstore\n        /* \"#utility.yul\":2128:2132   */\n      0x11\n        /* \"#utility.yul\":2125:2126   */\n      0x04\n        /* \"#utility.yul\":2118:2133   */\n      mstore\n        /* \"#utility.yul\":2152:2156   */\n      0x24\n        /* \"#utility.yul\":2149:2150   */\n      0x00\n        /* \"#utility.yul\":2142:2157   */\n      revert\n\n    auxdata: 0xa264697066735822122074fabfe1782544237d2815280b75efb7ce1463d874ee8c6fdee433ce58bddadb64736f6c63430008060033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1214": {
									"entryPoint": null,
									"id": 1214,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_uint256t_addresst_contract$_ERC20_$698_fromMemory": {
									"entryPoint": 153,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"validator_revert_address": {
									"entryPoint": 220,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:611:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "142:331:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "188:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "197:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "200:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "190:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "190:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "190:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "163:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "172:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "159:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "159:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "184:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "155:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "155:32:8"
															},
															"nodeType": "YulIf",
															"src": "152:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "213:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "229:9:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "223:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:16:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "213:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "248:38:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "271:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "282:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "267:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "267:18:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "261:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "261:25:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "252:5:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "320:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "295:24:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "295:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "295:31:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "335:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "345:5:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "335:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "359:40:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "384:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "395:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "380:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "380:18:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "374:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "374:25:8"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "363:7:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "433:7:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "408:24:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "408:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "408:33:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "450:17:8",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "460:7:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "450:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_addresst_contract$_ERC20_$698_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "92:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "103:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "123:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "131:6:8",
														"type": ""
													}
												],
												"src": "14:459:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "523:86:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "587:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "596:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "599:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "589:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "589:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "589:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "546:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "557:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "572:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "577:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "568:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "568:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "581:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "564:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "564:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "553:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "553:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "543:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "543:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "536:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "536:50:8"
															},
															"nodeType": "YulIf",
															"src": "533:2:8"
														}
													]
												},
												"name": "validator_revert_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "512:5:8",
														"type": ""
													}
												],
												"src": "478:131:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256t_addresst_contract$_ERC20_$698_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := mload(headStart)\n        let value := mload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        let value_1 := mload(add(headStart, 64))\n        validator_revert_address(value_1)\n        value2 := value_1\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060405161049138038061049183398101604081905261002f91610099565b6000831161003c57600080fd5b6001600160a01b03821661004f57600080fd5b6001600160a01b03811661006257600080fd5b600292909255600180546001600160a01b039283166001600160a01b031991821617909155600080549290931691161790556100f4565b6000806000606084860312156100ae57600080fd5b8351925060208401516100c0816100dc565b60408501519092506100d1816100dc565b809150509250925092565b6001600160a01b03811681146100f157600080fd5b50565b61038e806101036000396000f3fe60806040526004361061004e5760003560e01c80632c4e722e146100675780634042b66f14610090578063521eb273146100a6578063ec8ac4d8146100de578063fc0c546a146100f15761005e565b3661005e5761005c33610111565b005b61005c33610111565b34801561007357600080fd5b5061007d60025481565b6040519081526020015b60405180910390f35b34801561009c57600080fd5b5061007d60035481565b3480156100b257600080fd5b506001546100c6906001600160a01b031681565b6040516001600160a01b039091168152602001610087565b61005c6100ec3660046102c0565b610111565b3480156100fd57600080fd5b506000546100c6906001600160a01b031681565b3461011c8282610197565b6000610127826101b8565b60035490915061013790836101d5565b60035561014483826101e8565b60408051838152602081018390526001600160a01b0385169133917f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18910160405180910390a36101926101f2565b505050565b6001600160a01b0382166101aa57600080fd5b806101b457600080fd5b5050565b60006101cf6002548361022e90919063ffffffff16565b92915050565b60006101e1828461030b565b9392505050565b6101b4828261023a565b6001546040516001600160a01b03909116903480156108fc02916000818181858888f1935050505015801561022b573d6000803e3d6000fd5b50565b60006101e18284610323565b60005460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561028857600080fd5b505af115801561029c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019291906102e9565b6000602082840312156102d257600080fd5b81356001600160a01b03811681146101e157600080fd5b6000602082840312156102fb57600080fd5b815180151581146101e157600080fd5b6000821982111561031e5761031e610342565b500190565b600081600019048311821515161561033d5761033d610342565b500290565b634e487b7160e01b600052601160045260246000fdfea264697066735822122074fabfe1782544237d2815280b75efb7ce1463d874ee8c6fdee433ce58bddadb64736f6c63430008060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x491 CODESIZE SUB DUP1 PUSH2 0x491 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x0 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH2 0xF4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0xC0 DUP2 PUSH2 0xDC JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0xD1 DUP2 PUSH2 0xDC JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x38E DUP1 PUSH2 0x103 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2C4E722E EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x4042B66F EQ PUSH2 0x90 JUMPI DUP1 PUSH4 0x521EB273 EQ PUSH2 0xA6 JUMPI DUP1 PUSH4 0xEC8AC4D8 EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0xF1 JUMPI PUSH2 0x5E JUMP JUMPDEST CALLDATASIZE PUSH2 0x5E JUMPI PUSH2 0x5C CALLER PUSH2 0x111 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5C CALLER PUSH2 0x111 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7D PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7D PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0xC6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x87 JUMP JUMPDEST PUSH2 0x5C PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x2C0 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0xC6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE PUSH2 0x11C DUP3 DUP3 PUSH2 0x197 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127 DUP3 PUSH2 0x1B8 JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 SWAP2 POP PUSH2 0x137 SWAP1 DUP4 PUSH2 0x1D5 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0x144 DUP4 DUP3 PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 CALLER SWAP2 PUSH32 0x623B3804FA71D67900D064613DA8F94B9617215EE90799290593E1745087AD18 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x192 PUSH2 0x1F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CF PUSH1 0x2 SLOAD DUP4 PUSH2 0x22E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E1 DUP3 DUP5 PUSH2 0x30B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1B4 DUP3 DUP3 PUSH2 0x23A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x22B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E1 DUP3 DUP5 PUSH2 0x323 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x29C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x192 SWAP2 SWAP1 PUSH2 0x2E9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x31E JUMPI PUSH2 0x31E PUSH2 0x342 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x33D JUMPI PUSH2 0x33D PUSH2 0x342 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH21 0xFABFE1782544237D2815280B75EFB7CE1463D874EE DUP13 PUSH16 0xDEE433CE58BDDADB64736F6C63430008 MOD STOP CALLER ",
							"sourceMap": "1086:4849:6:-:0;;;1932:228;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2012:1;2004:5;:9;1996:18;;;;;;-1:-1:-1;;;;;2028:21:6;;2020:30;;;;;;-1:-1:-1;;;;;2064:29:6;;2056:38;;;;;;2101:4;:12;;;;2119:6;:16;;-1:-1:-1;;;;;2119:16:6;;;-1:-1:-1;;;;;;2119:16:6;;;;;;;-1:-1:-1;2141:14:6;;;;;;;;;;;1086:4849;;14:459:8;115:6;123;131;184:2;172:9;163:7;159:23;155:32;152:2;;;200:1;197;190:12;152:2;229:9;223:16;213:26;;282:2;271:9;267:18;261:25;295:31;320:5;295:31;:::i;:::-;395:2;380:18;;374:25;345:5;;-1:-1:-1;408:33:8;374:25;408:33;:::i;:::-;460:7;450:17;;;142:331;;;;;:::o;478:131::-;-1:-1:-1;;;;;553:31:8;;543:42;;533:2;;599:1;596;589:12;533:2;523:86;:::o;:::-;1086:4849:6;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_1224": {
									"entryPoint": null,
									"id": 1224,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_1233": {
									"entryPoint": null,
									"id": 1233,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_deliverTokens_1338": {
									"entryPoint": 570,
									"id": 1338,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_forwardFunds_1389": {
									"entryPoint": 498,
									"id": 1389,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_getTokenAmount_1375": {
									"entryPoint": 440,
									"id": 1375,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_postValidatePurchase_1322": {
									"entryPoint": null,
									"id": 1322,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_preValidatePurchase_1313": {
									"entryPoint": 407,
									"id": 1313,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_processPurchase_1352": {
									"entryPoint": 488,
									"id": 1352,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_updatePurchasingState_1361": {
									"entryPoint": null,
									"id": 1361,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@add_999": {
									"entryPoint": 469,
									"id": 999,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@buyTokens_1289": {
									"entryPoint": 273,
									"id": 1289,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@mul_1029": {
									"entryPoint": 558,
									"id": 1029,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@rate_1150": {
									"entryPoint": null,
									"id": 1150,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@token_1146": {
									"entryPoint": null,
									"id": 1146,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@wallet_1148": {
									"entryPoint": null,
									"id": 1148,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@weiRaised_1152": {
									"entryPoint": null,
									"id": 1152,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 704,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 745,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_ERC20_$698__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 779,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 803,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 834,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2165:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:216:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "139:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "142:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:8"
															},
															"nodeType": "YulIf",
															"src": "94:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "155:36:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "181:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "168:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "168:23:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "159:5:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "254:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "263:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "266:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "256:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "256:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "256:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "213:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "224:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "239:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "244:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "235:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "235:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "248:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "231:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "231:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "220:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "220:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "210:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "210:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "203:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "203:50:8"
															},
															"nodeType": "YulIf",
															"src": "200:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "279:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "289:5:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "279:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:8",
														"type": ""
													}
												],
												"src": "14:286:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "383:199:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "429:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "438:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "441:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "431:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "431:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "431:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "404:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "413:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "400:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "400:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "425:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "396:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "396:32:8"
															},
															"nodeType": "YulIf",
															"src": "393:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "454:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "473:9:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "467:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "467:16:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "458:5:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "536:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "545:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "548:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "538:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "538:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "538:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "505:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "526:5:8"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "519:6:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "519:13:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "512:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "512:21:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "502:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "502:32:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "495:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "495:40:8"
															},
															"nodeType": "YulIf",
															"src": "492:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "561:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "571:5:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "561:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "349:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "360:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "372:6:8",
														"type": ""
													}
												],
												"src": "305:277:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "688:102:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "698:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "710:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "721:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "706:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "706:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "698:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "740:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "755:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "771:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "776:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "767:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "767:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "780:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "763:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "763:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "751:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "751:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "733:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "733:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "733:51:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "657:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "668:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "679:4:8",
														"type": ""
													}
												],
												"src": "587:203:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "924:145:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "934:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "946:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "957:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "942:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "942:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "934:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "976:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "991:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1007:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1012:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1003:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1003:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1016:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "999:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "999:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "987:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "987:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "969:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "969:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "969:51:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1040:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1051:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1036:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1036:18:8"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1056:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1029:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1029:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1029:34:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "885:9:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "896:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "904:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "915:4:8",
														"type": ""
													}
												],
												"src": "795:274:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1188:102:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1198:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1210:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1221:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1206:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1206:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1198:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1240:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1255:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1271:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1276:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1267:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1267:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1280:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1263:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1263:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1251:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1251:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1233:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1233:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1233:51:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_ERC20_$698__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1157:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1168:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1179:4:8",
														"type": ""
													}
												],
												"src": "1074:216:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1396:76:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1406:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1418:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1429:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1414:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1414:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1406:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1448:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1459:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1441:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1441:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1441:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1365:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1376:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1387:4:8",
														"type": ""
													}
												],
												"src": "1295:177:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1606:119:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1616:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1628:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1639:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1624:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1624:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1616:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1658:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1669:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1651:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1651:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1651:25:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1696:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1707:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1692:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1692:18:8"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1712:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1685:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1685:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1685:34:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1567:9:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1578:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1586:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1597:4:8",
														"type": ""
													}
												],
												"src": "1477:248:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1778:80:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1805:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "1807:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1807:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1807:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1794:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "1801:1:8"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1797:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1797:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1791:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1791:13:8"
															},
															"nodeType": "YulIf",
															"src": "1788:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1836:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1847:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "1850:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1843:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1843:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "1836:3:8"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "1761:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "1764:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "1770:3:8",
														"type": ""
													}
												],
												"src": "1730:128:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1915:116:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1974:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "1976:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1976:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1976:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "1946:1:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1939:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1939:9:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1932:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1932:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "1954:1:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1965:1:8",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1961:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1961:6:8"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "1969:1:8"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "1957:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1957:14:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1951:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1951:21:8"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1928:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1928:45:8"
															},
															"nodeType": "YulIf",
															"src": "1925:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2005:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2020:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2023:1:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "2016:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2016:9:8"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "2005:7:8"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "1894:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "1897:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "1903:7:8",
														"type": ""
													}
												],
												"src": "1863:168:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2068:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2085:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2092:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2097:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2088:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2088:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2078:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2078:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2078:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2125:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2128:4:8",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2118:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2118:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2118:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2149:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2152:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2142:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2142:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2142:15:8"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2036:127:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_contract$_ERC20_$698__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040526004361061004e5760003560e01c80632c4e722e146100675780634042b66f14610090578063521eb273146100a6578063ec8ac4d8146100de578063fc0c546a146100f15761005e565b3661005e5761005c33610111565b005b61005c33610111565b34801561007357600080fd5b5061007d60025481565b6040519081526020015b60405180910390f35b34801561009c57600080fd5b5061007d60035481565b3480156100b257600080fd5b506001546100c6906001600160a01b031681565b6040516001600160a01b039091168152602001610087565b61005c6100ec3660046102c0565b610111565b3480156100fd57600080fd5b506000546100c6906001600160a01b031681565b3461011c8282610197565b6000610127826101b8565b60035490915061013790836101d5565b60035561014483826101e8565b60408051838152602081018390526001600160a01b0385169133917f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18910160405180910390a36101926101f2565b505050565b6001600160a01b0382166101aa57600080fd5b806101b457600080fd5b5050565b60006101cf6002548361022e90919063ffffffff16565b92915050565b60006101e1828461030b565b9392505050565b6101b4828261023a565b6001546040516001600160a01b03909116903480156108fc02916000818181858888f1935050505015801561022b573d6000803e3d6000fd5b50565b60006101e18284610323565b60005460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561028857600080fd5b505af115801561029c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019291906102e9565b6000602082840312156102d257600080fd5b81356001600160a01b03811681146101e157600080fd5b6000602082840312156102fb57600080fd5b815180151581146101e157600080fd5b6000821982111561031e5761031e610342565b500190565b600081600019048311821515161561033d5761033d610342565b500290565b634e487b7160e01b600052601160045260246000fdfea264697066735822122074fabfe1782544237d2815280b75efb7ce1463d874ee8c6fdee433ce58bddadb64736f6c63430008060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2C4E722E EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x4042B66F EQ PUSH2 0x90 JUMPI DUP1 PUSH4 0x521EB273 EQ PUSH2 0xA6 JUMPI DUP1 PUSH4 0xEC8AC4D8 EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0xF1 JUMPI PUSH2 0x5E JUMP JUMPDEST CALLDATASIZE PUSH2 0x5E JUMPI PUSH2 0x5C CALLER PUSH2 0x111 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5C CALLER PUSH2 0x111 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7D PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7D PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0xC6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x87 JUMP JUMPDEST PUSH2 0x5C PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x2C0 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0xC6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE PUSH2 0x11C DUP3 DUP3 PUSH2 0x197 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127 DUP3 PUSH2 0x1B8 JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 SWAP2 POP PUSH2 0x137 SWAP1 DUP4 PUSH2 0x1D5 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0x144 DUP4 DUP3 PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 CALLER SWAP2 PUSH32 0x623B3804FA71D67900D064613DA8F94B9617215EE90799290593E1745087AD18 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x192 PUSH2 0x1F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CF PUSH1 0x2 SLOAD DUP4 PUSH2 0x22E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E1 DUP3 DUP5 PUSH2 0x30B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1B4 DUP3 DUP3 PUSH2 0x23A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x22B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E1 DUP3 DUP5 PUSH2 0x323 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x29C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x192 SWAP2 SWAP1 PUSH2 0x2E9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x31E JUMPI PUSH2 0x31E PUSH2 0x342 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x33D JUMPI PUSH2 0x33D PUSH2 0x342 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH21 0xFABFE1782544237D2815280B75EFB7CE1463D874EE DUP13 PUSH16 0xDEE433CE58BDDADB64736F6C63430008 MOD STOP CALLER ",
							"sourceMap": "1086:4849:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2456:21;2466:10;2456:9;:21::i;:::-;1086:4849;;2390:21;2400:10;2390:9;:21::i;1301:19::-;;;;;;;;;;;;;;;;;;;1441:25:8;;;1429:2;1414:18;1301:19:6;;;;;;;;1351:24;;;;;;;;;;;;;;;;1228:21;;;;;;;;;;-1:-1:-1;1228:21:6;;;;-1:-1:-1;;;;;1228:21:6;;;;;;-1:-1:-1;;;;;751:32:8;;;;733:51;;721:2;706:18;1228:21:6;688:102:8;2618:577:6;;;;;;:::i;:::-;;:::i;1166:18::-;;;;;;;;;;-1:-1:-1;1166:18:6;;;;-1:-1:-1;;;;;1166:18:6;;;2618:577;2701:9;2716:45;2737:12;2701:9;2716:20;:45::i;:::-;2812:14;2829:26;2845:9;2829:15;:26::i;:::-;2894:9;;2812:43;;-1:-1:-1;2894:24:6;;2908:9;2894:13;:24::i;:::-;2882:9;:36;2925:38;2942:12;2956:6;2925:16;:38::i;:::-;2974:88;;;1651:25:8;;;1707:2;1692:18;;1685:34;;;2974:88:6;;-1:-1:-1;;;;;2974:88:6;;;2995:10;;2974:88;;;;;;;;;;;3123:15;:13;:15::i;:::-;2674:521;;2618:577;:::o;3619:184::-;-1:-1:-1;;;;;3741:26:6;;3733:35;;;;;;3782:15;3774:24;;;;;;3619:184;;:::o;5653:121::-;5725:7;5749:20;5764:4;;5749:10;:14;;:20;;;;:::i;:::-;5742:27;5653:121;-1:-1:-1;;5653:121:6:o;2755:96:5:-;2813:7;2839:5;2843:1;2839;:5;:::i;:::-;2832:12;2755:96;-1:-1:-1;;;2755:96:5:o;4881:150:6:-;4984:42;4999:12;5013;4984:14;:42::i;5853:80::-;5901:6;;5893:35;;-1:-1:-1;;;;;5901:6:6;;;;5918:9;5893:35;;;;;5901:6;5893:35;5901:6;5893:35;5918:9;5901:6;5893:35;;;;;;;;;;;;;;;;;;;;;5853:80::o;3465:96:5:-;3523:7;3549:5;3553:1;3549;:5;:::i;4474:160:6:-;4587:5;;:42;;-1:-1:-1;;;4587:42:6;;-1:-1:-1;;;;;987:32:8;;;4587:42:6;;;969:51:8;1036:18;;;1029:34;;;4587:5:6;;;;:14;;942:18:8;;4587:42:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;14:286:8:-;73:6;126:2;114:9;105:7;101:23;97:32;94:2;;;142:1;139;132:12;94:2;168:23;;-1:-1:-1;;;;;220:31:8;;210:42;;200:2;;266:1;263;256:12;305:277;372:6;425:2;413:9;404:7;400:23;396:32;393:2;;;441:1;438;431:12;393:2;473:9;467:16;526:5;519:13;512:21;505:5;502:32;492:2;;548:1;545;538:12;1730:128;1770:3;1801:1;1797:6;1794:1;1791:13;1788:2;;;1807:18;;:::i;:::-;-1:-1:-1;1843:9:8;;1778:80::o;1863:168::-;1903:7;1969:1;1965;1961:6;1957:14;1954:1;1951:21;1946:1;1939:9;1932:17;1928:45;1925:2;;;1976:18;;:::i;:::-;-1:-1:-1;2016:9:8;;1915:116::o;2036:127::-;2097:10;2092:3;2088:20;2085:1;2078:31;2128:4;2125:1;2118:15;2152:4;2149:1;2142:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "182000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"": "infinite",
								"buyTokens(address)": "infinite",
								"rate()": "2262",
								"token()": "2406",
								"wallet()": "2362",
								"weiRaised()": "2284"
							},
							"internal": {
								"_deliverTokens(address,uint256)": "infinite",
								"_forwardFunds()": "infinite",
								"_getTokenAmount(uint256)": "infinite",
								"_postValidatePurchase(address,uint256)": "infinite",
								"_preValidatePurchase(address,uint256)": "65",
								"_processPurchase(address,uint256)": "infinite",
								"_updatePurchasingState(address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1086,
									"end": 5935,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 1086,
									"end": 5935,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1086,
									"end": 5935,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "CODESIZE",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "tag",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1932,
									"end": 2160,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2012,
									"end": 2013,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 2004,
									"end": 2009,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 2004,
									"end": 2013,
									"name": "GT",
									"source": 6
								},
								{
									"begin": 1996,
									"end": 2014,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 1996,
									"end": 2014,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1996,
									"end": 2014,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1996,
									"end": 2014,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1996,
									"end": 2014,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1996,
									"end": 2014,
									"name": "tag",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 1996,
									"end": 2014,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2028,
									"end": 2049,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 2028,
									"end": 2049,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 2020,
									"end": 2050,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 2020,
									"end": 2050,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 2020,
									"end": 2050,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 2020,
									"end": 2050,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 2020,
									"end": 2050,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 2020,
									"end": 2050,
									"name": "tag",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 2020,
									"end": 2050,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2064,
									"end": 2093,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 2064,
									"end": 2093,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 2056,
									"end": 2094,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 2056,
									"end": 2094,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 2056,
									"end": 2094,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 2056,
									"end": 2094,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 2056,
									"end": 2094,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 2056,
									"end": 2094,
									"name": "tag",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 2056,
									"end": 2094,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2101,
									"end": 2105,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 2101,
									"end": 2113,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 2101,
									"end": 2113,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2101,
									"end": 2113,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 2101,
									"end": 2113,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 2119,
									"end": 2125,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 2119,
									"end": 2135,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 2119,
									"end": 2135,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2119,
									"end": 2135,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 2119,
									"end": 2135,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 2119,
									"end": 2135,
									"name": "AND",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2119,
									"end": 2135,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 2119,
									"end": 2135,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 2119,
									"end": 2135,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 2119,
									"end": 2135,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 2119,
									"end": 2135,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2119,
									"end": 2135,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 2119,
									"end": 2135,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 2141,
									"end": 2155,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 2141,
									"end": 2155,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": 2141,
									"end": 2155,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 2141,
									"end": 2155,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2141,
									"end": 2155,
									"name": "SWAP4",
									"source": 6
								},
								{
									"begin": 2141,
									"end": 2155,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 2141,
									"end": 2155,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 2141,
									"end": 2155,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 2141,
									"end": 2155,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 2141,
									"end": 2155,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2141,
									"end": 2155,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1086,
									"end": 5935,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 1086,
									"end": 5935,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 14,
									"end": 473,
									"name": "tag",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 473,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 115,
									"end": 121,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 123,
									"end": 129,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 131,
									"end": 137,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 184,
									"end": 186,
									"name": "PUSH",
									"source": 8,
									"value": "60"
								},
								{
									"begin": 172,
									"end": 181,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 163,
									"end": 170,
									"name": "DUP7",
									"source": 8
								},
								{
									"begin": 159,
									"end": 182,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 155,
									"end": 187,
									"name": "SLT",
									"source": 8
								},
								{
									"begin": 152,
									"end": 154,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 152,
									"end": 154,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "12"
								},
								{
									"begin": 152,
									"end": 154,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 200,
									"end": 201,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 197,
									"end": 198,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 190,
									"end": 202,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 152,
									"end": 154,
									"name": "tag",
									"source": 8,
									"value": "12"
								},
								{
									"begin": 152,
									"end": 154,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 229,
									"end": 238,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 223,
									"end": 239,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 213,
									"end": 239,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 213,
									"end": 239,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 282,
									"end": 284,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 271,
									"end": 280,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 267,
									"end": 285,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 261,
									"end": 286,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 295,
									"end": 326,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "13"
								},
								{
									"begin": 320,
									"end": 325,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 295,
									"end": 326,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "14"
								},
								{
									"begin": 295,
									"end": 326,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 295,
									"end": 326,
									"name": "tag",
									"source": 8,
									"value": "13"
								},
								{
									"begin": 295,
									"end": 326,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 395,
									"end": 397,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 380,
									"end": 398,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 380,
									"end": 398,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 374,
									"end": 399,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 345,
									"end": 350,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 345,
									"end": 350,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 408,
									"end": 441,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "15"
								},
								{
									"begin": 374,
									"end": 399,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 408,
									"end": 441,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "14"
								},
								{
									"begin": 408,
									"end": 441,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 408,
									"end": 441,
									"name": "tag",
									"source": 8,
									"value": "15"
								},
								{
									"begin": 408,
									"end": 441,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 460,
									"end": 467,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 450,
									"end": 467,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 450,
									"end": 467,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 450,
									"end": 467,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 142,
									"end": 473,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 142,
									"end": 473,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 142,
									"end": 473,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 142,
									"end": 473,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 142,
									"end": 473,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 142,
									"end": 473,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 478,
									"end": 609,
									"name": "tag",
									"source": 8,
									"value": "14"
								},
								{
									"begin": 478,
									"end": 609,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 553,
									"end": 584,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 553,
									"end": 584,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 543,
									"end": 585,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 543,
									"end": 585,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 533,
									"end": 535,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "17"
								},
								{
									"begin": 533,
									"end": 535,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 599,
									"end": 600,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 596,
									"end": 597,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 589,
									"end": 601,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 533,
									"end": 535,
									"name": "tag",
									"source": 8,
									"value": "17"
								},
								{
									"begin": 533,
									"end": 535,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 523,
									"end": 609,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 523,
									"end": 609,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 523,
									"end": 609,
									"name": "tag",
									"source": 8,
									"value": "10"
								},
								{
									"begin": 523,
									"end": 609,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1086,
									"end": 5935,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1086,
									"end": 5935,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1086,
									"end": 5935,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1086,
									"end": 5935,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1086,
									"end": 5935,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1086,
									"end": 5935,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1086,
									"end": 5935,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122074fabfe1782544237d2815280b75efb7ce1463d874ee8c6fdee433ce58bddadb64736f6c63430008060033",
									".code": [
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH",
											"source": 6,
											"value": "2C4E722E"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH",
											"source": 6,
											"value": "4042B66F"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH",
											"source": 6,
											"value": "521EB273"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH",
											"source": 6,
											"value": "EC8AC4D8"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH",
											"source": 6,
											"value": "FC0C546A"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "tag",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2456,
											"end": 2477,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 2466,
											"end": 2476,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 2456,
											"end": 2465,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 2456,
											"end": 2477,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2456,
											"end": 2477,
											"name": "tag",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 2456,
											"end": 2477,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "tag",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1086,
											"end": 5935,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2390,
											"end": 2411,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 2400,
											"end": 2410,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 2390,
											"end": 2399,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 2390,
											"end": 2411,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "tag",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "tag",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1441,
											"end": 1466,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1441,
											"end": 1466,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1441,
											"end": 1466,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1429,
											"end": 1431,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1414,
											"end": 1432,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "tag",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "tag",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "tag",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1351,
											"end": 1375,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "tag",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "tag",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "tag",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 751,
											"end": 783,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 751,
											"end": 783,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 751,
											"end": 783,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 751,
											"end": 783,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 733,
											"end": 784,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 733,
											"end": 784,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 721,
											"end": 723,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 706,
											"end": 724,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1228,
											"end": 1249,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 688,
											"end": 790,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "tag",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "tag",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "tag",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "tag",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "tag",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2701,
											"end": 2710,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 2716,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 2737,
											"end": 2749,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2701,
											"end": 2710,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2716,
											"end": 2736,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 2716,
											"end": 2761,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2716,
											"end": 2761,
											"name": "tag",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 2716,
											"end": 2761,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2812,
											"end": 2826,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2829,
											"end": 2855,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2845,
											"end": 2854,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2829,
											"end": 2844,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 2829,
											"end": 2855,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2829,
											"end": 2855,
											"name": "tag",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2829,
											"end": 2855,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2894,
											"end": 2903,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 2894,
											"end": 2903,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2812,
											"end": 2855,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2812,
											"end": 2855,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2894,
											"end": 2918,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 2894,
											"end": 2918,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2908,
											"end": 2917,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2894,
											"end": 2907,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 2894,
											"end": 2918,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2894,
											"end": 2918,
											"name": "tag",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 2894,
											"end": 2918,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2882,
											"end": 2891,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 2882,
											"end": 2918,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 2925,
											"end": 2963,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 2942,
											"end": 2954,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2956,
											"end": 2962,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2925,
											"end": 2941,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 2925,
											"end": 2963,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2925,
											"end": 2963,
											"name": "tag",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 2925,
											"end": 2963,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1676,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1651,
											"end": 1676,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1651,
											"end": 1676,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1707,
											"end": 1709,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1692,
											"end": 1710,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1692,
											"end": 1710,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1685,
											"end": 1719,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1685,
											"end": 1719,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1685,
											"end": 1719,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2995,
											"end": 3005,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 2995,
											"end": 3005,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "PUSH",
											"source": 6,
											"value": "623B3804FA71D67900D064613DA8F94B9617215EE90799290593E1745087AD18"
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 3062,
											"name": "LOG3",
											"source": 6
										},
										{
											"begin": 3123,
											"end": 3138,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 3123,
											"end": 3136,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "51"
										},
										{
											"begin": 3123,
											"end": 3138,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3123,
											"end": 3138,
											"name": "tag",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 3123,
											"end": 3138,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2674,
											"end": 3195,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2674,
											"end": 3195,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 3195,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3619,
											"end": 3803,
											"name": "tag",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 3619,
											"end": 3803,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3741,
											"end": 3767,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3741,
											"end": 3767,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3733,
											"end": 3768,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 3733,
											"end": 3768,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3733,
											"end": 3768,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3733,
											"end": 3768,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3733,
											"end": 3768,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3733,
											"end": 3768,
											"name": "tag",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 3733,
											"end": 3768,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3782,
											"end": 3797,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3774,
											"end": 3798,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 3774,
											"end": 3798,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3774,
											"end": 3798,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3774,
											"end": 3798,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3774,
											"end": 3798,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3774,
											"end": 3798,
											"name": "tag",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 3774,
											"end": 3798,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3619,
											"end": 3803,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3619,
											"end": 3803,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3619,
											"end": 3803,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5653,
											"end": 5774,
											"name": "tag",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 5653,
											"end": 5774,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5725,
											"end": 5732,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5749,
											"end": 5769,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 5764,
											"end": 5768,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5764,
											"end": 5768,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5749,
											"end": 5759,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5749,
											"end": 5763,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 5749,
											"end": 5763,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5749,
											"end": 5769,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5749,
											"end": 5769,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5749,
											"end": 5769,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5749,
											"end": 5769,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5749,
											"end": 5769,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5749,
											"end": 5769,
											"name": "tag",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 5749,
											"end": 5769,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5742,
											"end": 5769,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5653,
											"end": 5774,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5653,
											"end": 5774,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "tag",
											"source": 5,
											"value": "43"
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2813,
											"end": 2820,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 2843,
											"end": 2844,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2839,
											"end": 2840,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "tag",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2832,
											"end": 2844,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 4881,
											"end": 5031,
											"name": "tag",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 4881,
											"end": 5031,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4984,
											"end": 5026,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 4999,
											"end": 5011,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5013,
											"end": 5025,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4984,
											"end": 4998,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 4984,
											"end": 5026,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5853,
											"end": 5933,
											"name": "tag",
											"source": 6,
											"value": "51"
										},
										{
											"begin": 5853,
											"end": 5933,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 5907,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 5901,
											"end": 5907,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5901,
											"end": 5907,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 5907,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 5907,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 5907,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5918,
											"end": 5927,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "PUSH",
											"source": 6,
											"value": "8FC"
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 5907,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 5907,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5918,
											"end": 5927,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 5907,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "tag",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5928,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5853,
											"end": 5933,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "tag",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3523,
											"end": 3530,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 3553,
											"end": 3554,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3549,
											"end": 3550,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 4474,
											"end": 4634,
											"name": "tag",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 4474,
											"end": 4634,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4592,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4587,
											"end": 4592,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 987,
											"end": 1019,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 987,
											"end": 1019,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 987,
											"end": 1019,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 969,
											"end": 1020,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1036,
											"end": 1054,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1036,
											"end": 1054,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1036,
											"end": 1054,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1029,
											"end": 1063,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1029,
											"end": 1063,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1029,
											"end": 1063,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4587,
											"end": 4592,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4592,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4592,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4592,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4601,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 4587,
											"end": 4601,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 942,
											"end": 960,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 942,
											"end": 960,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "EXTCODESIZE",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "77"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "tag",
											"source": 6,
											"value": "77"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "tag",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 4587,
											"end": 4629,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 14,
											"end": 300,
											"name": "tag",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 14,
											"end": 300,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 94,
											"end": 96,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 94,
											"end": 96,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 94,
											"end": 96,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 142,
											"end": 143,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 139,
											"end": 140,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 132,
											"end": 144,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 94,
											"end": 96,
											"name": "tag",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 94,
											"end": 96,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 168,
											"end": 191,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 168,
											"end": 191,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 220,
											"end": 251,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 220,
											"end": 251,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 210,
											"end": 252,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 210,
											"end": 252,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 200,
											"end": 202,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 200,
											"end": 202,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 266,
											"end": 267,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 264,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 256,
											"end": 268,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 305,
											"end": 582,
											"name": "tag",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 305,
											"end": 582,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 372,
											"end": 378,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 425,
											"end": 427,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 413,
											"end": 422,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 404,
											"end": 411,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 400,
											"end": 423,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 396,
											"end": 428,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 393,
											"end": 395,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 393,
											"end": 395,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "87"
										},
										{
											"begin": 393,
											"end": 395,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 441,
											"end": 442,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 438,
											"end": 439,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 431,
											"end": 443,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 393,
											"end": 395,
											"name": "tag",
											"source": 8,
											"value": "87"
										},
										{
											"begin": 393,
											"end": 395,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 473,
											"end": 482,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 467,
											"end": 483,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 526,
											"end": 531,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 519,
											"end": 532,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 512,
											"end": 533,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 505,
											"end": 510,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 502,
											"end": 534,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 492,
											"end": 494,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 492,
											"end": 494,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 548,
											"end": 549,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 545,
											"end": 546,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 538,
											"end": 550,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1730,
											"end": 1858,
											"name": "tag",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 1730,
											"end": 1858,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1770,
											"end": 1773,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1801,
											"end": 1802,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1797,
											"end": 1803,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1794,
											"end": 1795,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1791,
											"end": 1804,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1788,
											"end": 1790,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1788,
											"end": 1790,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "96"
										},
										{
											"begin": 1788,
											"end": 1790,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1807,
											"end": 1825,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "96"
										},
										{
											"begin": 1807,
											"end": 1825,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 1807,
											"end": 1825,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1807,
											"end": 1825,
											"name": "tag",
											"source": 8,
											"value": "96"
										},
										{
											"begin": 1807,
											"end": 1825,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1843,
											"end": 1852,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1843,
											"end": 1852,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1778,
											"end": 1858,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1863,
											"end": 2031,
											"name": "tag",
											"source": 8,
											"value": "73"
										},
										{
											"begin": 1863,
											"end": 2031,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1903,
											"end": 1910,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1969,
											"end": 1970,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1965,
											"end": 1966,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1961,
											"end": 1967,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1957,
											"end": 1971,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1954,
											"end": 1955,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1951,
											"end": 1972,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1946,
											"end": 1947,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1939,
											"end": 1948,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1932,
											"end": 1949,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1928,
											"end": 1973,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1925,
											"end": 1927,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1925,
											"end": 1927,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1925,
											"end": 1927,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1976,
											"end": 1994,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1976,
											"end": 1994,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 1976,
											"end": 1994,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1976,
											"end": 1994,
											"name": "tag",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1976,
											"end": 1994,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2016,
											"end": 2025,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 2016,
											"end": 2025,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1915,
											"end": 2031,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2036,
											"end": 2163,
											"name": "tag",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 2036,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2097,
											"end": 2107,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 2092,
											"end": 2095,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 2088,
											"end": 2108,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 2085,
											"end": 2086,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2078,
											"end": 2109,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2128,
											"end": 2132,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 2125,
											"end": 2126,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2118,
											"end": 2133,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2152,
											"end": 2156,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2149,
											"end": 2150,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2142,
											"end": 2157,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"buyTokens(address)": "ec8ac4d8",
							"rate()": "2c4e722e",
							"token()": "fc0c546a",
							"wallet()": "521eb273",
							"weiRaised()": "4042b66f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Crowdsale is a base contract for managing a token crowdsale, allowing investors to purchase tokens with ether. This contract implements such functionality in its most fundamental form and can be extended to provide additional functionality and/or custom behavior. The external interface represents the basic interface for purchasing tokens, and conform the base architecture for crowdsales. They are *not* intended to be modified / overriden. The internal interface conforms the extensible and modifiable surface of crowdsales. Override the methods to add functionality. Consider using 'super' where appropiate to concatenate behavior.\",\"events\":{\"TokenPurchase(address,address,uint256,uint256)\":{\"params\":{\"amount\":\"amount of tokens purchased\",\"beneficiary\":\"who got the tokens\",\"purchaser\":\"who paid for the tokens\",\"value\":\"weis paid for purchase\"}}},\"kind\":\"dev\",\"methods\":{\"buyTokens(address)\":{\"details\":\"low level token purchase ***DO NOT OVERRIDE***\",\"params\":{\"_beneficiary\":\"Address performing the token purchase\"}},\"constructor\":{\"params\":{\"_rate\":\"Number of token units a buyer gets per wei\",\"_token\":\"Address of the token being sold\",\"_wallet\":\"Address where collected funds will be forwarded to\"}}},\"title\":\"Crowdsale\",\"version\":1},\"userdoc\":{\"events\":{\"TokenPurchase(address,address,uint256,uint256)\":{\"notice\":\"Event for token purchase logging\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Crowdsale.sol\":\"Crowdsale\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://43e46da9d9f49741ecd876a269e71bc7494058d7a8e9478429998adb5bc3eaa0\",\"dweb:/ipfs/QmUtp4cqzf22C5rJ76AabKADquGWcjsc33yjYXxXC4sDvy\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]},\"contracts/Crowdsale.sol\":{\"keccak256\":\"0xfc6fa2e7243fcd3fe6012abf3e1da3bdc5c360bbfa392a3865e178f14169ea49\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://e32165cb4773d17846f6146780b1f9ef349a4759e04e17fe0140b1cdd3ee3e9b\",\"dweb:/ipfs/QmSWcyLomNsy23yzhistP7Bs7NnPRyAYhfMGWED3LLuP8T\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1146,
								"contract": "contracts/Crowdsale.sol:Crowdsale",
								"label": "token",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(ERC20)698"
							},
							{
								"astId": 1148,
								"contract": "contracts/Crowdsale.sol:Crowdsale",
								"label": "wallet",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 1150,
								"contract": "contracts/Crowdsale.sol:Crowdsale",
								"label": "rate",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 1152,
								"contract": "contracts/Crowdsale.sol:Crowdsale",
								"label": "weiRaised",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_contract(ERC20)698": {
								"encoding": "inplace",
								"label": "contract ERC20",
								"numberOfBytes": "20"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"events": {
							"TokenPurchase(address,address,uint256,uint256)": {
								"notice": "Event for token purchase logging"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/CrowdsaleFactory.sol": {
				"CrowdsaleFactory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "crowdsaleContract",
									"type": "address"
								}
							],
							"name": "newCrowdSaleCreatedAt",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_rate",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_wallet",
									"type": "address"
								},
								{
									"internalType": "contract ERC20",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "createCrowdSale",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAllDeployedProjects",
							"outputs": [
								{
									"components": [
										{
											"internalType": "contract ERC20",
											"name": "token",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "rate",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "beneficiaryAddr",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "crowdsaleContractAddr",
											"type": "address"
										}
									],
									"internalType": "struct CrowdsaleFactory.crowdsaleMeta[]",
									"name": "props",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/CrowdsaleFactory.sol\":141:1432  contract CrowdsaleFactory is Ownable{... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_4\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  tag_7\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_4:\n    /* \"contracts/CrowdsaleFactory.sol\":141:1432  contract CrowdsaleFactory is Ownable{... */\n  jump(tag_8)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_7:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"contracts/CrowdsaleFactory.sol\":141:1432  contract CrowdsaleFactory is Ownable{... */\ntag_8:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/CrowdsaleFactory.sol\":141:1432  contract CrowdsaleFactory is Ownable{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x715018a6\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xee323eca\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xf0e24a40\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_3:\n      tag_8\n      tag_9\n      jump\t// in\n    tag_8:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_4:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      sload\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":886:937   */\n      dup2\n      mstore\n        /* \"#utility.yul\":874:876   */\n      0x20\n        /* \"#utility.yul\":859:877   */\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_12:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/CrowdsaleFactory.sol\":589:1106  function createCrowdSale(uint256 _rate, address _wallet, ERC20 _token) public {... */\n    tag_5:\n      tag_8\n      tag_15\n      calldatasize\n      0x04\n      tag_16\n      jump\t// in\n    tag_15:\n      tag_17\n      jump\t// in\n        /* \"contracts/CrowdsaleFactory.sol\":1112:1429  function getAllDeployedProjects () public view returns (crowdsaleMeta[] memory props){... */\n    tag_6:\n      tag_18\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      tag_12\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_7:\n      tag_8\n      tag_23\n      calldatasize\n      0x04\n      tag_24\n      jump\t// in\n    tag_23:\n      tag_25\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_9:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_27\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_28\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_27:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_30\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_31\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_30:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/CrowdsaleFactory.sol\":589:1106  function createCrowdSale(uint256 _rate, address _wallet, ERC20 _token) public {... */\n    tag_17:\n        /* \"contracts/CrowdsaleFactory.sol\":696:710  numOfCrowdsale */\n      0x01\n        /* \"contracts/CrowdsaleFactory.sol\":696:712  numOfCrowdsale++ */\n      dup1\n      sload\n        /* \"contracts/CrowdsaleFactory.sol\":677:693  uint crowdsaleId */\n      0x00\n      swap2\n      dup3\n        /* \"contracts/CrowdsaleFactory.sol\":696:712  numOfCrowdsale++ */\n      tag_34\n      dup4\n      tag_35\n      jump\t// in\n    tag_34:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"contracts/CrowdsaleFactory.sol\":722:760  crowdsaleMeta storage currentCrowdsale */\n      0x00\n        /* \"contracts/CrowdsaleFactory.sol\":763:793  deployedCrowdsale[crowdsaleId] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/CrowdsaleFactory.sol\":763:780  deployedCrowdsale */\n      0x02\n        /* \"contracts/CrowdsaleFactory.sol\":763:793  deployedCrowdsale[crowdsaleId] */\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/CrowdsaleFactory.sol\":803:834  currentCrowdsale.token = _token */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup9\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap3\n      dup4\n      and\n      or\n      dup4\n      sstore\n      0x01\n        /* \"contracts/CrowdsaleFactory.sol\":844:865  currentCrowdsale.rate */\n      dup4\n      add\n        /* \"contracts/CrowdsaleFactory.sol\":844:873  currentCrowdsale.rate = _rate */\n      dup11\n      swap1\n      sstore\n        /* \"contracts/CrowdsaleFactory.sol\":883:915  currentCrowdsale.beneficiaryAddr */\n      swap3\n      dup3\n      add\n        /* \"contracts/CrowdsaleFactory.sol\":883:925  currentCrowdsale.beneficiaryAddr = _wallet */\n      dup1\n      sload\n      swap4\n      dup10\n      and\n      swap4\n      swap1\n      swap2\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/CrowdsaleFactory.sol\":984:1021  new Crowdsale(_rate, _wallet, _token) */\n      swap1\n      mload\n        /* \"contracts/CrowdsaleFactory.sol\":677:712  uint crowdsaleId = numOfCrowdsale++ */\n      swap2\n      swap3\n      pop\n        /* \"contracts/CrowdsaleFactory.sol\":763:793  deployedCrowdsale[crowdsaleId] */\n      swap1\n        /* \"contracts/CrowdsaleFactory.sol\":868:873  _rate */\n      dup6\n      swap1\n        /* \"contracts/CrowdsaleFactory.sol\":918:925  _wallet */\n      dup6\n      swap1\n        /* \"contracts/CrowdsaleFactory.sol\":828:834  _token */\n      dup6\n      swap1\n        /* \"contracts/CrowdsaleFactory.sol\":984:1021  new Crowdsale(_rate, _wallet, _token) */\n      tag_36\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n        /* \"#utility.yul\":2940:2965   */\n      swap3\n      dup4\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3039:3054   */\n      swap2\n      dup3\n      and\n        /* \"#utility.yul\":3034:3036   */\n      0x20\n        /* \"#utility.yul\":3019:3037   */\n      dup5\n      add\n        /* \"#utility.yul\":3012:3055   */\n      mstore\n        /* \"#utility.yul\":3091:3106   */\n      and\n        /* \"#utility.yul\":3086:3088   */\n      0x40\n        /* \"#utility.yul\":3071:3089   */\n      dup3\n      add\n        /* \"#utility.yul\":3064:3107   */\n      mstore\n        /* \"#utility.yul\":2928:2930   */\n      0x60\n        /* \"#utility.yul\":2913:2931   */\n      add\n        /* \"contracts/CrowdsaleFactory.sol\":984:1021  new Crowdsale(_rate, _wallet, _token) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      0x00\n      create\n      dup1\n      iszero\n      dup1\n      iszero\n      tag_40\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_40:\n      pop\n        /* \"contracts/CrowdsaleFactory.sol\":935:973  currentCrowdsale.crowdsaleContractAddr */\n      0x03\n      dup3\n      add\n        /* \"contracts/CrowdsaleFactory.sol\":935:1022  currentCrowdsale.crowdsaleContractAddr = address(new Crowdsale(_rate, _wallet, _token)) */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      dup3\n      or\n      swap1\n      sstore\n        /* \"contracts/CrowdsaleFactory.sol\":1037:1098  newCrowdSaleCreatedAt(currentCrowdsale.crowdsaleContractAddr) */\n      mload(0x40)\n        /* \"#utility.yul\":886:937   */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/CrowdsaleFactory.sol\":1037:1098  newCrowdSaleCreatedAt(currentCrowdsale.crowdsaleContractAddr) */\n      0x87bf7513da32df063aa08a31dcfc40284567075208515fcb6d35bbdcc4744736\n      swap1\n        /* \"#utility.yul\":874:876   */\n      0x20\n        /* \"#utility.yul\":859:877   */\n      add\n        /* \"contracts/CrowdsaleFactory.sol\":1037:1098  newCrowdSaleCreatedAt(currentCrowdsale.crowdsaleContractAddr) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/CrowdsaleFactory.sol\":667:1106  {... */\n      pop\n      pop\n        /* \"contracts/CrowdsaleFactory.sol\":589:1106  function createCrowdSale(uint256 _rate, address _wallet, ERC20 _token) public {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/CrowdsaleFactory.sol\":1112:1429  function getAllDeployedProjects () public view returns (crowdsaleMeta[] memory props){... */\n    tag_19:\n        /* \"contracts/CrowdsaleFactory.sol\":1168:1196  crowdsaleMeta[] memory props */\n      0x60\n        /* \"contracts/CrowdsaleFactory.sol\":1271:1285  numOfCrowdsale */\n      sload(0x01)\n        /* \"contracts/CrowdsaleFactory.sol\":1251:1286  new crowdsaleMeta[](numOfCrowdsale) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_44\n      jumpi\n      tag_44\n      tag_45\n      jump\t// in\n    tag_44:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_46\n      jumpi\n      dup2\n      0x20\n      add\n    tag_47:\n      0x40\n      dup1\n      mload\n      0x80\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      add\n      dup3\n      swap1\n      mstore\n      swap3\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x60\n      dup3\n      add\n      mstore\n      dup3\n      mstore\n      not(0x00)\n      swap1\n      swap3\n      add\n      swap2\n      add\n      dup2\n      tag_47\n      jumpi\n      swap1\n      pop\n    tag_46:\n      pop\n        /* \"contracts/CrowdsaleFactory.sol\":1243:1286  props = new crowdsaleMeta[](numOfCrowdsale) */\n      swap1\n      pop\n        /* \"contracts/CrowdsaleFactory.sol\":1310:1323  uint256 index */\n      0x00\n        /* \"contracts/CrowdsaleFactory.sol\":1305:1423  for (uint256 index =0; index< numOfCrowdsale; index++){... */\n    tag_50:\n        /* \"contracts/CrowdsaleFactory.sol\":1335:1349  numOfCrowdsale */\n      sload(0x01)\n        /* \"contracts/CrowdsaleFactory.sol\":1328:1333  index */\n      dup2\n        /* \"contracts/CrowdsaleFactory.sol\":1328:1349  index< numOfCrowdsale */\n      lt\n        /* \"contracts/CrowdsaleFactory.sol\":1305:1423  for (uint256 index =0; index< numOfCrowdsale; index++){... */\n      iszero\n      tag_51\n      jumpi\n        /* \"contracts/CrowdsaleFactory.sol\":1388:1412  deployedCrowdsale[index] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/CrowdsaleFactory.sol\":1388:1405  deployedCrowdsale */\n      0x02\n        /* \"contracts/CrowdsaleFactory.sol\":1388:1412  deployedCrowdsale[index] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      swap3\n      dup4\n      swap1\n      keccak256\n        /* \"contracts/CrowdsaleFactory.sol\":1373:1412  props[index] = deployedCrowdsale[index] */\n      dup4\n      mload\n      0x80\n      dup2\n      add\n      dup6\n      mstore\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n      dup3\n      mstore\n      0x01\n      dup4\n      add\n      sload\n      swap4\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      swap3\n      dup2\n      add\n      sload\n      dup3\n      and\n      swap4\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x03\n      swap1\n      swap3\n      add\n      sload\n      swap1\n      swap2\n      and\n      0x60\n      dup3\n      add\n      mstore\n        /* \"contracts/CrowdsaleFactory.sol\":1373:1385  props[index] */\n      dup3\n      mload\n        /* \"contracts/CrowdsaleFactory.sol\":1373:1378  props */\n      dup4\n      swap1\n        /* \"contracts/CrowdsaleFactory.sol\":1406:1411  index */\n      dup4\n      swap1\n        /* \"contracts/CrowdsaleFactory.sol\":1373:1385  props[index] */\n      dup2\n      lt\n      tag_54\n      jumpi\n      tag_54\n      tag_55\n      jump\t// in\n    tag_54:\n      0x20\n      mul\n      0x20\n      add\n      add\n        /* \"contracts/CrowdsaleFactory.sol\":1373:1412  props[index] = deployedCrowdsale[index] */\n      dup2\n      swap1\n      mstore\n      pop\n        /* \"contracts/CrowdsaleFactory.sol\":1351:1358  index++ */\n      dup1\n      dup1\n      tag_56\n      swap1\n      tag_35\n      jump\t// in\n    tag_56:\n      swap2\n      pop\n      pop\n        /* \"contracts/CrowdsaleFactory.sol\":1305:1423  for (uint256 index =0; index< numOfCrowdsale; index++){... */\n      jump(tag_50)\n    tag_51:\n      pop\n        /* \"contracts/CrowdsaleFactory.sol\":1112:1429  function getAllDeployedProjects () public view returns (crowdsaleMeta[] memory props){... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_25:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_58\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_28\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_58:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_60\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2159:2161   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2141:2162   */\n      mstore\n        /* \"#utility.yul\":2198:2200   */\n      0x26\n        /* \"#utility.yul\":2178:2196   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2171:2201   */\n      mstore\n        /* \"#utility.yul\":2237:2271   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":2217:2235   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2210:2272   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":2288:2306   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2281:2317   */\n      mstore\n        /* \"#utility.yul\":2334:2353   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_61:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_60:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_63\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_31\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_63:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_28:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_30\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2566:2568   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2548:2569   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":2585:2603   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2578:2608   */\n      mstore\n        /* \"#utility.yul\":2644:2678   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":2624:2642   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2617:2679   */\n      mstore\n        /* \"#utility.yul\":2696:2714   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_61\n        /* \"#utility.yul\":2538:2720   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_31:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n    tag_37:\n      dataSize(sub_0)\n      dup1\n      dataOffset(sub_0)\n      dup4\n      codecopy\n      add\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":14:261   */\n    tag_24:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:96   */\n      iszero\n      tag_75\n      jumpi\n        /* \"#utility.yul\":142:143   */\n      0x00\n        /* \"#utility.yul\":139:140   */\n      dup1\n        /* \"#utility.yul\":132:144   */\n      revert\n        /* \"#utility.yul\":94:96   */\n    tag_75:\n        /* \"#utility.yul\":181:190   */\n      dup2\n        /* \"#utility.yul\":168:191   */\n      calldataload\n        /* \"#utility.yul\":200:231   */\n      tag_76\n        /* \"#utility.yul\":225:230   */\n      dup2\n        /* \"#utility.yul\":200:231   */\n      tag_77\n      jump\t// in\n    tag_76:\n        /* \"#utility.yul\":250:255   */\n      swap4\n        /* \"#utility.yul\":84:261   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":266:735   */\n    tag_16:\n        /* \"#utility.yul\":356:362   */\n      0x00\n        /* \"#utility.yul\":364:370   */\n      dup1\n        /* \"#utility.yul\":372:378   */\n      0x00\n        /* \"#utility.yul\":425:427   */\n      0x60\n        /* \"#utility.yul\":413:422   */\n      dup5\n        /* \"#utility.yul\":404:411   */\n      dup7\n        /* \"#utility.yul\":400:423   */\n      sub\n        /* \"#utility.yul\":396:428   */\n      slt\n        /* \"#utility.yul\":393:395   */\n      iszero\n      tag_79\n      jumpi\n        /* \"#utility.yul\":441:442   */\n      0x00\n        /* \"#utility.yul\":438:439   */\n      dup1\n        /* \"#utility.yul\":431:443   */\n      revert\n        /* \"#utility.yul\":393:395   */\n    tag_79:\n        /* \"#utility.yul\":477:486   */\n      dup4\n        /* \"#utility.yul\":464:487   */\n      calldataload\n        /* \"#utility.yul\":454:487   */\n      swap3\n      pop\n        /* \"#utility.yul\":537:539   */\n      0x20\n        /* \"#utility.yul\":526:535   */\n      dup5\n        /* \"#utility.yul\":522:540   */\n      add\n        /* \"#utility.yul\":509:541   */\n      calldataload\n        /* \"#utility.yul\":550:581   */\n      tag_80\n        /* \"#utility.yul\":575:580   */\n      dup2\n        /* \"#utility.yul\":550:581   */\n      tag_77\n      jump\t// in\n    tag_80:\n        /* \"#utility.yul\":600:605   */\n      swap2\n      pop\n        /* \"#utility.yul\":657:659   */\n      0x40\n        /* \"#utility.yul\":642:660   */\n      dup5\n      add\n        /* \"#utility.yul\":629:661   */\n      calldataload\n        /* \"#utility.yul\":670:703   */\n      tag_81\n        /* \"#utility.yul\":629:661   */\n      dup2\n        /* \"#utility.yul\":670:703   */\n      tag_77\n      jump\t// in\n    tag_81:\n        /* \"#utility.yul\":722:729   */\n      dup1\n        /* \"#utility.yul\":712:729   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":383:735   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":948:1952   */\n    tag_21:\n        /* \"#utility.yul\":1181:1183   */\n      0x20\n        /* \"#utility.yul\":1233:1254   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":1303:1316   */\n      dup3\n      mload\n        /* \"#utility.yul\":1206:1224   */\n      dup3\n      dup3\n      add\n        /* \"#utility.yul\":1325:1347   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":1152:1156   */\n      0x00\n      swap2\n        /* \"#utility.yul\":1181:1183   */\n      swap1\n        /* \"#utility.yul\":1366:1368   */\n      0x40\n      swap1\n        /* \"#utility.yul\":1384:1402   */\n      dup2\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":1425:1440   */\n      dup7\n      dup5\n      add\n        /* \"#utility.yul\":1152:1156   */\n      dup6\n        /* \"#utility.yul\":1468:1926   */\n    tag_84:\n        /* \"#utility.yul\":1482:1488   */\n      dup3\n        /* \"#utility.yul\":1479:1480   */\n      dup2\n        /* \"#utility.yul\":1476:1489   */\n      lt\n        /* \"#utility.yul\":1468:1926   */\n      iszero\n      tag_86\n      jumpi\n        /* \"#utility.yul\":1541:1554   */\n      dup2\n      mload\n        /* \"#utility.yul\":1625:1634   */\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1621:1639   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":1609:1640   */\n      dup7\n      mstore\n        /* \"#utility.yul\":1680:1691   */\n      dup8\n      dup3\n      add\n        /* \"#utility.yul\":1674:1692   */\n      mload\n        /* \"#utility.yul\":1660:1672   */\n      dup9\n      dup8\n      add\n        /* \"#utility.yul\":1653:1693   */\n      mstore\n        /* \"#utility.yul\":1737:1748   */\n      dup7\n      dup3\n      add\n        /* \"#utility.yul\":1731:1749   */\n      mload\n        /* \"#utility.yul\":1727:1754   */\n      dup2\n      and\n        /* \"#utility.yul\":1713:1725   */\n      dup8\n      dup8\n      add\n        /* \"#utility.yul\":1706:1755   */\n      mstore\n        /* \"#utility.yul\":1778:1782   */\n      0x60\n        /* \"#utility.yul\":1826:1837   */\n      swap2\n      dup3\n      add\n        /* \"#utility.yul\":1820:1838   */\n      mload\n        /* \"#utility.yul\":1816:1843   */\n      and\n        /* \"#utility.yul\":1802:1814   */\n      swap1\n      dup6\n      add\n        /* \"#utility.yul\":1795:1844   */\n      mstore\n        /* \"#utility.yul\":1873:1877   */\n      0x80\n        /* \"#utility.yul\":1864:1878   */\n      swap1\n      swap4\n      add\n      swap3\n        /* \"#utility.yul\":1901:1916   */\n      swap1\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":1594:1595   */\n      0x01\n        /* \"#utility.yul\":1497:1506   */\n      add\n        /* \"#utility.yul\":1468:1926   */\n      jump(tag_84)\n    tag_86:\n      pop\n        /* \"#utility.yul\":1943:1946   */\n      swap2\n      swap8\n        /* \"#utility.yul\":1161:1952   */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3118:3350   */\n    tag_35:\n        /* \"#utility.yul\":3157:3160   */\n      0x00\n      not(0x00)\n        /* \"#utility.yul\":3178:3195   */\n      dup3\n      eq\n        /* \"#utility.yul\":3175:3177   */\n      iszero\n      tag_91\n      jumpi\n        /* \"#utility.yul\":3237:3247   */\n      0x4e487b71\n        /* \"#utility.yul\":3232:3235   */\n      0xe0\n        /* \"#utility.yul\":3228:3248   */\n      shl\n        /* \"#utility.yul\":3225:3226   */\n      0x00\n        /* \"#utility.yul\":3218:3249   */\n      mstore\n        /* \"#utility.yul\":3272:3276   */\n      0x11\n        /* \"#utility.yul\":3269:3270   */\n      0x04\n        /* \"#utility.yul\":3262:3277   */\n      mstore\n        /* \"#utility.yul\":3300:3304   */\n      0x24\n        /* \"#utility.yul\":3297:3298   */\n      0x00\n        /* \"#utility.yul\":3290:3305   */\n      revert\n        /* \"#utility.yul\":3175:3177   */\n    tag_91:\n      pop\n        /* \"#utility.yul\":3342:3343   */\n      0x01\n        /* \"#utility.yul\":3331:3344   */\n      add\n      swap1\n        /* \"#utility.yul\":3165:3350   */\n      jump\t// out\n        /* \"#utility.yul\":3355:3482   */\n    tag_55:\n        /* \"#utility.yul\":3416:3426   */\n      0x4e487b71\n        /* \"#utility.yul\":3411:3414   */\n      0xe0\n        /* \"#utility.yul\":3407:3427   */\n      shl\n        /* \"#utility.yul\":3404:3405   */\n      0x00\n        /* \"#utility.yul\":3397:3428   */\n      mstore\n        /* \"#utility.yul\":3447:3451   */\n      0x32\n        /* \"#utility.yul\":3444:3445   */\n      0x04\n        /* \"#utility.yul\":3437:3452   */\n      mstore\n        /* \"#utility.yul\":3471:3475   */\n      0x24\n        /* \"#utility.yul\":3468:3469   */\n      0x00\n        /* \"#utility.yul\":3461:3476   */\n      revert\n        /* \"#utility.yul\":3487:3614   */\n    tag_45:\n        /* \"#utility.yul\":3548:3558   */\n      0x4e487b71\n        /* \"#utility.yul\":3543:3546   */\n      0xe0\n        /* \"#utility.yul\":3539:3559   */\n      shl\n        /* \"#utility.yul\":3536:3537   */\n      0x00\n        /* \"#utility.yul\":3529:3560   */\n      mstore\n        /* \"#utility.yul\":3579:3583   */\n      0x41\n        /* \"#utility.yul\":3576:3577   */\n      0x04\n        /* \"#utility.yul\":3569:3584   */\n      mstore\n        /* \"#utility.yul\":3603:3607   */\n      0x24\n        /* \"#utility.yul\":3600:3601   */\n      0x00\n        /* \"#utility.yul\":3593:3608   */\n      revert\n        /* \"#utility.yul\":3619:3750   */\n    tag_77:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3694:3725   */\n      dup2\n      and\n        /* \"#utility.yul\":3684:3726   */\n      dup2\n      eq\n        /* \"#utility.yul\":3674:3676   */\n      tag_63\n      jumpi\n        /* \"#utility.yul\":3740:3741   */\n      0x00\n        /* \"#utility.yul\":3737:3738   */\n      dup1\n        /* \"#utility.yul\":3730:3742   */\n      revert\n    stop\n\n    sub_0: assembly {\n            /* \"contracts/Crowdsale.sol\":1086:5935  contract Crowdsale {... */\n          mstore(0x40, 0x80)\n            /* \"contracts/Crowdsale.sol\":1932:2160  constructor(uint256 _rate, address _wallet, ERC20 _token) {... */\n          callvalue\n          dup1\n          iszero\n          tag_1\n          jumpi\n          0x00\n          dup1\n          revert\n        tag_1:\n          pop\n          mload(0x40)\n          sub(codesize, bytecodeSize)\n          dup1\n          bytecodeSize\n          dup4\n          codecopy\n          dup2\n          add\n          0x40\n          dup2\n          swap1\n          mstore\n          tag_2\n          swap2\n          tag_3\n          jump\t// in\n        tag_2:\n            /* \"contracts/Crowdsale.sol\":2012:2013  0 */\n          0x00\n            /* \"contracts/Crowdsale.sol\":2004:2009  _rate */\n          dup4\n            /* \"contracts/Crowdsale.sol\":2004:2013  _rate > 0 */\n          gt\n            /* \"contracts/Crowdsale.sol\":1996:2014  require(_rate > 0) */\n          tag_6\n          jumpi\n          0x00\n          dup1\n          revert\n        tag_6:\n          sub(shl(0xa0, 0x01), 0x01)\n            /* \"contracts/Crowdsale.sol\":2028:2049  _wallet != address(0) */\n          dup3\n          and\n            /* \"contracts/Crowdsale.sol\":2020:2050  require(_wallet != address(0)) */\n          tag_7\n          jumpi\n          0x00\n          dup1\n          revert\n        tag_7:\n          sub(shl(0xa0, 0x01), 0x01)\n            /* \"contracts/Crowdsale.sol\":2064:2093  address(_token) != address(0) */\n          dup2\n          and\n            /* \"contracts/Crowdsale.sol\":2056:2094  require(address(_token) != address(0)) */\n          tag_8\n          jumpi\n          0x00\n          dup1\n          revert\n        tag_8:\n            /* \"contracts/Crowdsale.sol\":2101:2105  rate */\n          0x02\n            /* \"contracts/Crowdsale.sol\":2101:2113  rate = _rate */\n          swap3\n          swap1\n          swap3\n          sstore\n            /* \"contracts/Crowdsale.sol\":2119:2125  wallet */\n          0x01\n            /* \"contracts/Crowdsale.sol\":2119:2135  wallet = _wallet */\n          dup1\n          sload\n          sub(shl(0xa0, 0x01), 0x01)\n          swap3\n          dup4\n          and\n          not(sub(shl(0xa0, 0x01), 0x01))\n          swap2\n          dup3\n          and\n          or\n          swap1\n          swap2\n          sstore\n          0x00\n            /* \"contracts/Crowdsale.sol\":2141:2155  token = _token */\n          dup1\n          sload\n          swap3\n          swap1\n          swap4\n          and\n          swap2\n          and\n          or\n          swap1\n          sstore\n            /* \"contracts/Crowdsale.sol\":1086:5935  contract Crowdsale {... */\n          jump(tag_10)\n            /* \"#utility.yul\":14:473   */\n        tag_3:\n            /* \"#utility.yul\":115:121   */\n          0x00\n            /* \"#utility.yul\":123:129   */\n          dup1\n            /* \"#utility.yul\":131:137   */\n          0x00\n            /* \"#utility.yul\":184:186   */\n          0x60\n            /* \"#utility.yul\":172:181   */\n          dup5\n            /* \"#utility.yul\":163:170   */\n          dup7\n            /* \"#utility.yul\":159:182   */\n          sub\n            /* \"#utility.yul\":155:187   */\n          slt\n            /* \"#utility.yul\":152:154   */\n          iszero\n          tag_12\n          jumpi\n            /* \"#utility.yul\":200:201   */\n          0x00\n            /* \"#utility.yul\":197:198   */\n          dup1\n            /* \"#utility.yul\":190:202   */\n          revert\n            /* \"#utility.yul\":152:154   */\n        tag_12:\n            /* \"#utility.yul\":229:238   */\n          dup4\n            /* \"#utility.yul\":223:239   */\n          mload\n            /* \"#utility.yul\":213:239   */\n          swap3\n          pop\n            /* \"#utility.yul\":282:284   */\n          0x20\n            /* \"#utility.yul\":271:280   */\n          dup5\n            /* \"#utility.yul\":267:285   */\n          add\n            /* \"#utility.yul\":261:286   */\n          mload\n            /* \"#utility.yul\":295:326   */\n          tag_13\n            /* \"#utility.yul\":320:325   */\n          dup2\n            /* \"#utility.yul\":295:326   */\n          tag_14\n          jump\t// in\n        tag_13:\n            /* \"#utility.yul\":395:397   */\n          0x40\n            /* \"#utility.yul\":380:398   */\n          dup6\n          add\n            /* \"#utility.yul\":374:399   */\n          mload\n            /* \"#utility.yul\":345:350   */\n          swap1\n          swap3\n          pop\n            /* \"#utility.yul\":408:441   */\n          tag_15\n            /* \"#utility.yul\":374:399   */\n          dup2\n            /* \"#utility.yul\":408:441   */\n          tag_14\n          jump\t// in\n        tag_15:\n            /* \"#utility.yul\":460:467   */\n          dup1\n            /* \"#utility.yul\":450:467   */\n          swap2\n          pop\n          pop\n            /* \"#utility.yul\":142:473   */\n          swap3\n          pop\n          swap3\n          pop\n          swap3\n          jump\t// out\n            /* \"#utility.yul\":478:609   */\n        tag_14:\n          sub(shl(0xa0, 0x01), 0x01)\n            /* \"#utility.yul\":553:584   */\n          dup2\n          and\n            /* \"#utility.yul\":543:585   */\n          dup2\n          eq\n            /* \"#utility.yul\":533:535   */\n          tag_17\n          jumpi\n            /* \"#utility.yul\":599:600   */\n          0x00\n            /* \"#utility.yul\":596:597   */\n          dup1\n            /* \"#utility.yul\":589:601   */\n          revert\n            /* \"#utility.yul\":533:535   */\n        tag_17:\n            /* \"#utility.yul\":523:609   */\n          pop\n          jump\t// out\n        tag_10:\n            /* \"contracts/Crowdsale.sol\":1086:5935  contract Crowdsale {... */\n          dataSize(sub_0)\n          dup1\n          dataOffset(sub_0)\n          0x00\n          codecopy\n          0x00\n          return\n        stop\n\n        sub_0: assembly {\n                /* \"contracts/Crowdsale.sol\":1086:5935  contract Crowdsale {... */\n              mstore(0x40, 0x80)\n              jumpi(tag_1, lt(calldatasize, 0x04))\n              shr(0xe0, calldataload(0x00))\n              dup1\n              0x2c4e722e\n              eq\n              tag_3\n              jumpi\n              dup1\n              0x4042b66f\n              eq\n              tag_4\n              jumpi\n              dup1\n              0x521eb273\n              eq\n              tag_5\n              jumpi\n              dup1\n              0xec8ac4d8\n              eq\n              tag_6\n              jumpi\n              dup1\n              0xfc0c546a\n              eq\n              tag_7\n              jumpi\n              jump(tag_2)\n            tag_1:\n              jumpi(tag_2, calldatasize)\n                /* \"contracts/Crowdsale.sol\":2456:2477  buyTokens(msg.sender) */\n              tag_10\n                /* \"contracts/Crowdsale.sol\":2466:2476  msg.sender */\n              caller\n                /* \"contracts/Crowdsale.sol\":2456:2465  buyTokens */\n              tag_11\n                /* \"contracts/Crowdsale.sol\":2456:2477  buyTokens(msg.sender) */\n              jump\t// in\n            tag_10:\n                /* \"contracts/Crowdsale.sol\":1086:5935  contract Crowdsale {... */\n              stop\n            tag_2:\n                /* \"contracts/Crowdsale.sol\":2390:2411  buyTokens(msg.sender) */\n              tag_10\n                /* \"contracts/Crowdsale.sol\":2400:2410  msg.sender */\n              caller\n                /* \"contracts/Crowdsale.sol\":2390:2399  buyTokens */\n              tag_11\n                /* \"contracts/Crowdsale.sol\":2390:2411  buyTokens(msg.sender) */\n              jump\t// in\n                /* \"contracts/Crowdsale.sol\":1301:1320  uint256 public rate */\n            tag_3:\n              callvalue\n              dup1\n              iszero\n              tag_15\n              jumpi\n              0x00\n              dup1\n              revert\n            tag_15:\n              pop\n              tag_16\n              sload(0x02)\n              dup2\n              jump\n            tag_16:\n              mload(0x40)\n                /* \"#utility.yul\":1441:1466   */\n              swap1\n              dup2\n              mstore\n                /* \"#utility.yul\":1429:1431   */\n              0x20\n                /* \"#utility.yul\":1414:1432   */\n              add\n                /* \"contracts/Crowdsale.sol\":1301:1320  uint256 public rate */\n            tag_18:\n              mload(0x40)\n              dup1\n              swap2\n              sub\n              swap1\n              return\n                /* \"contracts/Crowdsale.sol\":1351:1375  uint256 public weiRaised */\n            tag_4:\n              callvalue\n              dup1\n              iszero\n              tag_20\n              jumpi\n              0x00\n              dup1\n              revert\n            tag_20:\n              pop\n              tag_16\n              sload(0x03)\n              dup2\n              jump\n                /* \"contracts/Crowdsale.sol\":1228:1249  address public wallet */\n            tag_5:\n              callvalue\n              dup1\n              iszero\n              tag_24\n              jumpi\n              0x00\n              dup1\n              revert\n            tag_24:\n              pop\n              sload(0x01)\n              tag_25\n              swap1\n              sub(shl(0xa0, 0x01), 0x01)\n              and\n              dup2\n              jump\n            tag_25:\n              mload(0x40)\n              sub(shl(0xa0, 0x01), 0x01)\n                /* \"#utility.yul\":751:783   */\n              swap2\n              swap1\n              swap2\n              and\n                /* \"#utility.yul\":733:784   */\n              dup2\n              mstore\n                /* \"#utility.yul\":721:723   */\n              0x20\n                /* \"#utility.yul\":706:724   */\n              add\n                /* \"contracts/Crowdsale.sol\":1228:1249  address public wallet */\n              tag_18\n                /* \"#utility.yul\":688:790   */\n              jump\n                /* \"contracts/Crowdsale.sol\":2618:3195  function buyTokens(address _beneficiary) public payable {... */\n            tag_6:\n              tag_10\n              tag_30\n              calldatasize\n              0x04\n              tag_31\n              jump\t// in\n            tag_30:\n              tag_11\n              jump\t// in\n                /* \"contracts/Crowdsale.sol\":1166:1184  ERC20 public token */\n            tag_7:\n              callvalue\n              dup1\n              iszero\n              tag_32\n              jumpi\n              0x00\n              dup1\n              revert\n            tag_32:\n              pop\n              sload(0x00)\n              tag_25\n              swap1\n              sub(shl(0xa0, 0x01), 0x01)\n              and\n              dup2\n              jump\n                /* \"contracts/Crowdsale.sol\":2618:3195  function buyTokens(address _beneficiary) public payable {... */\n            tag_11:\n                /* \"contracts/Crowdsale.sol\":2701:2710  msg.value */\n              callvalue\n                /* \"contracts/Crowdsale.sol\":2716:2761  _preValidatePurchase(_beneficiary, weiAmount) */\n              tag_38\n                /* \"contracts/Crowdsale.sol\":2737:2749  _beneficiary */\n              dup3\n                /* \"contracts/Crowdsale.sol\":2701:2710  msg.value */\n              dup3\n                /* \"contracts/Crowdsale.sol\":2716:2736  _preValidatePurchase */\n              tag_39\n                /* \"contracts/Crowdsale.sol\":2716:2761  _preValidatePurchase(_beneficiary, weiAmount) */\n              jump\t// in\n            tag_38:\n                /* \"contracts/Crowdsale.sol\":2812:2826  uint256 tokens */\n              0x00\n                /* \"contracts/Crowdsale.sol\":2829:2855  _getTokenAmount(weiAmount) */\n              tag_40\n                /* \"contracts/Crowdsale.sol\":2845:2854  weiAmount */\n              dup3\n                /* \"contracts/Crowdsale.sol\":2829:2844  _getTokenAmount */\n              tag_41\n                /* \"contracts/Crowdsale.sol\":2829:2855  _getTokenAmount(weiAmount) */\n              jump\t// in\n            tag_40:\n                /* \"contracts/Crowdsale.sol\":2894:2903  weiRaised */\n              sload(0x03)\n                /* \"contracts/Crowdsale.sol\":2812:2855  uint256 tokens = _getTokenAmount(weiAmount) */\n              swap1\n              swap2\n              pop\n                /* \"contracts/Crowdsale.sol\":2894:2918  weiRaised.add(weiAmount) */\n              tag_42\n              swap1\n                /* \"contracts/Crowdsale.sol\":2908:2917  weiAmount */\n              dup4\n                /* \"contracts/Crowdsale.sol\":2894:2907  weiRaised.add */\n              tag_43\n                /* \"contracts/Crowdsale.sol\":2894:2918  weiRaised.add(weiAmount) */\n              jump\t// in\n            tag_42:\n                /* \"contracts/Crowdsale.sol\":2882:2891  weiRaised */\n              0x03\n                /* \"contracts/Crowdsale.sol\":2882:2918  weiRaised = weiRaised.add(weiAmount) */\n              sstore\n                /* \"contracts/Crowdsale.sol\":2925:2963  _processPurchase(_beneficiary, tokens) */\n              tag_44\n                /* \"contracts/Crowdsale.sol\":2942:2954  _beneficiary */\n              dup4\n                /* \"contracts/Crowdsale.sol\":2956:2962  tokens */\n              dup3\n                /* \"contracts/Crowdsale.sol\":2925:2941  _processPurchase */\n              tag_45\n                /* \"contracts/Crowdsale.sol\":2925:2963  _processPurchase(_beneficiary, tokens) */\n              jump\t// in\n            tag_44:\n                /* \"contracts/Crowdsale.sol\":2974:3062  TokenPurchase(... */\n              0x40\n              dup1\n              mload\n                /* \"#utility.yul\":1651:1676   */\n              dup4\n              dup2\n              mstore\n                /* \"#utility.yul\":1707:1709   */\n              0x20\n                /* \"#utility.yul\":1692:1710   */\n              dup2\n              add\n                /* \"#utility.yul\":1685:1719   */\n              dup4\n              swap1\n              mstore\n                /* \"contracts/Crowdsale.sol\":2974:3062  TokenPurchase(... */\n              dup2\n              mload\n              sub(shl(0xa0, 0x01), 0x01)\n              dup7\n              and\n              swap3\n                /* \"contracts/Crowdsale.sol\":2995:3005  msg.sender */\n              caller\n              swap3\n                /* \"contracts/Crowdsale.sol\":2974:3062  TokenPurchase(... */\n              0x623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18\n              swap3\n              swap1\n              dup2\n              swap1\n              sub\n              swap1\n              swap2\n              add\n              swap1\n              log3\n                /* \"contracts/Crowdsale.sol\":3123:3138  _forwardFunds() */\n              tag_50\n                /* \"contracts/Crowdsale.sol\":3123:3136  _forwardFunds */\n              tag_51\n                /* \"contracts/Crowdsale.sol\":3123:3138  _forwardFunds() */\n              jump\t// in\n            tag_50:\n                /* \"contracts/Crowdsale.sol\":2674:3195  {... */\n              pop\n              pop\n                /* \"contracts/Crowdsale.sol\":2618:3195  function buyTokens(address _beneficiary) public payable {... */\n              pop\n              jump\t// out\n                /* \"contracts/Crowdsale.sol\":3619:3803  function _preValidatePurchase(... */\n            tag_39:\n              sub(shl(0xa0, 0x01), 0x01)\n                /* \"contracts/Crowdsale.sol\":3741:3767  _beneficiary != address(0) */\n              dup3\n              and\n                /* \"contracts/Crowdsale.sol\":3733:3768  require(_beneficiary != address(0)) */\n              tag_55\n              jumpi\n              0x00\n              dup1\n              revert\n            tag_55:\n                /* \"contracts/Crowdsale.sol\":3782:3797  _weiAmount != 0 */\n              dup1\n                /* \"contracts/Crowdsale.sol\":3774:3798  require(_weiAmount != 0) */\n              tag_56\n              jumpi\n              0x00\n              dup1\n              revert\n            tag_56:\n                /* \"contracts/Crowdsale.sol\":3619:3803  function _preValidatePurchase(... */\n              pop\n              pop\n              jump\t// out\n                /* \"contracts/Crowdsale.sol\":5653:5774  function _getTokenAmount(uint256 _weiAmount)... */\n            tag_41:\n                /* \"contracts/Crowdsale.sol\":5725:5732  uint256 */\n              0x00\n                /* \"contracts/Crowdsale.sol\":5749:5769  _weiAmount.mul(rate) */\n              tag_58\n                /* \"contracts/Crowdsale.sol\":5764:5768  rate */\n              sload(0x02)\n                /* \"contracts/Crowdsale.sol\":5749:5759  _weiAmount */\n              dup4\n                /* \"contracts/Crowdsale.sol\":5749:5763  _weiAmount.mul */\n              tag_59\n              swap1\n                /* \"contracts/Crowdsale.sol\":5749:5769  _weiAmount.mul(rate) */\n              swap2\n              swap1\n              0xffffffff\n              and\n              jump\t// in\n            tag_58:\n                /* \"contracts/Crowdsale.sol\":5742:5769  return _weiAmount.mul(rate) */\n              swap3\n                /* \"contracts/Crowdsale.sol\":5653:5774  function _getTokenAmount(uint256 _weiAmount)... */\n              swap2\n              pop\n              pop\n              jump\t// out\n                /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2755:2851  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n            tag_43:\n                /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2813:2820  uint256 */\n              0x00\n                /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2844  a + b */\n              tag_61\n                /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2843:2844  b */\n              dup3\n                /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2840  a */\n              dup5\n                /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2844  a + b */\n              tag_62\n              jump\t// in\n            tag_61:\n                /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2832:2844  return a + b */\n              swap4\n                /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2755:2851  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n              swap3\n              pop\n              pop\n              pop\n              jump\t// out\n                /* \"contracts/Crowdsale.sol\":4881:5031  function _processPurchase(... */\n            tag_45:\n                /* \"contracts/Crowdsale.sol\":4984:5026  _deliverTokens(_beneficiary, _tokenAmount) */\n              tag_56\n                /* \"contracts/Crowdsale.sol\":4999:5011  _beneficiary */\n              dup3\n                /* \"contracts/Crowdsale.sol\":5013:5025  _tokenAmount */\n              dup3\n                /* \"contracts/Crowdsale.sol\":4984:4998  _deliverTokens */\n              tag_65\n                /* \"contracts/Crowdsale.sol\":4984:5026  _deliverTokens(_beneficiary, _tokenAmount) */\n              jump\t// in\n                /* \"contracts/Crowdsale.sol\":5853:5933  function _forwardFunds() internal {... */\n            tag_51:\n                /* \"contracts/Crowdsale.sol\":5901:5907  wallet */\n              sload(0x01)\n                /* \"contracts/Crowdsale.sol\":5893:5928  payable(wallet).transfer(msg.value) */\n              mload(0x40)\n              sub(shl(0xa0, 0x01), 0x01)\n                /* \"contracts/Crowdsale.sol\":5901:5907  wallet */\n              swap1\n              swap2\n              and\n              swap1\n                /* \"contracts/Crowdsale.sol\":5918:5927  msg.value */\n              callvalue\n                /* \"contracts/Crowdsale.sol\":5893:5928  payable(wallet).transfer(msg.value) */\n              dup1\n              iszero\n              0x08fc\n              mul\n              swap2\n                /* \"contracts/Crowdsale.sol\":5901:5907  wallet */\n              0x00\n                /* \"contracts/Crowdsale.sol\":5893:5928  payable(wallet).transfer(msg.value) */\n              dup2\n                /* \"contracts/Crowdsale.sol\":5901:5907  wallet */\n              dup2\n                /* \"contracts/Crowdsale.sol\":5893:5928  payable(wallet).transfer(msg.value) */\n              dup2\n                /* \"contracts/Crowdsale.sol\":5918:5927  msg.value */\n              dup6\n                /* \"contracts/Crowdsale.sol\":5901:5907  wallet */\n              dup9\n                /* \"contracts/Crowdsale.sol\":5893:5928  payable(wallet).transfer(msg.value) */\n              dup9\n              call\n              swap4\n              pop\n              pop\n              pop\n              pop\n              iszero\n              dup1\n              iszero\n              tag_69\n              jumpi\n              returndatasize\n              0x00\n              dup1\n              returndatacopy\n              revert(0x00, returndatasize)\n            tag_69:\n              pop\n                /* \"contracts/Crowdsale.sol\":5853:5933  function _forwardFunds() internal {... */\n              jump\t// out\n                /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3465:3561  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n            tag_59:\n                /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3523:3530  uint256 */\n              0x00\n                /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3549:3554  a * b */\n              tag_61\n                /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3553:3554  b */\n              dup3\n                /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3549:3550  a */\n              dup5\n                /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3549:3554  a * b */\n              tag_73\n              jump\t// in\n                /* \"contracts/Crowdsale.sol\":4474:4634  function _deliverTokens(... */\n            tag_65:\n                /* \"contracts/Crowdsale.sol\":4587:4592  token */\n              sload(0x00)\n                /* \"contracts/Crowdsale.sol\":4587:4629  token.transfer(_beneficiary, _tokenAmount) */\n              mload(0x40)\n              shl(0xe0, 0xa9059cbb)\n              dup2\n              mstore\n              0x01\n              dup1\n              0xa0\n              shl\n              sub\n                /* \"#utility.yul\":987:1019   */\n              dup5\n              dup2\n              and\n                /* \"contracts/Crowdsale.sol\":4587:4629  token.transfer(_beneficiary, _tokenAmount) */\n              0x04\n              dup4\n              add\n                /* \"#utility.yul\":969:1020   */\n              mstore\n                /* \"#utility.yul\":1036:1054   */\n              0x24\n              dup3\n              add\n                /* \"#utility.yul\":1029:1063   */\n              dup5\n              swap1\n              mstore\n                /* \"contracts/Crowdsale.sol\":4587:4592  token */\n              swap1\n              swap2\n              and\n              swap1\n                /* \"contracts/Crowdsale.sol\":4587:4601  token.transfer */\n              0xa9059cbb\n              swap1\n                /* \"#utility.yul\":942:960   */\n              0x44\n              add\n                /* \"contracts/Crowdsale.sol\":4587:4629  token.transfer(_beneficiary, _tokenAmount) */\n              0x20\n              mload(0x40)\n              dup1\n              dup4\n              sub\n              dup2\n              0x00\n              dup8\n              dup1\n              extcodesize\n              iszero\n              dup1\n              iszero\n              tag_77\n              jumpi\n              0x00\n              dup1\n              revert\n            tag_77:\n              pop\n              gas\n              call\n              iszero\n              dup1\n              iszero\n              tag_79\n              jumpi\n              returndatasize\n              0x00\n              dup1\n              returndatacopy\n              revert(0x00, returndatasize)\n            tag_79:\n              pop\n              pop\n              pop\n              pop\n              mload(0x40)\n              returndatasize\n              not(0x1f)\n              0x1f\n              dup3\n              add\n              and\n              dup3\n              add\n              dup1\n              0x40\n              mstore\n              pop\n              dup2\n              add\n              swap1\n              tag_50\n              swap2\n              swap1\n              tag_81\n              jump\t// in\n                /* \"#utility.yul\":14:300   */\n            tag_31:\n                /* \"#utility.yul\":73:79   */\n              0x00\n                /* \"#utility.yul\":126:128   */\n              0x20\n                /* \"#utility.yul\":114:123   */\n              dup3\n                /* \"#utility.yul\":105:112   */\n              dup5\n                /* \"#utility.yul\":101:124   */\n              sub\n                /* \"#utility.yul\":97:129   */\n              slt\n                /* \"#utility.yul\":94:96   */\n              iszero\n              tag_84\n              jumpi\n                /* \"#utility.yul\":142:143   */\n              0x00\n                /* \"#utility.yul\":139:140   */\n              dup1\n                /* \"#utility.yul\":132:144   */\n              revert\n                /* \"#utility.yul\":94:96   */\n            tag_84:\n                /* \"#utility.yul\":168:191   */\n              dup2\n              calldataload\n              sub(shl(0xa0, 0x01), 0x01)\n                /* \"#utility.yul\":220:251   */\n              dup2\n              and\n                /* \"#utility.yul\":210:252   */\n              dup2\n              eq\n                /* \"#utility.yul\":200:202   */\n              tag_61\n              jumpi\n                /* \"#utility.yul\":266:267   */\n              0x00\n                /* \"#utility.yul\":263:264   */\n              dup1\n                /* \"#utility.yul\":256:268   */\n              revert\n                /* \"#utility.yul\":305:582   */\n            tag_81:\n                /* \"#utility.yul\":372:378   */\n              0x00\n                /* \"#utility.yul\":425:427   */\n              0x20\n                /* \"#utility.yul\":413:422   */\n              dup3\n                /* \"#utility.yul\":404:411   */\n              dup5\n                /* \"#utility.yul\":400:423   */\n              sub\n                /* \"#utility.yul\":396:428   */\n              slt\n                /* \"#utility.yul\":393:395   */\n              iszero\n              tag_87\n              jumpi\n                /* \"#utility.yul\":441:442   */\n              0x00\n                /* \"#utility.yul\":438:439   */\n              dup1\n                /* \"#utility.yul\":431:443   */\n              revert\n                /* \"#utility.yul\":393:395   */\n            tag_87:\n                /* \"#utility.yul\":473:482   */\n              dup2\n                /* \"#utility.yul\":467:483   */\n              mload\n                /* \"#utility.yul\":526:531   */\n              dup1\n                /* \"#utility.yul\":519:532   */\n              iszero\n                /* \"#utility.yul\":512:533   */\n              iszero\n                /* \"#utility.yul\":505:510   */\n              dup2\n                /* \"#utility.yul\":502:534   */\n              eq\n                /* \"#utility.yul\":492:494   */\n              tag_61\n              jumpi\n                /* \"#utility.yul\":548:549   */\n              0x00\n                /* \"#utility.yul\":545:546   */\n              dup1\n                /* \"#utility.yul\":538:550   */\n              revert\n                /* \"#utility.yul\":1730:1858   */\n            tag_62:\n                /* \"#utility.yul\":1770:1773   */\n              0x00\n                /* \"#utility.yul\":1801:1802   */\n              dup3\n                /* \"#utility.yul\":1797:1803   */\n              not\n                /* \"#utility.yul\":1794:1795   */\n              dup3\n                /* \"#utility.yul\":1791:1804   */\n              gt\n                /* \"#utility.yul\":1788:1790   */\n              iszero\n              tag_96\n              jumpi\n                /* \"#utility.yul\":1807:1825   */\n              tag_96\n              tag_97\n              jump\t// in\n            tag_96:\n              pop\n                /* \"#utility.yul\":1843:1852   */\n              add\n              swap1\n                /* \"#utility.yul\":1778:1858   */\n              jump\t// out\n                /* \"#utility.yul\":1863:2031   */\n            tag_73:\n                /* \"#utility.yul\":1903:1910   */\n              0x00\n                /* \"#utility.yul\":1969:1970   */\n              dup2\n                /* \"#utility.yul\":1965:1966   */\n              0x00\n                /* \"#utility.yul\":1961:1967   */\n              not\n                /* \"#utility.yul\":1957:1971   */\n              div\n                /* \"#utility.yul\":1954:1955   */\n              dup4\n                /* \"#utility.yul\":1951:1972   */\n              gt\n                /* \"#utility.yul\":1946:1947   */\n              dup3\n                /* \"#utility.yul\":1939:1948   */\n              iszero\n                /* \"#utility.yul\":1932:1949   */\n              iszero\n                /* \"#utility.yul\":1928:1973   */\n              and\n                /* \"#utility.yul\":1925:1927   */\n              iszero\n              tag_100\n              jumpi\n                /* \"#utility.yul\":1976:1994   */\n              tag_100\n              tag_97\n              jump\t// in\n            tag_100:\n              pop\n                /* \"#utility.yul\":2016:2025   */\n              mul\n              swap1\n                /* \"#utility.yul\":1915:2031   */\n              jump\t// out\n                /* \"#utility.yul\":2036:2163   */\n            tag_97:\n                /* \"#utility.yul\":2097:2107   */\n              0x4e487b71\n                /* \"#utility.yul\":2092:2095   */\n              0xe0\n                /* \"#utility.yul\":2088:2108   */\n              shl\n                /* \"#utility.yul\":2085:2086   */\n              0x00\n                /* \"#utility.yul\":2078:2109   */\n              mstore\n                /* \"#utility.yul\":2128:2132   */\n              0x11\n                /* \"#utility.yul\":2125:2126   */\n              0x04\n                /* \"#utility.yul\":2118:2133   */\n              mstore\n                /* \"#utility.yul\":2152:2156   */\n              0x24\n                /* \"#utility.yul\":2149:2150   */\n              0x00\n                /* \"#utility.yul\":2142:2157   */\n              revert\n\n            auxdata: 0xa264697066735822122074fabfe1782544237d2815280b75efb7ce1463d874ee8c6fdee433ce58bddadb64736f6c63430008060033\n        }\n    }\n\n    auxdata: 0xa2646970667358221220be50c8a65caf871ae159ad970dce163a11af26e062a349f07d3d6a7653a11e7b64736f6c63430008060033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_813": {
									"entryPoint": null,
									"id": 813,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 31,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610a1e8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780638da5cb5b14610066578063ee323eca14610086578063f0e24a4014610099578063f2fde38b146100ae575b600080fd5b6100646100c1565b005b6000546040516001600160a01b0390911681526020015b60405180910390f35b610064610094366004610439565b6100d5565b6100a16101db565b60405161007d919061047b565b6100646100bc366004610415565b6102e0565b6100c961035e565b6100d360006103b8565b565b60018054600091826100e6836104ed565b9091555060008181526002602081905260409182902080546001600160a01b038088166001600160a01b0319928316178355600183018a90559282018054938916939091169290921790915590519192509085908590859061014790610408565b9283526001600160a01b039182166020840152166040820152606001604051809103906000f08015801561017f573d6000803e3d6000fd5b506003820180546001600160a01b0319166001600160a01b039290921691821790556040519081527f87bf7513da32df063aa08a31dcfc40284567075208515fcb6d35bbdcc47447369060200160405180910390a15050505050565b606060015467ffffffffffffffff8111156101f8576101f861052c565b60405190808252806020026020018201604052801561024a57816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816102165790505b50905060005b6001548110156102dc57600081815260026020818152604092839020835160808101855281546001600160a01b03908116825260018301549382019390935292810154821693830193909352600390920154909116606082015282518390839081106102be576102be610516565b602002602001018190525080806102d4906104ed565b915050610250565b5090565b6102e861035e565b6001600160a01b0381166103525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61035b816103b8565b50565b6000546001600160a01b031633146100d35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610349565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104918061055883390190565b60006020828403121561042757600080fd5b813561043281610542565b9392505050565b60008060006060848603121561044e57600080fd5b83359250602084013561046081610542565b9150604084013561047081610542565b809150509250925092565b602080825282518282018190526000919060409081850190868401855b828110156104e057815180516001600160a01b039081168652878201518887015286820151811687870152606091820151169085015260809093019290850190600101610498565b5091979650505050505050565b600060001982141561050f57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461035b57600080fdfe608060405234801561001057600080fd5b5060405161049138038061049183398101604081905261002f91610099565b6000831161003c57600080fd5b6001600160a01b03821661004f57600080fd5b6001600160a01b03811661006257600080fd5b600292909255600180546001600160a01b039283166001600160a01b031991821617909155600080549290931691161790556100f4565b6000806000606084860312156100ae57600080fd5b8351925060208401516100c0816100dc565b60408501519092506100d1816100dc565b809150509250925092565b6001600160a01b03811681146100f157600080fd5b50565b61038e806101036000396000f3fe60806040526004361061004e5760003560e01c80632c4e722e146100675780634042b66f14610090578063521eb273146100a6578063ec8ac4d8146100de578063fc0c546a146100f15761005e565b3661005e5761005c33610111565b005b61005c33610111565b34801561007357600080fd5b5061007d60025481565b6040519081526020015b60405180910390f35b34801561009c57600080fd5b5061007d60035481565b3480156100b257600080fd5b506001546100c6906001600160a01b031681565b6040516001600160a01b039091168152602001610087565b61005c6100ec3660046102c0565b610111565b3480156100fd57600080fd5b506000546100c6906001600160a01b031681565b3461011c8282610197565b6000610127826101b8565b60035490915061013790836101d5565b60035561014483826101e8565b60408051838152602081018390526001600160a01b0385169133917f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18910160405180910390a36101926101f2565b505050565b6001600160a01b0382166101aa57600080fd5b806101b457600080fd5b5050565b60006101cf6002548361022e90919063ffffffff16565b92915050565b60006101e1828461030b565b9392505050565b6101b4828261023a565b6001546040516001600160a01b03909116903480156108fc02916000818181858888f1935050505015801561022b573d6000803e3d6000fd5b50565b60006101e18284610323565b60005460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561028857600080fd5b505af115801561029c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019291906102e9565b6000602082840312156102d257600080fd5b81356001600160a01b03811681146101e157600080fd5b6000602082840312156102fb57600080fd5b815180151581146101e157600080fd5b6000821982111561031e5761031e610342565b500190565b600081600019048311821515161561033d5761033d610342565b500290565b634e487b7160e01b600052601160045260246000fdfea264697066735822122074fabfe1782544237d2815280b75efb7ce1463d874ee8c6fdee433ce58bddadb64736f6c63430008060033a2646970667358221220be50c8a65caf871ae159ad970dce163a11af26e062a349f07d3d6a7653a11e7b64736f6c63430008060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A CALLER PUSH2 0x1F JUMP JUMPDEST PUSH2 0x6F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xA1E DUP1 PUSH2 0x7E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0xEE323ECA EQ PUSH2 0x86 JUMPI DUP1 PUSH4 0xF0E24A40 EQ PUSH2 0x99 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xAE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0xC1 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x64 PUSH2 0x94 CALLDATASIZE PUSH1 0x4 PUSH2 0x439 JUMP JUMPDEST PUSH2 0xD5 JUMP JUMPDEST PUSH2 0xA1 PUSH2 0x1DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7D SWAP2 SWAP1 PUSH2 0x47B JUMP JUMPDEST PUSH2 0x64 PUSH2 0xBC CALLDATASIZE PUSH1 0x4 PUSH2 0x415 JUMP JUMPDEST PUSH2 0x2E0 JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x35E JUMP JUMPDEST PUSH2 0xD3 PUSH1 0x0 PUSH2 0x3B8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 PUSH2 0xE6 DUP4 PUSH2 0x4ED JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR DUP4 SSTORE PUSH1 0x1 DUP4 ADD DUP11 SWAP1 SSTORE SWAP3 DUP3 ADD DUP1 SLOAD SWAP4 DUP10 AND SWAP4 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP2 SWAP3 POP SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x147 SWAP1 PUSH2 0x408 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x17F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x87BF7513DA32DF063AA08A31DCFC40284567075208515FCB6D35BBDCC4744736 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F8 JUMPI PUSH2 0x1F8 PUSH2 0x52C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24A JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE SWAP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP3 MSTORE PUSH1 0x0 NOT SWAP1 SWAP3 ADD SWAP2 ADD DUP2 PUSH2 0x216 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0x2DC JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x80 DUP2 ADD DUP6 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 DUP2 ADD SLOAD DUP3 AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE DUP3 MLOAD DUP4 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x2BE JUMPI PUSH2 0x2BE PUSH2 0x516 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x2D4 SWAP1 PUSH2 0x4ED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x250 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2E8 PUSH2 0x35E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x352 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x35B DUP2 PUSH2 0x3B8 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x349 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x491 DUP1 PUSH2 0x558 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x427 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x432 DUP2 PUSH2 0x542 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x460 DUP2 PUSH2 0x542 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x470 DUP2 PUSH2 0x542 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4E0 JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP7 MSTORE DUP8 DUP3 ADD MLOAD DUP9 DUP8 ADD MSTORE DUP7 DUP3 ADD MLOAD DUP2 AND DUP8 DUP8 ADD MSTORE PUSH1 0x60 SWAP2 DUP3 ADD MLOAD AND SWAP1 DUP6 ADD MSTORE PUSH1 0x80 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x498 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x50F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x491 CODESIZE SUB DUP1 PUSH2 0x491 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x0 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH2 0xF4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0xC0 DUP2 PUSH2 0xDC JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0xD1 DUP2 PUSH2 0xDC JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x38E DUP1 PUSH2 0x103 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2C4E722E EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x4042B66F EQ PUSH2 0x90 JUMPI DUP1 PUSH4 0x521EB273 EQ PUSH2 0xA6 JUMPI DUP1 PUSH4 0xEC8AC4D8 EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0xF1 JUMPI PUSH2 0x5E JUMP JUMPDEST CALLDATASIZE PUSH2 0x5E JUMPI PUSH2 0x5C CALLER PUSH2 0x111 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5C CALLER PUSH2 0x111 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7D PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7D PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0xC6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x87 JUMP JUMPDEST PUSH2 0x5C PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x2C0 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0xC6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE PUSH2 0x11C DUP3 DUP3 PUSH2 0x197 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127 DUP3 PUSH2 0x1B8 JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 SWAP2 POP PUSH2 0x137 SWAP1 DUP4 PUSH2 0x1D5 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0x144 DUP4 DUP3 PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 CALLER SWAP2 PUSH32 0x623B3804FA71D67900D064613DA8F94B9617215EE90799290593E1745087AD18 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x192 PUSH2 0x1F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CF PUSH1 0x2 SLOAD DUP4 PUSH2 0x22E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E1 DUP3 DUP5 PUSH2 0x30B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1B4 DUP3 DUP3 PUSH2 0x23A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x22B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E1 DUP3 DUP5 PUSH2 0x323 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x29C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x192 SWAP2 SWAP1 PUSH2 0x2E9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x31E JUMPI PUSH2 0x31E PUSH2 0x342 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x33D JUMPI PUSH2 0x33D PUSH2 0x342 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH21 0xFABFE1782544237D2815280B75EFB7CE1463D874EE DUP13 PUSH16 0xDEE433CE58BDDADB64736F6C63430008 MOD STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE POP 0xC8 0xA6 0x5C 0xAF DUP8 BYTE 0xE1 MSIZE 0xAD SWAP8 0xD 0xCE AND GASPRICE GT 0xAF 0x26 0xE0 PUSH3 0xA349F0 PUSH30 0x3D6A7653A11E7B64736F6C63430008060033000000000000000000000000 ",
							"sourceMap": "141:1291:7:-:0;;;;;;;;;;;;-1:-1:-1;936:32:0;719:10:4;936:18:0;:32::i;:::-;141:1291:7;;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;141:1291:7:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_checkOwner_54": {
									"entryPoint": 862,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_813": {
									"entryPoint": null,
									"id": 813,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 952,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@createCrowdSale_1478": {
									"entryPoint": 213,
									"id": 1478,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@getAllDeployedProjects_1515": {
									"entryPoint": 475,
									"id": 1515,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_40": {
									"entryPoint": null,
									"id": 40,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_68": {
									"entryPoint": 193,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_91": {
									"entryPoint": 736,
									"id": 91,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1045,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_addresst_contract$_ERC20_$698": {
									"entryPoint": 1081,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_array$_t_struct$_crowdsaleMeta_$1408_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_crowdsaleMeta_$1408_memory_ptr_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 1147,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_address_t_contract$_ERC20_$698__to_t_uint256_t_address_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 1261,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x32": {
									"entryPoint": 1302,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 1324,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_address": {
									"entryPoint": 1346,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:3752:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:177:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "139:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "142:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:8"
															},
															"nodeType": "YulIf",
															"src": "94:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "155:36:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "181:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "168:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "168:23:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "159:5:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "225:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "200:24:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "200:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "200:31:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "240:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "250:5:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "240:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:8",
														"type": ""
													}
												],
												"src": "14:247:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "383:352:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "429:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "438:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "441:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "431:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "431:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "431:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "404:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "413:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "400:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "400:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "425:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "396:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "396:32:8"
															},
															"nodeType": "YulIf",
															"src": "393:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "454:33:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "477:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "464:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "464:23:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "454:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "496:45:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "526:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "537:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "522:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "522:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "509:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "509:32:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "500:5:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "575:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "550:24:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "550:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "550:31:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "590:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "600:5:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "590:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "614:47:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "646:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "657:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "642:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "642:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "629:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "629:32:8"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "618:7:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "695:7:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "670:24:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "670:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "670:33:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "712:17:8",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "722:7:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "712:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_addresst_contract$_ERC20_$698",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "333:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "344:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "356:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "364:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "372:6:8",
														"type": ""
													}
												],
												"src": "266:469:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "841:102:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "851:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "863:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "874:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "859:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "859:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "851:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "893:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "908:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "924:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "929:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "920:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "920:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "933:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "916:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "916:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "904:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "904:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "886:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "886:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "886:51:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "810:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "821:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "832:4:8",
														"type": ""
													}
												],
												"src": "740:203:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1161:791:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1171:12:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1181:2:8",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1175:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1192:32:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1210:9:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1221:2:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1206:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1206:18:8"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "1196:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1240:9:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1251:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1233:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1233:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1233:21:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1263:17:8",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "1274:6:8"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "1267:3:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1289:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1309:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1303:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1303:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1293:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "1332:6:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1340:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1325:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1325:22:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1325:22:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1356:12:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1366:2:8",
																"type": "",
																"value": "64"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "1360:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1377:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1388:9:8"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "1399:2:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1384:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1384:18:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "1377:3:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1411:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1429:6:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1437:2:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1425:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1425:15:8"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "1415:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1449:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1458:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1453:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1517:409:8",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "1531:23:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "1547:6:8"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "1541:5:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1541:13:8"
																		},
																		"variables": [
																			{
																				"name": "_3",
																				"nodeType": "YulTypedName",
																				"src": "1535:2:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "1567:29:8",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1585:3:8",
																							"type": "",
																							"value": "160"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1590:1:8",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1581:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1581:11:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1594:1:8",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "sub",
																				"nodeType": "YulIdentifier",
																				"src": "1577:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1577:19:8"
																		},
																		"variables": [
																			{
																				"name": "_4",
																				"nodeType": "YulTypedName",
																				"src": "1571:2:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "1616:3:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "_3",
																									"nodeType": "YulIdentifier",
																									"src": "1631:2:8"
																								}
																							],
																							"functionName": {
																								"name": "mload",
																								"nodeType": "YulIdentifier",
																								"src": "1625:5:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1625:9:8"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "1636:2:8"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "1621:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1621:18:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1609:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1609:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1609:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "1664:3:8"
																						},
																						{
																							"name": "_1",
																							"nodeType": "YulIdentifier",
																							"src": "1669:2:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1660:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1660:12:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "_3",
																									"nodeType": "YulIdentifier",
																									"src": "1684:2:8"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "1688:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1680:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1680:11:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1674:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1674:18:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1653:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1653:40:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1653:40:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "1717:3:8"
																						},
																						{
																							"name": "_2",
																							"nodeType": "YulIdentifier",
																							"src": "1722:2:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1713:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1713:12:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "_3",
																											"nodeType": "YulIdentifier",
																											"src": "1741:2:8"
																										},
																										{
																											"name": "_2",
																											"nodeType": "YulIdentifier",
																											"src": "1745:2:8"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "1737:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1737:11:8"
																								}
																							],
																							"functionName": {
																								"name": "mload",
																								"nodeType": "YulIdentifier",
																								"src": "1731:5:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1731:18:8"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "1751:2:8"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "1727:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1727:27:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1706:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1706:49:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1706:49:8"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "1768:14:8",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1778:4:8",
																			"type": "",
																			"value": "0x60"
																		},
																		"variables": [
																			{
																				"name": "_5",
																				"nodeType": "YulTypedName",
																				"src": "1772:2:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "1806:3:8"
																						},
																						{
																							"name": "_5",
																							"nodeType": "YulIdentifier",
																							"src": "1811:2:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1802:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1802:12:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "_3",
																											"nodeType": "YulIdentifier",
																											"src": "1830:2:8"
																										},
																										{
																											"name": "_5",
																											"nodeType": "YulIdentifier",
																											"src": "1834:2:8"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "1826:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1826:11:8"
																								}
																							],
																							"functionName": {
																								"name": "mload",
																								"nodeType": "YulIdentifier",
																								"src": "1820:5:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1820:18:8"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "1840:2:8"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "1816:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1816:27:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1795:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1795:49:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1795:49:8"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1857:21:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "1868:3:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1873:4:8",
																					"type": "",
																					"value": "0x80"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1864:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1864:14:8"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1857:3:8"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1891:25:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "1905:6:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1913:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1901:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1901:15:8"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1891:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1479:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1482:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1476:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1476:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1490:18:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1492:14:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1501:1:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1504:1:8",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1497:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1497:9:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1492:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1472:3:8",
																"statements": []
															},
															"src": "1468:458:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1935:11:8",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "1943:3:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1935:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_struct$_crowdsaleMeta_$1408_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_crowdsaleMeta_$1408_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1130:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1141:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1152:4:8",
														"type": ""
													}
												],
												"src": "948:1004:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2131:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2148:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2159:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2141:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2141:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2141:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2182:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2193:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2178:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2178:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2198:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2171:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2171:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2171:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2221:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2232:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2217:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2217:18:8"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2237:34:8",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2210:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2210:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2210:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2292:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2303:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2288:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2288:18:8"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2308:8:8",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2281:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2281:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2281:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2326:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2338:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2349:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2334:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2334:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2326:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2108:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2122:4:8",
														"type": ""
													}
												],
												"src": "1957:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2538:182:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2555:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2566:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2548:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2548:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2548:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2589:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2600:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2585:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2585:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2605:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2578:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2578:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2578:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2628:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2639:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2624:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2624:18:8"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2644:34:8",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2617:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2617:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2617:62:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2688:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2700:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2711:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2696:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2696:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2688:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2515:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2529:4:8",
														"type": ""
													}
												],
												"src": "2364:356:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2895:218:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2905:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2917:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2928:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2913:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2913:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2905:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2947:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2958:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2940:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2940:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2940:25:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2974:29:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2992:3:8",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2997:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2988:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2988:11:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3001:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2984:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2984:19:8"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2978:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3023:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3034:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3019:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3019:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "3043:6:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3051:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3039:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3039:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3012:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3012:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3012:43:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3075:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3086:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3071:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3071:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "3095:6:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3103:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3091:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3091:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3064:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3064:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3064:43:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_address_t_contract$_ERC20_$698__to_t_uint256_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2848:9:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2859:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2867:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2875:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2886:4:8",
														"type": ""
													}
												],
												"src": "2725:388:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3165:185:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3204:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3225:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3232:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3237:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "3228:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3228:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3218:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3218:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3218:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3269:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3272:4:8",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3262:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3262:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3262:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3297:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3300:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3290:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3290:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3290:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3181:5:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3192:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "3188:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3188:6:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "3178:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3178:17:8"
															},
															"nodeType": "YulIf",
															"src": "3175:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3324:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3335:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3342:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3331:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3331:13:8"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "3324:3:8"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3147:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "3157:3:8",
														"type": ""
													}
												],
												"src": "3118:232:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3387:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3404:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3411:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3416:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3407:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3407:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3397:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3397:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3397:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3444:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3447:4:8",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3437:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3437:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3437:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3468:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3471:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3461:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3461:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3461:15:8"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "3355:127:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3519:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3536:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3543:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3548:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3539:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3539:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3529:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3529:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3529:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3576:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3579:4:8",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3569:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3569:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3569:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3600:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3603:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3593:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3593:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3593:15:8"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "3487:127:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3664:86:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3728:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3737:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3740:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3730:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3730:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3730:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3687:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3698:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "3713:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "3718:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "3709:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3709:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3722:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "3705:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3705:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "3694:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3694:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3684:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3684:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3677:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3677:50:8"
															},
															"nodeType": "YulIf",
															"src": "3674:2:8"
														}
													]
												},
												"name": "validator_revert_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3653:5:8",
														"type": ""
													}
												],
												"src": "3619:131:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256t_addresst_contract$_ERC20_$698(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_address(value_1)\n        value2 := value_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_array$_t_struct$_crowdsaleMeta_$1408_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_crowdsaleMeta_$1408_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _3 := mload(srcPtr)\n            let _4 := sub(shl(160, 1), 1)\n            mstore(pos, and(mload(_3), _4))\n            mstore(add(pos, _1), mload(add(_3, _1)))\n            mstore(add(pos, _2), and(mload(add(_3, _2)), _4))\n            let _5 := 0x60\n            mstore(add(pos, _5), and(mload(add(_3, _5)), _4))\n            pos := add(pos, 0x80)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_contract$_ERC20_$698__to_t_uint256_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780638da5cb5b14610066578063ee323eca14610086578063f0e24a4014610099578063f2fde38b146100ae575b600080fd5b6100646100c1565b005b6000546040516001600160a01b0390911681526020015b60405180910390f35b610064610094366004610439565b6100d5565b6100a16101db565b60405161007d919061047b565b6100646100bc366004610415565b6102e0565b6100c961035e565b6100d360006103b8565b565b60018054600091826100e6836104ed565b9091555060008181526002602081905260409182902080546001600160a01b038088166001600160a01b0319928316178355600183018a90559282018054938916939091169290921790915590519192509085908590859061014790610408565b9283526001600160a01b039182166020840152166040820152606001604051809103906000f08015801561017f573d6000803e3d6000fd5b506003820180546001600160a01b0319166001600160a01b039290921691821790556040519081527f87bf7513da32df063aa08a31dcfc40284567075208515fcb6d35bbdcc47447369060200160405180910390a15050505050565b606060015467ffffffffffffffff8111156101f8576101f861052c565b60405190808252806020026020018201604052801561024a57816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816102165790505b50905060005b6001548110156102dc57600081815260026020818152604092839020835160808101855281546001600160a01b03908116825260018301549382019390935292810154821693830193909352600390920154909116606082015282518390839081106102be576102be610516565b602002602001018190525080806102d4906104ed565b915050610250565b5090565b6102e861035e565b6001600160a01b0381166103525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61035b816103b8565b50565b6000546001600160a01b031633146100d35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610349565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104918061055883390190565b60006020828403121561042757600080fd5b813561043281610542565b9392505050565b60008060006060848603121561044e57600080fd5b83359250602084013561046081610542565b9150604084013561047081610542565b809150509250925092565b602080825282518282018190526000919060409081850190868401855b828110156104e057815180516001600160a01b039081168652878201518887015286820151811687870152606091820151169085015260809093019290850190600101610498565b5091979650505050505050565b600060001982141561050f57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461035b57600080fdfe608060405234801561001057600080fd5b5060405161049138038061049183398101604081905261002f91610099565b6000831161003c57600080fd5b6001600160a01b03821661004f57600080fd5b6001600160a01b03811661006257600080fd5b600292909255600180546001600160a01b039283166001600160a01b031991821617909155600080549290931691161790556100f4565b6000806000606084860312156100ae57600080fd5b8351925060208401516100c0816100dc565b60408501519092506100d1816100dc565b809150509250925092565b6001600160a01b03811681146100f157600080fd5b50565b61038e806101036000396000f3fe60806040526004361061004e5760003560e01c80632c4e722e146100675780634042b66f14610090578063521eb273146100a6578063ec8ac4d8146100de578063fc0c546a146100f15761005e565b3661005e5761005c33610111565b005b61005c33610111565b34801561007357600080fd5b5061007d60025481565b6040519081526020015b60405180910390f35b34801561009c57600080fd5b5061007d60035481565b3480156100b257600080fd5b506001546100c6906001600160a01b031681565b6040516001600160a01b039091168152602001610087565b61005c6100ec3660046102c0565b610111565b3480156100fd57600080fd5b506000546100c6906001600160a01b031681565b3461011c8282610197565b6000610127826101b8565b60035490915061013790836101d5565b60035561014483826101e8565b60408051838152602081018390526001600160a01b0385169133917f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18910160405180910390a36101926101f2565b505050565b6001600160a01b0382166101aa57600080fd5b806101b457600080fd5b5050565b60006101cf6002548361022e90919063ffffffff16565b92915050565b60006101e1828461030b565b9392505050565b6101b4828261023a565b6001546040516001600160a01b03909116903480156108fc02916000818181858888f1935050505015801561022b573d6000803e3d6000fd5b50565b60006101e18284610323565b60005460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561028857600080fd5b505af115801561029c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019291906102e9565b6000602082840312156102d257600080fd5b81356001600160a01b03811681146101e157600080fd5b6000602082840312156102fb57600080fd5b815180151581146101e157600080fd5b6000821982111561031e5761031e610342565b500190565b600081600019048311821515161561033d5761033d610342565b500290565b634e487b7160e01b600052601160045260246000fdfea264697066735822122074fabfe1782544237d2815280b75efb7ce1463d874ee8c6fdee433ce58bddadb64736f6c63430008060033a2646970667358221220be50c8a65caf871ae159ad970dce163a11af26e062a349f07d3d6a7653a11e7b64736f6c63430008060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0xEE323ECA EQ PUSH2 0x86 JUMPI DUP1 PUSH4 0xF0E24A40 EQ PUSH2 0x99 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xAE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0xC1 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x64 PUSH2 0x94 CALLDATASIZE PUSH1 0x4 PUSH2 0x439 JUMP JUMPDEST PUSH2 0xD5 JUMP JUMPDEST PUSH2 0xA1 PUSH2 0x1DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7D SWAP2 SWAP1 PUSH2 0x47B JUMP JUMPDEST PUSH2 0x64 PUSH2 0xBC CALLDATASIZE PUSH1 0x4 PUSH2 0x415 JUMP JUMPDEST PUSH2 0x2E0 JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x35E JUMP JUMPDEST PUSH2 0xD3 PUSH1 0x0 PUSH2 0x3B8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 PUSH2 0xE6 DUP4 PUSH2 0x4ED JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR DUP4 SSTORE PUSH1 0x1 DUP4 ADD DUP11 SWAP1 SSTORE SWAP3 DUP3 ADD DUP1 SLOAD SWAP4 DUP10 AND SWAP4 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP2 SWAP3 POP SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x147 SWAP1 PUSH2 0x408 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x17F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x87BF7513DA32DF063AA08A31DCFC40284567075208515FCB6D35BBDCC4744736 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F8 JUMPI PUSH2 0x1F8 PUSH2 0x52C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24A JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE SWAP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP3 MSTORE PUSH1 0x0 NOT SWAP1 SWAP3 ADD SWAP2 ADD DUP2 PUSH2 0x216 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0x2DC JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x80 DUP2 ADD DUP6 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 DUP2 ADD SLOAD DUP3 AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE DUP3 MLOAD DUP4 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x2BE JUMPI PUSH2 0x2BE PUSH2 0x516 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x2D4 SWAP1 PUSH2 0x4ED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x250 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2E8 PUSH2 0x35E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x352 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x35B DUP2 PUSH2 0x3B8 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x349 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x491 DUP1 PUSH2 0x558 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x427 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x432 DUP2 PUSH2 0x542 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x460 DUP2 PUSH2 0x542 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x470 DUP2 PUSH2 0x542 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4E0 JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP7 MSTORE DUP8 DUP3 ADD MLOAD DUP9 DUP8 ADD MSTORE DUP7 DUP3 ADD MLOAD DUP2 AND DUP8 DUP8 ADD MSTORE PUSH1 0x60 SWAP2 DUP3 ADD MLOAD AND SWAP1 DUP6 ADD MSTORE PUSH1 0x80 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x498 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x50F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x491 CODESIZE SUB DUP1 PUSH2 0x491 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x0 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH2 0xF4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0xC0 DUP2 PUSH2 0xDC JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0xD1 DUP2 PUSH2 0xDC JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x38E DUP1 PUSH2 0x103 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2C4E722E EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x4042B66F EQ PUSH2 0x90 JUMPI DUP1 PUSH4 0x521EB273 EQ PUSH2 0xA6 JUMPI DUP1 PUSH4 0xEC8AC4D8 EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0xF1 JUMPI PUSH2 0x5E JUMP JUMPDEST CALLDATASIZE PUSH2 0x5E JUMPI PUSH2 0x5C CALLER PUSH2 0x111 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5C CALLER PUSH2 0x111 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7D PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7D PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0xC6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x87 JUMP JUMPDEST PUSH2 0x5C PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x2C0 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0xC6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE PUSH2 0x11C DUP3 DUP3 PUSH2 0x197 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127 DUP3 PUSH2 0x1B8 JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 SWAP2 POP PUSH2 0x137 SWAP1 DUP4 PUSH2 0x1D5 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0x144 DUP4 DUP3 PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 CALLER SWAP2 PUSH32 0x623B3804FA71D67900D064613DA8F94B9617215EE90799290593E1745087AD18 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x192 PUSH2 0x1F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CF PUSH1 0x2 SLOAD DUP4 PUSH2 0x22E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E1 DUP3 DUP5 PUSH2 0x30B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1B4 DUP3 DUP3 PUSH2 0x23A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x22B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E1 DUP3 DUP5 PUSH2 0x323 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x29C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x192 SWAP2 SWAP1 PUSH2 0x2E9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x31E JUMPI PUSH2 0x31E PUSH2 0x342 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x33D JUMPI PUSH2 0x33D PUSH2 0x342 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH21 0xFABFE1782544237D2815280B75EFB7CE1463D874EE DUP13 PUSH16 0xDEE433CE58BDDADB64736F6C63430008 MOD STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE POP 0xC8 0xA6 0x5C 0xAF DUP8 BYTE 0xE1 MSIZE 0xAD SWAP8 0xD 0xCE AND GASPRICE GT 0xAF 0x26 0xE0 PUSH3 0xA349F0 PUSH30 0x3D6A7653A11E7B64736F6C63430008060033000000000000000000000000 ",
							"sourceMap": "141:1291:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1831:101:0;;;:::i;:::-;;1201:85;1247:7;1273:6;1201:85;;-1:-1:-1;;;;;1273:6:0;;;886:51:8;;874:2;859:18;1201:85:0;;;;;;;;589:517:7;;;;;;:::i;:::-;;:::i;1112:317::-;;;:::i;:::-;;;;;;;:::i;2081:198:0:-;;;;;;:::i;:::-;;:::i;1831:101::-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;589:517:7:-;696:14;:16;;677;;;696;;;:::i;:::-;;;;-1:-1:-1;722:38:7;763:30;;;:17;:30;;;;;;;;;803:31;;-1:-1:-1;;;;;803:31:7;;;-1:-1:-1;;;;;;803:31:7;;;;;;;844:21;;:29;;;883:32;;;:42;;;;;;;;;;;;;;;;984:37;;677:35;;-1:-1:-1;763:30:7;868:5;;918:7;;828:6;;984:37;;;:::i;:::-;2940:25:8;;;-1:-1:-1;;;;;3039:15:8;;;3034:2;3019:18;;3012:43;3091:15;3086:2;3071:18;;3064:43;2928:2;2913:18;984:37:7;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;935:38:7;;;:87;;-1:-1:-1;;;;;;935:87:7;-1:-1:-1;;;;;935:87:7;;;;;;;;;1037:61;;886:51:8;;;1037:61:7;;874:2:8;859:18;1037:61:7;;;;;;;667:439;;589:517;;;:::o;1112:317::-;1168:28;1271:14;;1251:35;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1251:35:7;;-1:-1:-1;;1251:35:7;;;;;;;;;;;;1243:43;;1310:13;1305:118;1335:14;;1328:5;:21;1305:118;;;1388:24;;;;:17;:24;;;;;;;;;1373:39;;;;;;;;;-1:-1:-1;;;;;1373:39:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:12;;:5;;1406;;1373:12;;;;;;:::i;:::-;;;;;;:39;;;;1351:7;;;;;:::i;:::-;;;;1305:118;;;;1112:317;:::o;2081:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;2159:2:8;2161:73:0::1;::::0;::::1;2141:21:8::0;2198:2;2178:18;;;2171:30;2237:34;2217:18;;;2210:62;-1:-1:-1;;;2288:18:8;;;2281:36;2334:19;;2161:73:0::1;;;;;;;;;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;1359:130::-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:4;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;2566:2:8;1414:68:0;;;2548:21:8;;;2585:18;;;2578:30;2644:34;2624:18;;;2617:62;2696:18;;1414:68:0;2538:182:8;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;-1:-1:-1:-;;;;;;;;:::o;14:247:8:-;73:6;126:2;114:9;105:7;101:23;97:32;94:2;;;142:1;139;132:12;94:2;181:9;168:23;200:31;225:5;200:31;:::i;:::-;250:5;84:177;-1:-1:-1;;;84:177:8:o;266:469::-;356:6;364;372;425:2;413:9;404:7;400:23;396:32;393:2;;;441:1;438;431:12;393:2;477:9;464:23;454:33;;537:2;526:9;522:18;509:32;550:31;575:5;550:31;:::i;:::-;600:5;-1:-1:-1;657:2:8;642:18;;629:32;670:33;629:32;670:33;:::i;:::-;722:7;712:17;;;383:352;;;;;:::o;948:1004::-;1181:2;1233:21;;;1303:13;;1206:18;;;1325:22;;;1152:4;;1181:2;1366;;1384:18;;;;1425:15;;;1152:4;1468:458;1482:6;1479:1;1476:13;1468:458;;;1541:13;;1625:9;;-1:-1:-1;;;;;1621:18:8;;;1609:31;;1680:11;;;1674:18;1660:12;;;1653:40;1737:11;;;1731:18;1727:27;;1713:12;;;1706:49;1778:4;1826:11;;;1820:18;1816:27;1802:12;;;1795:49;1873:4;1864:14;;;;1901:15;;;;1594:1;1497:9;1468:458;;;-1:-1:-1;1943:3:8;;1161:791;-1:-1:-1;;;;;;;1161:791:8:o;3118:232::-;3157:3;-1:-1:-1;;3178:17:8;;3175:2;;;3237:10;3232:3;3228:20;3225:1;3218:31;3272:4;3269:1;3262:15;3300:4;3297:1;3290:15;3175:2;-1:-1:-1;3342:1:8;3331:13;;3165:185::o;3355:127::-;3416:10;3411:3;3407:20;3404:1;3397:31;3447:4;3444:1;3437:15;3471:4;3468:1;3461:15;3487:127;3548:10;3543:3;3539:20;3536:1;3529:31;3579:4;3576:1;3569:15;3603:4;3600:1;3593:15;3619:131;-1:-1:-1;;;;;3694:31:8;;3684:42;;3674:2;;3740:1;3737;3730:12"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "518000",
								"executionCost": "26390",
								"totalCost": "544390"
							},
							"external": {
								"createCrowdSale(uint256,address,address)": "infinite",
								"getAllDeployedProjects()": "infinite",
								"owner()": "2290",
								"renounceOwnership()": "infinite",
								"transferOwnership(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 141,
									"end": 1432,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "8"
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2496,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "tag",
									"source": 7,
									"value": "8"
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 141,
									"end": 1432,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220be50c8a65caf871ae159ad970dce163a11af26e062a349f07d3d6a7653a11e7b64736f6c63430008060033",
									".code": [
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH",
											"source": 7,
											"value": "715018A6"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH",
											"source": 7,
											"value": "8DA5CB5B"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH",
											"source": 7,
											"value": "EE323ECA"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH",
											"source": 7,
											"value": "F0E24A40"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH",
											"source": 7,
											"value": "F2FDE38B"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 141,
											"end": 1432,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 886,
											"end": 937,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 886,
											"end": 937,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 874,
											"end": 876,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 859,
											"end": 877,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "tag",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "tag",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "tag",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 696,
											"end": 710,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 696,
											"end": 712,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 696,
											"end": 712,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 677,
											"end": 693,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 677,
											"end": 693,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 677,
											"end": 693,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 696,
											"end": 712,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 696,
											"end": 712,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 696,
											"end": 712,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 696,
											"end": 712,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 696,
											"end": 712,
											"name": "tag",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 696,
											"end": 712,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 696,
											"end": 712,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 696,
											"end": 712,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 696,
											"end": 712,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 722,
											"end": 760,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 763,
											"end": 793,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 763,
											"end": 793,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 763,
											"end": 793,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 763,
											"end": 780,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 763,
											"end": 793,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 763,
											"end": 793,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 763,
											"end": 793,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 763,
											"end": 793,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 763,
											"end": 793,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 763,
											"end": 793,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 763,
											"end": 793,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 763,
											"end": 793,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 763,
											"end": 793,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 803,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 803,
											"end": 834,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 803,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 803,
											"end": 834,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 803,
											"end": 834,
											"name": "AND",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 803,
											"end": 834,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 803,
											"end": 834,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 803,
											"end": 834,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 803,
											"end": 834,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 803,
											"end": 834,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 803,
											"end": 834,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 803,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 844,
											"end": 865,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 844,
											"end": 865,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 844,
											"end": 873,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 844,
											"end": 873,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 844,
											"end": 873,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 883,
											"end": 915,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 883,
											"end": 915,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 883,
											"end": 915,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "DUP10",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 883,
											"end": 925,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 677,
											"end": 712,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 677,
											"end": 712,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 763,
											"end": 793,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 868,
											"end": 873,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 868,
											"end": 873,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 918,
											"end": 925,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 918,
											"end": 925,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 828,
											"end": 834,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 828,
											"end": 834,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "tag",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2940,
											"end": 2965,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2940,
											"end": 2965,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2940,
											"end": 2965,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3039,
											"end": 3054,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3039,
											"end": 3054,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3039,
											"end": 3054,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3034,
											"end": 3036,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3019,
											"end": 3037,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3019,
											"end": 3037,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3012,
											"end": 3055,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3091,
											"end": 3106,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3086,
											"end": 3088,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3071,
											"end": 3089,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3071,
											"end": 3089,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3064,
											"end": 3107,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2928,
											"end": 2930,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 2913,
											"end": 2931,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "CREATE",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "tag",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 984,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 935,
											"end": 973,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 935,
											"end": 973,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 935,
											"end": 973,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 935,
											"end": 1022,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 935,
											"end": 1022,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 935,
											"end": 1022,
											"name": "AND",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 935,
											"end": 1022,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 935,
											"end": 1022,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 935,
											"end": 1022,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 935,
											"end": 1022,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 935,
											"end": 1022,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 935,
											"end": 1022,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 935,
											"end": 1022,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 935,
											"end": 1022,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 935,
											"end": 1022,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 1037,
											"end": 1098,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1037,
											"end": 1098,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 886,
											"end": 937,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 886,
											"end": 937,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 886,
											"end": 937,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1037,
											"end": 1098,
											"name": "PUSH",
											"source": 7,
											"value": "87BF7513DA32DF063AA08A31DCFC40284567075208515FCB6D35BBDCC4744736"
										},
										{
											"begin": 1037,
											"end": 1098,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 874,
											"end": 876,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 859,
											"end": 877,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1037,
											"end": 1098,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1037,
											"end": 1098,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1037,
											"end": 1098,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1037,
											"end": 1098,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1037,
											"end": 1098,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1037,
											"end": 1098,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1037,
											"end": 1098,
											"name": "LOG1",
											"source": 7
										},
										{
											"begin": 667,
											"end": 1106,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 667,
											"end": 1106,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 589,
											"end": 1106,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "tag",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1168,
											"end": 1196,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1271,
											"end": 1285,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1271,
											"end": 1285,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "tag",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "tag",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "tag",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1286,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1243,
											"end": 1286,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1243,
											"end": 1286,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1310,
											"end": 1323,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1305,
											"end": 1423,
											"name": "tag",
											"source": 7,
											"value": "50"
										},
										{
											"begin": 1305,
											"end": 1423,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1335,
											"end": 1349,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1335,
											"end": 1349,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1333,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1349,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 1305,
											"end": 1423,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1305,
											"end": 1423,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 1305,
											"end": 1423,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1388,
											"end": 1412,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1388,
											"end": 1412,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1388,
											"end": 1412,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1388,
											"end": 1412,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1388,
											"end": 1405,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 1388,
											"end": 1412,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1388,
											"end": 1412,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1388,
											"end": 1412,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1388,
											"end": 1412,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1388,
											"end": 1412,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1388,
											"end": 1412,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1388,
											"end": 1412,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1388,
											"end": 1412,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1388,
											"end": 1412,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1378,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1378,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1406,
											"end": 1411,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1406,
											"end": 1411,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "tag",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1412,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "tag",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1305,
											"end": 1423,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "50"
										},
										{
											"begin": 1305,
											"end": 1423,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1305,
											"end": 1423,
											"name": "tag",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 1305,
											"end": 1423,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1305,
											"end": 1423,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1112,
											"end": 1429,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2159,
											"end": 2161,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2162,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2198,
											"end": 2200,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 2178,
											"end": 2196,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2178,
											"end": 2196,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2178,
											"end": 2196,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2171,
											"end": 2201,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2271,
											"name": "PUSH",
											"source": 8,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 2217,
											"end": 2235,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 2217,
											"end": 2235,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2217,
											"end": 2235,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2210,
											"end": 2272,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2288,
											"end": 2306,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 2288,
											"end": 2306,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2288,
											"end": 2306,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2281,
											"end": 2317,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2334,
											"end": 2353,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 2334,
											"end": 2353,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2263,
											"end": 2271,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2568,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2548,
											"end": 2569,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2548,
											"end": 2569,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2548,
											"end": 2569,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2585,
											"end": 2603,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2585,
											"end": 2603,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2585,
											"end": 2603,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2578,
											"end": 2608,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2644,
											"end": 2678,
											"name": "PUSH",
											"source": 8,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 2624,
											"end": 2642,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 2624,
											"end": 2642,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2624,
											"end": 2642,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2617,
											"end": 2679,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2696,
											"end": 2714,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 2696,
											"end": 2714,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2538,
											"end": 2720,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2496,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "37"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH #[$]",
											"source": -1,
											"value": "0000000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [$]",
											"source": -1,
											"value": "0000000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 261,
											"name": "tag",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 14,
											"end": 261,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 94,
											"end": 96,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 94,
											"end": 96,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "75"
										},
										{
											"begin": 94,
											"end": 96,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 142,
											"end": 143,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 139,
											"end": 140,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 132,
											"end": 144,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 94,
											"end": 96,
											"name": "tag",
											"source": 8,
											"value": "75"
										},
										{
											"begin": 94,
											"end": 96,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 181,
											"end": 190,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 168,
											"end": 191,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 200,
											"end": 231,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 225,
											"end": 230,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 200,
											"end": 231,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "77"
										},
										{
											"begin": 200,
											"end": 231,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 200,
											"end": 231,
											"name": "tag",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 200,
											"end": 231,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 250,
											"end": 255,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 84,
											"end": 261,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 84,
											"end": 261,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 266,
											"end": 735,
											"name": "tag",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 266,
											"end": 735,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 356,
											"end": 362,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 364,
											"end": 370,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 372,
											"end": 378,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 425,
											"end": 427,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 413,
											"end": 422,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 404,
											"end": 411,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 400,
											"end": 423,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 396,
											"end": 428,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 393,
											"end": 395,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 393,
											"end": 395,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 393,
											"end": 395,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 441,
											"end": 442,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 438,
											"end": 439,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 431,
											"end": 443,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 393,
											"end": 395,
											"name": "tag",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 393,
											"end": 395,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 477,
											"end": 486,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 464,
											"end": 487,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 454,
											"end": 487,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 454,
											"end": 487,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 537,
											"end": 539,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 526,
											"end": 535,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 522,
											"end": 540,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 509,
											"end": 541,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 550,
											"end": 581,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 575,
											"end": 580,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 550,
											"end": 581,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "77"
										},
										{
											"begin": 550,
											"end": 581,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 550,
											"end": 581,
											"name": "tag",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 550,
											"end": 581,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 600,
											"end": 605,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 657,
											"end": 659,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 642,
											"end": 660,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 642,
											"end": 660,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 629,
											"end": 661,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 670,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 629,
											"end": 661,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 670,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "77"
										},
										{
											"begin": 670,
											"end": 703,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 670,
											"end": 703,
											"name": "tag",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 670,
											"end": 703,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 722,
											"end": 729,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 712,
											"end": 729,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 383,
											"end": 735,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 383,
											"end": 735,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 383,
											"end": 735,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 383,
											"end": 735,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 383,
											"end": 735,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 383,
											"end": 735,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 948,
											"end": 1952,
											"name": "tag",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 948,
											"end": 1952,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1181,
											"end": 1183,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1233,
											"end": 1254,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1233,
											"end": 1254,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1233,
											"end": 1254,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1303,
											"end": 1316,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1303,
											"end": 1316,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1206,
											"end": 1224,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1206,
											"end": 1224,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1206,
											"end": 1224,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1325,
											"end": 1347,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1325,
											"end": 1347,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1325,
											"end": 1347,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1152,
											"end": 1156,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1152,
											"end": 1156,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1181,
											"end": 1183,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1366,
											"end": 1368,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1366,
											"end": 1368,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1384,
											"end": 1402,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1384,
											"end": 1402,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1384,
											"end": 1402,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1384,
											"end": 1402,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1425,
											"end": 1440,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1425,
											"end": 1440,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1425,
											"end": 1440,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1152,
											"end": 1156,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1468,
											"end": 1926,
											"name": "tag",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 1468,
											"end": 1926,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1488,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1479,
											"end": 1480,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1476,
											"end": 1489,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1468,
											"end": 1926,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1468,
											"end": 1926,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "86"
										},
										{
											"begin": 1468,
											"end": 1926,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1541,
											"end": 1554,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1541,
											"end": 1554,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1625,
											"end": 1634,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1625,
											"end": 1634,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1621,
											"end": 1639,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1621,
											"end": 1639,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1621,
											"end": 1639,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1609,
											"end": 1640,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1609,
											"end": 1640,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1680,
											"end": 1691,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1680,
											"end": 1691,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1680,
											"end": 1691,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1674,
											"end": 1692,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1660,
											"end": 1672,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 1660,
											"end": 1672,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1660,
											"end": 1672,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1653,
											"end": 1693,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1737,
											"end": 1748,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1737,
											"end": 1748,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1737,
											"end": 1748,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1731,
											"end": 1749,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1727,
											"end": 1754,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1727,
											"end": 1754,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1713,
											"end": 1725,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1713,
											"end": 1725,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1713,
											"end": 1725,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1706,
											"end": 1755,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1778,
											"end": 1782,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 1826,
											"end": 1837,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1826,
											"end": 1837,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1826,
											"end": 1837,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1820,
											"end": 1838,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1816,
											"end": 1843,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1802,
											"end": 1814,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1802,
											"end": 1814,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1802,
											"end": 1814,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1795,
											"end": 1844,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1873,
											"end": 1877,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1901,
											"end": 1916,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1901,
											"end": 1916,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1901,
											"end": 1916,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1901,
											"end": 1916,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1594,
											"end": 1595,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1497,
											"end": 1506,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1468,
											"end": 1926,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 1468,
											"end": 1926,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1468,
											"end": 1926,
											"name": "tag",
											"source": 8,
											"value": "86"
										},
										{
											"begin": 1468,
											"end": 1926,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1943,
											"end": 1946,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1943,
											"end": 1946,
											"name": "SWAP8",
											"source": 8
										},
										{
											"begin": 1161,
											"end": 1952,
											"name": "SWAP7",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1161,
											"end": 1952,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3118,
											"end": 3350,
											"name": "tag",
											"source": 8,
											"value": "35"
										},
										{
											"begin": 3118,
											"end": 3350,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3157,
											"end": 3160,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3178,
											"end": 3195,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3178,
											"end": 3195,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3175,
											"end": 3177,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3175,
											"end": 3177,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 3175,
											"end": 3177,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3237,
											"end": 3247,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 3232,
											"end": 3235,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 3228,
											"end": 3248,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 3225,
											"end": 3226,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3218,
											"end": 3249,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3272,
											"end": 3276,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 3269,
											"end": 3270,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3262,
											"end": 3277,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3300,
											"end": 3304,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3297,
											"end": 3298,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3290,
											"end": 3305,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3175,
											"end": 3177,
											"name": "tag",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 3175,
											"end": 3177,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3342,
											"end": 3343,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 3331,
											"end": 3344,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3331,
											"end": 3344,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3165,
											"end": 3350,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3355,
											"end": 3482,
											"name": "tag",
											"source": 8,
											"value": "55"
										},
										{
											"begin": 3355,
											"end": 3482,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3416,
											"end": 3426,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 3411,
											"end": 3414,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 3407,
											"end": 3427,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 3404,
											"end": 3405,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3397,
											"end": 3428,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3447,
											"end": 3451,
											"name": "PUSH",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 3444,
											"end": 3445,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3437,
											"end": 3452,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3471,
											"end": 3475,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3468,
											"end": 3469,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3461,
											"end": 3476,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3487,
											"end": 3614,
											"name": "tag",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 3487,
											"end": 3614,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3548,
											"end": 3558,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 3543,
											"end": 3546,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 3539,
											"end": 3559,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 3536,
											"end": 3537,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3529,
											"end": 3560,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3579,
											"end": 3583,
											"name": "PUSH",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 3576,
											"end": 3577,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3569,
											"end": 3584,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3603,
											"end": 3607,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3600,
											"end": 3601,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3593,
											"end": 3608,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3619,
											"end": 3750,
											"name": "tag",
											"source": 8,
											"value": "77"
										},
										{
											"begin": 3619,
											"end": 3750,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3694,
											"end": 3725,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3694,
											"end": 3725,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3684,
											"end": 3726,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3684,
											"end": 3726,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3674,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "63"
										},
										{
											"begin": 3674,
											"end": 3676,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3740,
											"end": 3741,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3737,
											"end": 3738,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3730,
											"end": 3742,
											"name": "REVERT",
											"source": 8
										}
									],
									".data": {
										"0": {
											".code": [
												{
													"begin": 1086,
													"end": 5935,
													"name": "PUSH",
													"source": 6,
													"value": "80"
												},
												{
													"begin": 1086,
													"end": 5935,
													"name": "PUSH",
													"source": 6,
													"value": "40"
												},
												{
													"begin": 1086,
													"end": 5935,
													"name": "MSTORE",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "CALLVALUE",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "DUP1",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "ISZERO",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "PUSH [tag]",
													"source": 6,
													"value": "1"
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "JUMPI",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "PUSH",
													"source": 6,
													"value": "0"
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "DUP1",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "REVERT",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "tag",
													"source": 6,
													"value": "1"
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "JUMPDEST",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "POP",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "PUSH",
													"source": 6,
													"value": "40"
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "MLOAD",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "PUSHSIZE",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "CODESIZE",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "SUB",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "DUP1",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "PUSHSIZE",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "DUP4",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "CODECOPY",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "DUP2",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "ADD",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "PUSH",
													"source": 6,
													"value": "40"
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "DUP2",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "SWAP1",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "MSTORE",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "PUSH [tag]",
													"source": 6,
													"value": "2"
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "SWAP2",
													"source": 6
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "PUSH [tag]",
													"source": 6,
													"value": "3"
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "JUMP",
													"source": 6,
													"value": "[in]"
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "tag",
													"source": 6,
													"value": "2"
												},
												{
													"begin": 1932,
													"end": 2160,
													"name": "JUMPDEST",
													"source": 6
												},
												{
													"begin": 2012,
													"end": 2013,
													"name": "PUSH",
													"source": 6,
													"value": "0"
												},
												{
													"begin": 2004,
													"end": 2009,
													"name": "DUP4",
													"source": 6
												},
												{
													"begin": 2004,
													"end": 2013,
													"name": "GT",
													"source": 6
												},
												{
													"begin": 1996,
													"end": 2014,
													"name": "PUSH [tag]",
													"source": 6,
													"value": "6"
												},
												{
													"begin": 1996,
													"end": 2014,
													"name": "JUMPI",
													"source": 6
												},
												{
													"begin": 1996,
													"end": 2014,
													"name": "PUSH",
													"source": 6,
													"value": "0"
												},
												{
													"begin": 1996,
													"end": 2014,
													"name": "DUP1",
													"source": 6
												},
												{
													"begin": 1996,
													"end": 2014,
													"name": "REVERT",
													"source": 6
												},
												{
													"begin": 1996,
													"end": 2014,
													"name": "tag",
													"source": 6,
													"value": "6"
												},
												{
													"begin": 1996,
													"end": 2014,
													"name": "JUMPDEST",
													"source": 6
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "1"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "1"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "A0"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "SHL",
													"source": -1
												},
												{
													"begin": -1,
													"end": -1,
													"name": "SUB",
													"source": -1
												},
												{
													"begin": 2028,
													"end": 2049,
													"name": "DUP3",
													"source": 6
												},
												{
													"begin": 2028,
													"end": 2049,
													"name": "AND",
													"source": 6
												},
												{
													"begin": 2020,
													"end": 2050,
													"name": "PUSH [tag]",
													"source": 6,
													"value": "7"
												},
												{
													"begin": 2020,
													"end": 2050,
													"name": "JUMPI",
													"source": 6
												},
												{
													"begin": 2020,
													"end": 2050,
													"name": "PUSH",
													"source": 6,
													"value": "0"
												},
												{
													"begin": 2020,
													"end": 2050,
													"name": "DUP1",
													"source": 6
												},
												{
													"begin": 2020,
													"end": 2050,
													"name": "REVERT",
													"source": 6
												},
												{
													"begin": 2020,
													"end": 2050,
													"name": "tag",
													"source": 6,
													"value": "7"
												},
												{
													"begin": 2020,
													"end": 2050,
													"name": "JUMPDEST",
													"source": 6
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "1"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "1"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "A0"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "SHL",
													"source": -1
												},
												{
													"begin": -1,
													"end": -1,
													"name": "SUB",
													"source": -1
												},
												{
													"begin": 2064,
													"end": 2093,
													"name": "DUP2",
													"source": 6
												},
												{
													"begin": 2064,
													"end": 2093,
													"name": "AND",
													"source": 6
												},
												{
													"begin": 2056,
													"end": 2094,
													"name": "PUSH [tag]",
													"source": 6,
													"value": "8"
												},
												{
													"begin": 2056,
													"end": 2094,
													"name": "JUMPI",
													"source": 6
												},
												{
													"begin": 2056,
													"end": 2094,
													"name": "PUSH",
													"source": 6,
													"value": "0"
												},
												{
													"begin": 2056,
													"end": 2094,
													"name": "DUP1",
													"source": 6
												},
												{
													"begin": 2056,
													"end": 2094,
													"name": "REVERT",
													"source": 6
												},
												{
													"begin": 2056,
													"end": 2094,
													"name": "tag",
													"source": 6,
													"value": "8"
												},
												{
													"begin": 2056,
													"end": 2094,
													"name": "JUMPDEST",
													"source": 6
												},
												{
													"begin": 2101,
													"end": 2105,
													"name": "PUSH",
													"source": 6,
													"value": "2"
												},
												{
													"begin": 2101,
													"end": 2113,
													"name": "SWAP3",
													"source": 6
												},
												{
													"begin": 2101,
													"end": 2113,
													"name": "SWAP1",
													"source": 6
												},
												{
													"begin": 2101,
													"end": 2113,
													"name": "SWAP3",
													"source": 6
												},
												{
													"begin": 2101,
													"end": 2113,
													"name": "SSTORE",
													"source": 6
												},
												{
													"begin": 2119,
													"end": 2125,
													"name": "PUSH",
													"source": 6,
													"value": "1"
												},
												{
													"begin": 2119,
													"end": 2135,
													"name": "DUP1",
													"source": 6
												},
												{
													"begin": 2119,
													"end": 2135,
													"name": "SLOAD",
													"source": 6
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "1"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "1"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "A0"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "SHL",
													"source": -1
												},
												{
													"begin": -1,
													"end": -1,
													"name": "SUB",
													"source": -1
												},
												{
													"begin": 2119,
													"end": 2135,
													"name": "SWAP3",
													"source": 6
												},
												{
													"begin": 2119,
													"end": 2135,
													"name": "DUP4",
													"source": 6
												},
												{
													"begin": 2119,
													"end": 2135,
													"name": "AND",
													"source": 6
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "1"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "1"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "A0"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "SHL",
													"source": -1
												},
												{
													"begin": -1,
													"end": -1,
													"name": "SUB",
													"source": -1
												},
												{
													"begin": -1,
													"end": -1,
													"name": "NOT",
													"source": -1
												},
												{
													"begin": 2119,
													"end": 2135,
													"name": "SWAP2",
													"source": 6
												},
												{
													"begin": 2119,
													"end": 2135,
													"name": "DUP3",
													"source": 6
												},
												{
													"begin": 2119,
													"end": 2135,
													"name": "AND",
													"source": 6
												},
												{
													"begin": 2119,
													"end": 2135,
													"name": "OR",
													"source": 6
												},
												{
													"begin": 2119,
													"end": 2135,
													"name": "SWAP1",
													"source": 6
												},
												{
													"begin": 2119,
													"end": 2135,
													"name": "SWAP2",
													"source": 6
												},
												{
													"begin": 2119,
													"end": 2135,
													"name": "SSTORE",
													"source": 6
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "0"
												},
												{
													"begin": 2141,
													"end": 2155,
													"name": "DUP1",
													"source": 6
												},
												{
													"begin": 2141,
													"end": 2155,
													"name": "SLOAD",
													"source": 6
												},
												{
													"begin": 2141,
													"end": 2155,
													"name": "SWAP3",
													"source": 6
												},
												{
													"begin": 2141,
													"end": 2155,
													"name": "SWAP1",
													"source": 6
												},
												{
													"begin": 2141,
													"end": 2155,
													"name": "SWAP4",
													"source": 6
												},
												{
													"begin": 2141,
													"end": 2155,
													"name": "AND",
													"source": 6
												},
												{
													"begin": 2141,
													"end": 2155,
													"name": "SWAP2",
													"source": 6
												},
												{
													"begin": 2141,
													"end": 2155,
													"name": "AND",
													"source": 6
												},
												{
													"begin": 2141,
													"end": 2155,
													"name": "OR",
													"source": 6
												},
												{
													"begin": 2141,
													"end": 2155,
													"name": "SWAP1",
													"source": 6
												},
												{
													"begin": 2141,
													"end": 2155,
													"name": "SSTORE",
													"source": 6
												},
												{
													"begin": 1086,
													"end": 5935,
													"name": "PUSH [tag]",
													"source": 6,
													"value": "10"
												},
												{
													"begin": 1086,
													"end": 5935,
													"name": "JUMP",
													"source": 6
												},
												{
													"begin": 14,
													"end": 473,
													"name": "tag",
													"source": 8,
													"value": "3"
												},
												{
													"begin": 14,
													"end": 473,
													"name": "JUMPDEST",
													"source": 8
												},
												{
													"begin": 115,
													"end": 121,
													"name": "PUSH",
													"source": 8,
													"value": "0"
												},
												{
													"begin": 123,
													"end": 129,
													"name": "DUP1",
													"source": 8
												},
												{
													"begin": 131,
													"end": 137,
													"name": "PUSH",
													"source": 8,
													"value": "0"
												},
												{
													"begin": 184,
													"end": 186,
													"name": "PUSH",
													"source": 8,
													"value": "60"
												},
												{
													"begin": 172,
													"end": 181,
													"name": "DUP5",
													"source": 8
												},
												{
													"begin": 163,
													"end": 170,
													"name": "DUP7",
													"source": 8
												},
												{
													"begin": 159,
													"end": 182,
													"name": "SUB",
													"source": 8
												},
												{
													"begin": 155,
													"end": 187,
													"name": "SLT",
													"source": 8
												},
												{
													"begin": 152,
													"end": 154,
													"name": "ISZERO",
													"source": 8
												},
												{
													"begin": 152,
													"end": 154,
													"name": "PUSH [tag]",
													"source": 8,
													"value": "12"
												},
												{
													"begin": 152,
													"end": 154,
													"name": "JUMPI",
													"source": 8
												},
												{
													"begin": 200,
													"end": 201,
													"name": "PUSH",
													"source": 8,
													"value": "0"
												},
												{
													"begin": 197,
													"end": 198,
													"name": "DUP1",
													"source": 8
												},
												{
													"begin": 190,
													"end": 202,
													"name": "REVERT",
													"source": 8
												},
												{
													"begin": 152,
													"end": 154,
													"name": "tag",
													"source": 8,
													"value": "12"
												},
												{
													"begin": 152,
													"end": 154,
													"name": "JUMPDEST",
													"source": 8
												},
												{
													"begin": 229,
													"end": 238,
													"name": "DUP4",
													"source": 8
												},
												{
													"begin": 223,
													"end": 239,
													"name": "MLOAD",
													"source": 8
												},
												{
													"begin": 213,
													"end": 239,
													"name": "SWAP3",
													"source": 8
												},
												{
													"begin": 213,
													"end": 239,
													"name": "POP",
													"source": 8
												},
												{
													"begin": 282,
													"end": 284,
													"name": "PUSH",
													"source": 8,
													"value": "20"
												},
												{
													"begin": 271,
													"end": 280,
													"name": "DUP5",
													"source": 8
												},
												{
													"begin": 267,
													"end": 285,
													"name": "ADD",
													"source": 8
												},
												{
													"begin": 261,
													"end": 286,
													"name": "MLOAD",
													"source": 8
												},
												{
													"begin": 295,
													"end": 326,
													"name": "PUSH [tag]",
													"source": 8,
													"value": "13"
												},
												{
													"begin": 320,
													"end": 325,
													"name": "DUP2",
													"source": 8
												},
												{
													"begin": 295,
													"end": 326,
													"name": "PUSH [tag]",
													"source": 8,
													"value": "14"
												},
												{
													"begin": 295,
													"end": 326,
													"name": "JUMP",
													"source": 8,
													"value": "[in]"
												},
												{
													"begin": 295,
													"end": 326,
													"name": "tag",
													"source": 8,
													"value": "13"
												},
												{
													"begin": 295,
													"end": 326,
													"name": "JUMPDEST",
													"source": 8
												},
												{
													"begin": 395,
													"end": 397,
													"name": "PUSH",
													"source": 8,
													"value": "40"
												},
												{
													"begin": 380,
													"end": 398,
													"name": "DUP6",
													"source": 8
												},
												{
													"begin": 380,
													"end": 398,
													"name": "ADD",
													"source": 8
												},
												{
													"begin": 374,
													"end": 399,
													"name": "MLOAD",
													"source": 8
												},
												{
													"begin": 345,
													"end": 350,
													"name": "SWAP1",
													"source": 8
												},
												{
													"begin": 345,
													"end": 350,
													"name": "SWAP3",
													"source": 8
												},
												{
													"begin": -1,
													"end": -1,
													"name": "POP",
													"source": -1
												},
												{
													"begin": 408,
													"end": 441,
													"name": "PUSH [tag]",
													"source": 8,
													"value": "15"
												},
												{
													"begin": 374,
													"end": 399,
													"name": "DUP2",
													"source": 8
												},
												{
													"begin": 408,
													"end": 441,
													"name": "PUSH [tag]",
													"source": 8,
													"value": "14"
												},
												{
													"begin": 408,
													"end": 441,
													"name": "JUMP",
													"source": 8,
													"value": "[in]"
												},
												{
													"begin": 408,
													"end": 441,
													"name": "tag",
													"source": 8,
													"value": "15"
												},
												{
													"begin": 408,
													"end": 441,
													"name": "JUMPDEST",
													"source": 8
												},
												{
													"begin": 460,
													"end": 467,
													"name": "DUP1",
													"source": 8
												},
												{
													"begin": 450,
													"end": 467,
													"name": "SWAP2",
													"source": 8
												},
												{
													"begin": 450,
													"end": 467,
													"name": "POP",
													"source": 8
												},
												{
													"begin": 450,
													"end": 467,
													"name": "POP",
													"source": 8
												},
												{
													"begin": 142,
													"end": 473,
													"name": "SWAP3",
													"source": 8
												},
												{
													"begin": 142,
													"end": 473,
													"name": "POP",
													"source": 8
												},
												{
													"begin": 142,
													"end": 473,
													"name": "SWAP3",
													"source": 8
												},
												{
													"begin": 142,
													"end": 473,
													"name": "POP",
													"source": 8
												},
												{
													"begin": 142,
													"end": 473,
													"name": "SWAP3",
													"source": 8
												},
												{
													"begin": 142,
													"end": 473,
													"name": "JUMP",
													"source": 8,
													"value": "[out]"
												},
												{
													"begin": 478,
													"end": 609,
													"name": "tag",
													"source": 8,
													"value": "14"
												},
												{
													"begin": 478,
													"end": 609,
													"name": "JUMPDEST",
													"source": 8
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "1"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "1"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "PUSH",
													"source": -1,
													"value": "A0"
												},
												{
													"begin": -1,
													"end": -1,
													"name": "SHL",
													"source": -1
												},
												{
													"begin": -1,
													"end": -1,
													"name": "SUB",
													"source": -1
												},
												{
													"begin": 553,
													"end": 584,
													"name": "DUP2",
													"source": 8
												},
												{
													"begin": 553,
													"end": 584,
													"name": "AND",
													"source": 8
												},
												{
													"begin": 543,
													"end": 585,
													"name": "DUP2",
													"source": 8
												},
												{
													"begin": 543,
													"end": 585,
													"name": "EQ",
													"source": 8
												},
												{
													"begin": 533,
													"end": 535,
													"name": "PUSH [tag]",
													"source": 8,
													"value": "17"
												},
												{
													"begin": 533,
													"end": 535,
													"name": "JUMPI",
													"source": 8
												},
												{
													"begin": 599,
													"end": 600,
													"name": "PUSH",
													"source": 8,
													"value": "0"
												},
												{
													"begin": 596,
													"end": 597,
													"name": "DUP1",
													"source": 8
												},
												{
													"begin": 589,
													"end": 601,
													"name": "REVERT",
													"source": 8
												},
												{
													"begin": 533,
													"end": 535,
													"name": "tag",
													"source": 8,
													"value": "17"
												},
												{
													"begin": 533,
													"end": 535,
													"name": "JUMPDEST",
													"source": 8
												},
												{
													"begin": 523,
													"end": 609,
													"name": "POP",
													"source": 8
												},
												{
													"begin": 523,
													"end": 609,
													"name": "JUMP",
													"source": 8,
													"value": "[out]"
												},
												{
													"begin": 523,
													"end": 609,
													"name": "tag",
													"source": 8,
													"value": "10"
												},
												{
													"begin": 523,
													"end": 609,
													"name": "JUMPDEST",
													"source": 8
												},
												{
													"begin": 1086,
													"end": 5935,
													"name": "PUSH #[$]",
													"source": 6,
													"value": "0000000000000000000000000000000000000000000000000000000000000000"
												},
												{
													"begin": 1086,
													"end": 5935,
													"name": "DUP1",
													"source": 6
												},
												{
													"begin": 1086,
													"end": 5935,
													"name": "PUSH [$]",
													"source": 6,
													"value": "0000000000000000000000000000000000000000000000000000000000000000"
												},
												{
													"begin": 1086,
													"end": 5935,
													"name": "PUSH",
													"source": 6,
													"value": "0"
												},
												{
													"begin": 1086,
													"end": 5935,
													"name": "CODECOPY",
													"source": 6
												},
												{
													"begin": 1086,
													"end": 5935,
													"name": "PUSH",
													"source": 6,
													"value": "0"
												},
												{
													"begin": 1086,
													"end": 5935,
													"name": "RETURN",
													"source": 6
												}
											],
											".data": {
												"0": {
													".auxdata": "a264697066735822122074fabfe1782544237d2815280b75efb7ce1463d874ee8c6fdee433ce58bddadb64736f6c63430008060033",
													".code": [
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH",
															"source": 6,
															"value": "80"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH",
															"source": 6,
															"value": "40"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "MSTORE",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH",
															"source": 6,
															"value": "4"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "CALLDATASIZE",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "LT",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "1"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "CALLDATALOAD",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH",
															"source": 6,
															"value": "E0"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "SHR",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH",
															"source": 6,
															"value": "2C4E722E"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "EQ",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "3"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH",
															"source": 6,
															"value": "4042B66F"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "EQ",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "4"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH",
															"source": 6,
															"value": "521EB273"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "EQ",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "5"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH",
															"source": 6,
															"value": "EC8AC4D8"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "EQ",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "6"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH",
															"source": 6,
															"value": "FC0C546A"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "EQ",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "7"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "2"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "JUMP",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "tag",
															"source": 6,
															"value": "1"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "CALLDATASIZE",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "2"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 2456,
															"end": 2477,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "10"
														},
														{
															"begin": 2466,
															"end": 2476,
															"name": "CALLER",
															"source": 6
														},
														{
															"begin": 2456,
															"end": 2465,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "11"
														},
														{
															"begin": 2456,
															"end": 2477,
															"name": "JUMP",
															"source": 6,
															"value": "[in]"
														},
														{
															"begin": 2456,
															"end": 2477,
															"name": "tag",
															"source": 6,
															"value": "10"
														},
														{
															"begin": 2456,
															"end": 2477,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "STOP",
															"source": 6
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "tag",
															"source": 6,
															"value": "2"
														},
														{
															"begin": 1086,
															"end": 5935,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 2390,
															"end": 2411,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "10"
														},
														{
															"begin": 2400,
															"end": 2410,
															"name": "CALLER",
															"source": 6
														},
														{
															"begin": 2390,
															"end": 2399,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "11"
														},
														{
															"begin": 2390,
															"end": 2411,
															"name": "JUMP",
															"source": 6,
															"value": "[in]"
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "tag",
															"source": 6,
															"value": "3"
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "CALLVALUE",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "ISZERO",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "15"
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "REVERT",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "tag",
															"source": 6,
															"value": "15"
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "16"
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "PUSH",
															"source": 6,
															"value": "2"
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "SLOAD",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "DUP2",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "JUMP",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "tag",
															"source": 6,
															"value": "16"
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "PUSH",
															"source": 6,
															"value": "40"
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "MLOAD",
															"source": 6
														},
														{
															"begin": 1441,
															"end": 1466,
															"name": "SWAP1",
															"source": 8
														},
														{
															"begin": 1441,
															"end": 1466,
															"name": "DUP2",
															"source": 8
														},
														{
															"begin": 1441,
															"end": 1466,
															"name": "MSTORE",
															"source": 8
														},
														{
															"begin": 1429,
															"end": 1431,
															"name": "PUSH",
															"source": 8,
															"value": "20"
														},
														{
															"begin": 1414,
															"end": 1432,
															"name": "ADD",
															"source": 8
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "tag",
															"source": 6,
															"value": "18"
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "PUSH",
															"source": 6,
															"value": "40"
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "MLOAD",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "SWAP2",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "SUB",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 1301,
															"end": 1320,
															"name": "RETURN",
															"source": 6
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "tag",
															"source": 6,
															"value": "4"
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "CALLVALUE",
															"source": 6
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "ISZERO",
															"source": 6
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "20"
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "REVERT",
															"source": 6
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "tag",
															"source": 6,
															"value": "20"
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "16"
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "PUSH",
															"source": 6,
															"value": "3"
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "SLOAD",
															"source": 6
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "DUP2",
															"source": 6
														},
														{
															"begin": 1351,
															"end": 1375,
															"name": "JUMP",
															"source": 6
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "tag",
															"source": 6,
															"value": "5"
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "CALLVALUE",
															"source": 6
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "ISZERO",
															"source": 6
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "24"
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "REVERT",
															"source": 6
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "tag",
															"source": 6,
															"value": "24"
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": -1,
															"end": -1,
															"name": "POP",
															"source": -1
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "PUSH",
															"source": 6,
															"value": "1"
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "SLOAD",
															"source": 6
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "25"
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "A0"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SHL",
															"source": -1
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SUB",
															"source": -1
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "AND",
															"source": 6
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "DUP2",
															"source": 6
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "JUMP",
															"source": 6
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "tag",
															"source": 6,
															"value": "25"
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "PUSH",
															"source": 6,
															"value": "40"
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "MLOAD",
															"source": 6
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "A0"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SHL",
															"source": -1
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SUB",
															"source": -1
														},
														{
															"begin": 751,
															"end": 783,
															"name": "SWAP2",
															"source": 8
														},
														{
															"begin": 751,
															"end": 783,
															"name": "SWAP1",
															"source": 8
														},
														{
															"begin": 751,
															"end": 783,
															"name": "SWAP2",
															"source": 8
														},
														{
															"begin": 751,
															"end": 783,
															"name": "AND",
															"source": 8
														},
														{
															"begin": 733,
															"end": 784,
															"name": "DUP2",
															"source": 8
														},
														{
															"begin": 733,
															"end": 784,
															"name": "MSTORE",
															"source": 8
														},
														{
															"begin": 721,
															"end": 723,
															"name": "PUSH",
															"source": 8,
															"value": "20"
														},
														{
															"begin": 706,
															"end": 724,
															"name": "ADD",
															"source": 8
														},
														{
															"begin": 1228,
															"end": 1249,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "18"
														},
														{
															"begin": 688,
															"end": 790,
															"name": "JUMP",
															"source": 8
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "tag",
															"source": 6,
															"value": "6"
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "10"
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "30"
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "CALLDATASIZE",
															"source": 6
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "PUSH",
															"source": 6,
															"value": "4"
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "31"
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "JUMP",
															"source": 6,
															"value": "[in]"
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "tag",
															"source": 6,
															"value": "30"
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "11"
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "JUMP",
															"source": 6,
															"value": "[in]"
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "tag",
															"source": 6,
															"value": "7"
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "CALLVALUE",
															"source": 6
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "ISZERO",
															"source": 6
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "32"
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "REVERT",
															"source": 6
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "tag",
															"source": 6,
															"value": "32"
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": -1,
															"end": -1,
															"name": "POP",
															"source": -1
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "SLOAD",
															"source": 6
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "25"
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "A0"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SHL",
															"source": -1
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SUB",
															"source": -1
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "AND",
															"source": 6
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "DUP2",
															"source": 6
														},
														{
															"begin": 1166,
															"end": 1184,
															"name": "JUMP",
															"source": 6
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "tag",
															"source": 6,
															"value": "11"
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 2701,
															"end": 2710,
															"name": "CALLVALUE",
															"source": 6
														},
														{
															"begin": 2716,
															"end": 2761,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "38"
														},
														{
															"begin": 2737,
															"end": 2749,
															"name": "DUP3",
															"source": 6
														},
														{
															"begin": 2701,
															"end": 2710,
															"name": "DUP3",
															"source": 6
														},
														{
															"begin": 2716,
															"end": 2736,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "39"
														},
														{
															"begin": 2716,
															"end": 2761,
															"name": "JUMP",
															"source": 6,
															"value": "[in]"
														},
														{
															"begin": 2716,
															"end": 2761,
															"name": "tag",
															"source": 6,
															"value": "38"
														},
														{
															"begin": 2716,
															"end": 2761,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 2812,
															"end": 2826,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 2829,
															"end": 2855,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "40"
														},
														{
															"begin": 2845,
															"end": 2854,
															"name": "DUP3",
															"source": 6
														},
														{
															"begin": 2829,
															"end": 2844,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "41"
														},
														{
															"begin": 2829,
															"end": 2855,
															"name": "JUMP",
															"source": 6,
															"value": "[in]"
														},
														{
															"begin": 2829,
															"end": 2855,
															"name": "tag",
															"source": 6,
															"value": "40"
														},
														{
															"begin": 2829,
															"end": 2855,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 2894,
															"end": 2903,
															"name": "PUSH",
															"source": 6,
															"value": "3"
														},
														{
															"begin": 2894,
															"end": 2903,
															"name": "SLOAD",
															"source": 6
														},
														{
															"begin": 2812,
															"end": 2855,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 2812,
															"end": 2855,
															"name": "SWAP2",
															"source": 6
														},
														{
															"begin": -1,
															"end": -1,
															"name": "POP",
															"source": -1
														},
														{
															"begin": 2894,
															"end": 2918,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "42"
														},
														{
															"begin": 2894,
															"end": 2918,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 2908,
															"end": 2917,
															"name": "DUP4",
															"source": 6
														},
														{
															"begin": 2894,
															"end": 2907,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "43"
														},
														{
															"begin": 2894,
															"end": 2918,
															"name": "JUMP",
															"source": 6,
															"value": "[in]"
														},
														{
															"begin": 2894,
															"end": 2918,
															"name": "tag",
															"source": 6,
															"value": "42"
														},
														{
															"begin": 2894,
															"end": 2918,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 2882,
															"end": 2891,
															"name": "PUSH",
															"source": 6,
															"value": "3"
														},
														{
															"begin": 2882,
															"end": 2918,
															"name": "SSTORE",
															"source": 6
														},
														{
															"begin": 2925,
															"end": 2963,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "44"
														},
														{
															"begin": 2942,
															"end": 2954,
															"name": "DUP4",
															"source": 6
														},
														{
															"begin": 2956,
															"end": 2962,
															"name": "DUP3",
															"source": 6
														},
														{
															"begin": 2925,
															"end": 2941,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "45"
														},
														{
															"begin": 2925,
															"end": 2963,
															"name": "JUMP",
															"source": 6,
															"value": "[in]"
														},
														{
															"begin": 2925,
															"end": 2963,
															"name": "tag",
															"source": 6,
															"value": "44"
														},
														{
															"begin": 2925,
															"end": 2963,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "PUSH",
															"source": 6,
															"value": "40"
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "MLOAD",
															"source": 6
														},
														{
															"begin": 1651,
															"end": 1676,
															"name": "DUP4",
															"source": 8
														},
														{
															"begin": 1651,
															"end": 1676,
															"name": "DUP2",
															"source": 8
														},
														{
															"begin": 1651,
															"end": 1676,
															"name": "MSTORE",
															"source": 8
														},
														{
															"begin": 1707,
															"end": 1709,
															"name": "PUSH",
															"source": 8,
															"value": "20"
														},
														{
															"begin": 1692,
															"end": 1710,
															"name": "DUP2",
															"source": 8
														},
														{
															"begin": 1692,
															"end": 1710,
															"name": "ADD",
															"source": 8
														},
														{
															"begin": 1685,
															"end": 1719,
															"name": "DUP4",
															"source": 8
														},
														{
															"begin": 1685,
															"end": 1719,
															"name": "SWAP1",
															"source": 8
														},
														{
															"begin": 1685,
															"end": 1719,
															"name": "MSTORE",
															"source": 8
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "DUP2",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "MLOAD",
															"source": 6
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "A0"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SHL",
															"source": -1
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SUB",
															"source": -1
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "DUP7",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "AND",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "SWAP3",
															"source": 6
														},
														{
															"begin": 2995,
															"end": 3005,
															"name": "CALLER",
															"source": 6
														},
														{
															"begin": 2995,
															"end": 3005,
															"name": "SWAP3",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "PUSH",
															"source": 6,
															"value": "623B3804FA71D67900D064613DA8F94B9617215EE90799290593E1745087AD18"
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "SWAP3",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "DUP2",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "SUB",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "SWAP2",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "ADD",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 2974,
															"end": 3062,
															"name": "LOG3",
															"source": 6
														},
														{
															"begin": 3123,
															"end": 3138,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "50"
														},
														{
															"begin": 3123,
															"end": 3136,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "51"
														},
														{
															"begin": 3123,
															"end": 3138,
															"name": "JUMP",
															"source": 6,
															"value": "[in]"
														},
														{
															"begin": 3123,
															"end": 3138,
															"name": "tag",
															"source": 6,
															"value": "50"
														},
														{
															"begin": 3123,
															"end": 3138,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 2674,
															"end": 3195,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 2674,
															"end": 3195,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 2618,
															"end": 3195,
															"name": "JUMP",
															"source": 6,
															"value": "[out]"
														},
														{
															"begin": 3619,
															"end": 3803,
															"name": "tag",
															"source": 6,
															"value": "39"
														},
														{
															"begin": 3619,
															"end": 3803,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "A0"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SHL",
															"source": -1
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SUB",
															"source": -1
														},
														{
															"begin": 3741,
															"end": 3767,
															"name": "DUP3",
															"source": 6
														},
														{
															"begin": 3741,
															"end": 3767,
															"name": "AND",
															"source": 6
														},
														{
															"begin": 3733,
															"end": 3768,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "55"
														},
														{
															"begin": 3733,
															"end": 3768,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 3733,
															"end": 3768,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 3733,
															"end": 3768,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 3733,
															"end": 3768,
															"name": "REVERT",
															"source": 6
														},
														{
															"begin": 3733,
															"end": 3768,
															"name": "tag",
															"source": 6,
															"value": "55"
														},
														{
															"begin": 3733,
															"end": 3768,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 3782,
															"end": 3797,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 3774,
															"end": 3798,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "56"
														},
														{
															"begin": 3774,
															"end": 3798,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 3774,
															"end": 3798,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 3774,
															"end": 3798,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 3774,
															"end": 3798,
															"name": "REVERT",
															"source": 6
														},
														{
															"begin": 3774,
															"end": 3798,
															"name": "tag",
															"source": 6,
															"value": "56"
														},
														{
															"begin": 3774,
															"end": 3798,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 3619,
															"end": 3803,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 3619,
															"end": 3803,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 3619,
															"end": 3803,
															"name": "JUMP",
															"source": 6,
															"value": "[out]"
														},
														{
															"begin": 5653,
															"end": 5774,
															"name": "tag",
															"source": 6,
															"value": "41"
														},
														{
															"begin": 5653,
															"end": 5774,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 5725,
															"end": 5732,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 5749,
															"end": 5769,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "58"
														},
														{
															"begin": 5764,
															"end": 5768,
															"name": "PUSH",
															"source": 6,
															"value": "2"
														},
														{
															"begin": 5764,
															"end": 5768,
															"name": "SLOAD",
															"source": 6
														},
														{
															"begin": 5749,
															"end": 5759,
															"name": "DUP4",
															"source": 6
														},
														{
															"begin": 5749,
															"end": 5763,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "59"
														},
														{
															"begin": 5749,
															"end": 5763,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 5749,
															"end": 5769,
															"name": "SWAP2",
															"source": 6
														},
														{
															"begin": 5749,
															"end": 5769,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 5749,
															"end": 5769,
															"name": "PUSH",
															"source": 6,
															"value": "FFFFFFFF"
														},
														{
															"begin": 5749,
															"end": 5769,
															"name": "AND",
															"source": 6
														},
														{
															"begin": 5749,
															"end": 5769,
															"name": "JUMP",
															"source": 6,
															"value": "[in]"
														},
														{
															"begin": 5749,
															"end": 5769,
															"name": "tag",
															"source": 6,
															"value": "58"
														},
														{
															"begin": 5749,
															"end": 5769,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 5742,
															"end": 5769,
															"name": "SWAP3",
															"source": 6
														},
														{
															"begin": 5653,
															"end": 5774,
															"name": "SWAP2",
															"source": 6
														},
														{
															"begin": -1,
															"end": -1,
															"name": "POP",
															"source": -1
														},
														{
															"begin": -1,
															"end": -1,
															"name": "POP",
															"source": -1
														},
														{
															"begin": 5653,
															"end": 5774,
															"name": "JUMP",
															"source": 6,
															"value": "[out]"
														},
														{
															"begin": 2755,
															"end": 2851,
															"name": "tag",
															"source": 5,
															"value": "43"
														},
														{
															"begin": 2755,
															"end": 2851,
															"name": "JUMPDEST",
															"source": 5
														},
														{
															"begin": 2813,
															"end": 2820,
															"name": "PUSH",
															"source": 5,
															"value": "0"
														},
														{
															"begin": 2839,
															"end": 2844,
															"name": "PUSH [tag]",
															"source": 5,
															"value": "61"
														},
														{
															"begin": 2843,
															"end": 2844,
															"name": "DUP3",
															"source": 5
														},
														{
															"begin": 2839,
															"end": 2840,
															"name": "DUP5",
															"source": 5
														},
														{
															"begin": 2839,
															"end": 2844,
															"name": "PUSH [tag]",
															"source": 5,
															"value": "62"
														},
														{
															"begin": 2839,
															"end": 2844,
															"name": "JUMP",
															"source": 5,
															"value": "[in]"
														},
														{
															"begin": 2839,
															"end": 2844,
															"name": "tag",
															"source": 5,
															"value": "61"
														},
														{
															"begin": 2839,
															"end": 2844,
															"name": "JUMPDEST",
															"source": 5
														},
														{
															"begin": 2832,
															"end": 2844,
															"name": "SWAP4",
															"source": 5
														},
														{
															"begin": 2755,
															"end": 2851,
															"name": "SWAP3",
															"source": 5
														},
														{
															"begin": -1,
															"end": -1,
															"name": "POP",
															"source": -1
														},
														{
															"begin": -1,
															"end": -1,
															"name": "POP",
															"source": -1
														},
														{
															"begin": -1,
															"end": -1,
															"name": "POP",
															"source": -1
														},
														{
															"begin": 2755,
															"end": 2851,
															"name": "JUMP",
															"source": 5,
															"value": "[out]"
														},
														{
															"begin": 4881,
															"end": 5031,
															"name": "tag",
															"source": 6,
															"value": "45"
														},
														{
															"begin": 4881,
															"end": 5031,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 4984,
															"end": 5026,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "56"
														},
														{
															"begin": 4999,
															"end": 5011,
															"name": "DUP3",
															"source": 6
														},
														{
															"begin": 5013,
															"end": 5025,
															"name": "DUP3",
															"source": 6
														},
														{
															"begin": 4984,
															"end": 4998,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "65"
														},
														{
															"begin": 4984,
															"end": 5026,
															"name": "JUMP",
															"source": 6,
															"value": "[in]"
														},
														{
															"begin": 5853,
															"end": 5933,
															"name": "tag",
															"source": 6,
															"value": "51"
														},
														{
															"begin": 5853,
															"end": 5933,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 5901,
															"end": 5907,
															"name": "PUSH",
															"source": 6,
															"value": "1"
														},
														{
															"begin": 5901,
															"end": 5907,
															"name": "SLOAD",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "PUSH",
															"source": 6,
															"value": "40"
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "MLOAD",
															"source": 6
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "A0"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SHL",
															"source": -1
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SUB",
															"source": -1
														},
														{
															"begin": 5901,
															"end": 5907,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 5901,
															"end": 5907,
															"name": "SWAP2",
															"source": 6
														},
														{
															"begin": 5901,
															"end": 5907,
															"name": "AND",
															"source": 6
														},
														{
															"begin": 5901,
															"end": 5907,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 5918,
															"end": 5927,
															"name": "CALLVALUE",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "ISZERO",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "PUSH",
															"source": 6,
															"value": "8FC"
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "MUL",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "SWAP2",
															"source": 6
														},
														{
															"begin": 5901,
															"end": 5907,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "DUP2",
															"source": 6
														},
														{
															"begin": 5901,
															"end": 5907,
															"name": "DUP2",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "DUP2",
															"source": 6
														},
														{
															"begin": 5918,
															"end": 5927,
															"name": "DUP6",
															"source": 6
														},
														{
															"begin": 5901,
															"end": 5907,
															"name": "DUP9",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "DUP9",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "CALL",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "SWAP4",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "ISZERO",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "ISZERO",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "69"
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "RETURNDATASIZE",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "RETURNDATACOPY",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "RETURNDATASIZE",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "REVERT",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "tag",
															"source": 6,
															"value": "69"
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 5893,
															"end": 5928,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 5853,
															"end": 5933,
															"name": "JUMP",
															"source": 6,
															"value": "[out]"
														},
														{
															"begin": 3465,
															"end": 3561,
															"name": "tag",
															"source": 5,
															"value": "59"
														},
														{
															"begin": 3465,
															"end": 3561,
															"name": "JUMPDEST",
															"source": 5
														},
														{
															"begin": 3523,
															"end": 3530,
															"name": "PUSH",
															"source": 5,
															"value": "0"
														},
														{
															"begin": 3549,
															"end": 3554,
															"name": "PUSH [tag]",
															"source": 5,
															"value": "61"
														},
														{
															"begin": 3553,
															"end": 3554,
															"name": "DUP3",
															"source": 5
														},
														{
															"begin": 3549,
															"end": 3550,
															"name": "DUP5",
															"source": 5
														},
														{
															"begin": 3549,
															"end": 3554,
															"name": "PUSH [tag]",
															"source": 5,
															"value": "73"
														},
														{
															"begin": 3549,
															"end": 3554,
															"name": "JUMP",
															"source": 5,
															"value": "[in]"
														},
														{
															"begin": 4474,
															"end": 4634,
															"name": "tag",
															"source": 6,
															"value": "65"
														},
														{
															"begin": 4474,
															"end": 4634,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4592,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 4587,
															"end": 4592,
															"name": "SLOAD",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH",
															"source": 6,
															"value": "40"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "MLOAD",
															"source": 6
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "A9059CBB"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "E0"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SHL",
															"source": -1
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP2",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "MSTORE",
															"source": 6
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "DUP1",
															"source": -1
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "A0"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SHL",
															"source": -1
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SUB",
															"source": -1
														},
														{
															"begin": 987,
															"end": 1019,
															"name": "DUP5",
															"source": 8
														},
														{
															"begin": 987,
															"end": 1019,
															"name": "DUP2",
															"source": 8
														},
														{
															"begin": 987,
															"end": 1019,
															"name": "AND",
															"source": 8
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH",
															"source": 6,
															"value": "4"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP4",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "ADD",
															"source": 6
														},
														{
															"begin": 969,
															"end": 1020,
															"name": "MSTORE",
															"source": 8
														},
														{
															"begin": 1036,
															"end": 1054,
															"name": "PUSH",
															"source": 8,
															"value": "24"
														},
														{
															"begin": 1036,
															"end": 1054,
															"name": "DUP3",
															"source": 8
														},
														{
															"begin": 1036,
															"end": 1054,
															"name": "ADD",
															"source": 8
														},
														{
															"begin": 1029,
															"end": 1063,
															"name": "DUP5",
															"source": 8
														},
														{
															"begin": 1029,
															"end": 1063,
															"name": "SWAP1",
															"source": 8
														},
														{
															"begin": 1029,
															"end": 1063,
															"name": "MSTORE",
															"source": 8
														},
														{
															"begin": 4587,
															"end": 4592,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4592,
															"name": "SWAP2",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4592,
															"name": "AND",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4592,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4601,
															"name": "PUSH",
															"source": 6,
															"value": "A9059CBB"
														},
														{
															"begin": 4587,
															"end": 4601,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 942,
															"end": 960,
															"name": "PUSH",
															"source": 8,
															"value": "44"
														},
														{
															"begin": 942,
															"end": 960,
															"name": "ADD",
															"source": 8
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH",
															"source": 6,
															"value": "20"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH",
															"source": 6,
															"value": "40"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "MLOAD",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP4",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "SUB",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP2",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP8",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "EXTCODESIZE",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "ISZERO",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "ISZERO",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "77"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "REVERT",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "tag",
															"source": 6,
															"value": "77"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "GAS",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "CALL",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "ISZERO",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "ISZERO",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "79"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "JUMPI",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "RETURNDATASIZE",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "RETURNDATACOPY",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "RETURNDATASIZE",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH",
															"source": 6,
															"value": "0"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "REVERT",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "tag",
															"source": 6,
															"value": "79"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "JUMPDEST",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH",
															"source": 6,
															"value": "40"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "MLOAD",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "RETURNDATASIZE",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH",
															"source": 6,
															"value": "1F"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "NOT",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH",
															"source": 6,
															"value": "1F"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP3",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "ADD",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "AND",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP3",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "ADD",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP1",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH",
															"source": 6,
															"value": "40"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "MSTORE",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "POP",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "DUP2",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "ADD",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "50"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "SWAP2",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "SWAP1",
															"source": 6
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "PUSH [tag]",
															"source": 6,
															"value": "81"
														},
														{
															"begin": 4587,
															"end": 4629,
															"name": "JUMP",
															"source": 6,
															"value": "[in]"
														},
														{
															"begin": 14,
															"end": 300,
															"name": "tag",
															"source": 8,
															"value": "31"
														},
														{
															"begin": 14,
															"end": 300,
															"name": "JUMPDEST",
															"source": 8
														},
														{
															"begin": 73,
															"end": 79,
															"name": "PUSH",
															"source": 8,
															"value": "0"
														},
														{
															"begin": 126,
															"end": 128,
															"name": "PUSH",
															"source": 8,
															"value": "20"
														},
														{
															"begin": 114,
															"end": 123,
															"name": "DUP3",
															"source": 8
														},
														{
															"begin": 105,
															"end": 112,
															"name": "DUP5",
															"source": 8
														},
														{
															"begin": 101,
															"end": 124,
															"name": "SUB",
															"source": 8
														},
														{
															"begin": 97,
															"end": 129,
															"name": "SLT",
															"source": 8
														},
														{
															"begin": 94,
															"end": 96,
															"name": "ISZERO",
															"source": 8
														},
														{
															"begin": 94,
															"end": 96,
															"name": "PUSH [tag]",
															"source": 8,
															"value": "84"
														},
														{
															"begin": 94,
															"end": 96,
															"name": "JUMPI",
															"source": 8
														},
														{
															"begin": 142,
															"end": 143,
															"name": "PUSH",
															"source": 8,
															"value": "0"
														},
														{
															"begin": 139,
															"end": 140,
															"name": "DUP1",
															"source": 8
														},
														{
															"begin": 132,
															"end": 144,
															"name": "REVERT",
															"source": 8
														},
														{
															"begin": 94,
															"end": 96,
															"name": "tag",
															"source": 8,
															"value": "84"
														},
														{
															"begin": 94,
															"end": 96,
															"name": "JUMPDEST",
															"source": 8
														},
														{
															"begin": 168,
															"end": 191,
															"name": "DUP2",
															"source": 8
														},
														{
															"begin": 168,
															"end": 191,
															"name": "CALLDATALOAD",
															"source": 8
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "1"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "PUSH",
															"source": -1,
															"value": "A0"
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SHL",
															"source": -1
														},
														{
															"begin": -1,
															"end": -1,
															"name": "SUB",
															"source": -1
														},
														{
															"begin": 220,
															"end": 251,
															"name": "DUP2",
															"source": 8
														},
														{
															"begin": 220,
															"end": 251,
															"name": "AND",
															"source": 8
														},
														{
															"begin": 210,
															"end": 252,
															"name": "DUP2",
															"source": 8
														},
														{
															"begin": 210,
															"end": 252,
															"name": "EQ",
															"source": 8
														},
														{
															"begin": 200,
															"end": 202,
															"name": "PUSH [tag]",
															"source": 8,
															"value": "61"
														},
														{
															"begin": 200,
															"end": 202,
															"name": "JUMPI",
															"source": 8
														},
														{
															"begin": 266,
															"end": 267,
															"name": "PUSH",
															"source": 8,
															"value": "0"
														},
														{
															"begin": 263,
															"end": 264,
															"name": "DUP1",
															"source": 8
														},
														{
															"begin": 256,
															"end": 268,
															"name": "REVERT",
															"source": 8
														},
														{
															"begin": 305,
															"end": 582,
															"name": "tag",
															"source": 8,
															"value": "81"
														},
														{
															"begin": 305,
															"end": 582,
															"name": "JUMPDEST",
															"source": 8
														},
														{
															"begin": 372,
															"end": 378,
															"name": "PUSH",
															"source": 8,
															"value": "0"
														},
														{
															"begin": 425,
															"end": 427,
															"name": "PUSH",
															"source": 8,
															"value": "20"
														},
														{
															"begin": 413,
															"end": 422,
															"name": "DUP3",
															"source": 8
														},
														{
															"begin": 404,
															"end": 411,
															"name": "DUP5",
															"source": 8
														},
														{
															"begin": 400,
															"end": 423,
															"name": "SUB",
															"source": 8
														},
														{
															"begin": 396,
															"end": 428,
															"name": "SLT",
															"source": 8
														},
														{
															"begin": 393,
															"end": 395,
															"name": "ISZERO",
															"source": 8
														},
														{
															"begin": 393,
															"end": 395,
															"name": "PUSH [tag]",
															"source": 8,
															"value": "87"
														},
														{
															"begin": 393,
															"end": 395,
															"name": "JUMPI",
															"source": 8
														},
														{
															"begin": 441,
															"end": 442,
															"name": "PUSH",
															"source": 8,
															"value": "0"
														},
														{
															"begin": 438,
															"end": 439,
															"name": "DUP1",
															"source": 8
														},
														{
															"begin": 431,
															"end": 443,
															"name": "REVERT",
															"source": 8
														},
														{
															"begin": 393,
															"end": 395,
															"name": "tag",
															"source": 8,
															"value": "87"
														},
														{
															"begin": 393,
															"end": 395,
															"name": "JUMPDEST",
															"source": 8
														},
														{
															"begin": 473,
															"end": 482,
															"name": "DUP2",
															"source": 8
														},
														{
															"begin": 467,
															"end": 483,
															"name": "MLOAD",
															"source": 8
														},
														{
															"begin": 526,
															"end": 531,
															"name": "DUP1",
															"source": 8
														},
														{
															"begin": 519,
															"end": 532,
															"name": "ISZERO",
															"source": 8
														},
														{
															"begin": 512,
															"end": 533,
															"name": "ISZERO",
															"source": 8
														},
														{
															"begin": 505,
															"end": 510,
															"name": "DUP2",
															"source": 8
														},
														{
															"begin": 502,
															"end": 534,
															"name": "EQ",
															"source": 8
														},
														{
															"begin": 492,
															"end": 494,
															"name": "PUSH [tag]",
															"source": 8,
															"value": "61"
														},
														{
															"begin": 492,
															"end": 494,
															"name": "JUMPI",
															"source": 8
														},
														{
															"begin": 548,
															"end": 549,
															"name": "PUSH",
															"source": 8,
															"value": "0"
														},
														{
															"begin": 545,
															"end": 546,
															"name": "DUP1",
															"source": 8
														},
														{
															"begin": 538,
															"end": 550,
															"name": "REVERT",
															"source": 8
														},
														{
															"begin": 1730,
															"end": 1858,
															"name": "tag",
															"source": 8,
															"value": "62"
														},
														{
															"begin": 1730,
															"end": 1858,
															"name": "JUMPDEST",
															"source": 8
														},
														{
															"begin": 1770,
															"end": 1773,
															"name": "PUSH",
															"source": 8,
															"value": "0"
														},
														{
															"begin": 1801,
															"end": 1802,
															"name": "DUP3",
															"source": 8
														},
														{
															"begin": 1797,
															"end": 1803,
															"name": "NOT",
															"source": 8
														},
														{
															"begin": 1794,
															"end": 1795,
															"name": "DUP3",
															"source": 8
														},
														{
															"begin": 1791,
															"end": 1804,
															"name": "GT",
															"source": 8
														},
														{
															"begin": 1788,
															"end": 1790,
															"name": "ISZERO",
															"source": 8
														},
														{
															"begin": 1788,
															"end": 1790,
															"name": "PUSH [tag]",
															"source": 8,
															"value": "96"
														},
														{
															"begin": 1788,
															"end": 1790,
															"name": "JUMPI",
															"source": 8
														},
														{
															"begin": 1807,
															"end": 1825,
															"name": "PUSH [tag]",
															"source": 8,
															"value": "96"
														},
														{
															"begin": 1807,
															"end": 1825,
															"name": "PUSH [tag]",
															"source": 8,
															"value": "97"
														},
														{
															"begin": 1807,
															"end": 1825,
															"name": "JUMP",
															"source": 8,
															"value": "[in]"
														},
														{
															"begin": 1807,
															"end": 1825,
															"name": "tag",
															"source": 8,
															"value": "96"
														},
														{
															"begin": 1807,
															"end": 1825,
															"name": "JUMPDEST",
															"source": 8
														},
														{
															"begin": -1,
															"end": -1,
															"name": "POP",
															"source": -1
														},
														{
															"begin": 1843,
															"end": 1852,
															"name": "ADD",
															"source": 8
														},
														{
															"begin": 1843,
															"end": 1852,
															"name": "SWAP1",
															"source": 8
														},
														{
															"begin": 1778,
															"end": 1858,
															"name": "JUMP",
															"source": 8,
															"value": "[out]"
														},
														{
															"begin": 1863,
															"end": 2031,
															"name": "tag",
															"source": 8,
															"value": "73"
														},
														{
															"begin": 1863,
															"end": 2031,
															"name": "JUMPDEST",
															"source": 8
														},
														{
															"begin": 1903,
															"end": 1910,
															"name": "PUSH",
															"source": 8,
															"value": "0"
														},
														{
															"begin": 1969,
															"end": 1970,
															"name": "DUP2",
															"source": 8
														},
														{
															"begin": 1965,
															"end": 1966,
															"name": "PUSH",
															"source": 8,
															"value": "0"
														},
														{
															"begin": 1961,
															"end": 1967,
															"name": "NOT",
															"source": 8
														},
														{
															"begin": 1957,
															"end": 1971,
															"name": "DIV",
															"source": 8
														},
														{
															"begin": 1954,
															"end": 1955,
															"name": "DUP4",
															"source": 8
														},
														{
															"begin": 1951,
															"end": 1972,
															"name": "GT",
															"source": 8
														},
														{
															"begin": 1946,
															"end": 1947,
															"name": "DUP3",
															"source": 8
														},
														{
															"begin": 1939,
															"end": 1948,
															"name": "ISZERO",
															"source": 8
														},
														{
															"begin": 1932,
															"end": 1949,
															"name": "ISZERO",
															"source": 8
														},
														{
															"begin": 1928,
															"end": 1973,
															"name": "AND",
															"source": 8
														},
														{
															"begin": 1925,
															"end": 1927,
															"name": "ISZERO",
															"source": 8
														},
														{
															"begin": 1925,
															"end": 1927,
															"name": "PUSH [tag]",
															"source": 8,
															"value": "100"
														},
														{
															"begin": 1925,
															"end": 1927,
															"name": "JUMPI",
															"source": 8
														},
														{
															"begin": 1976,
															"end": 1994,
															"name": "PUSH [tag]",
															"source": 8,
															"value": "100"
														},
														{
															"begin": 1976,
															"end": 1994,
															"name": "PUSH [tag]",
															"source": 8,
															"value": "97"
														},
														{
															"begin": 1976,
															"end": 1994,
															"name": "JUMP",
															"source": 8,
															"value": "[in]"
														},
														{
															"begin": 1976,
															"end": 1994,
															"name": "tag",
															"source": 8,
															"value": "100"
														},
														{
															"begin": 1976,
															"end": 1994,
															"name": "JUMPDEST",
															"source": 8
														},
														{
															"begin": -1,
															"end": -1,
															"name": "POP",
															"source": -1
														},
														{
															"begin": 2016,
															"end": 2025,
															"name": "MUL",
															"source": 8
														},
														{
															"begin": 2016,
															"end": 2025,
															"name": "SWAP1",
															"source": 8
														},
														{
															"begin": 1915,
															"end": 2031,
															"name": "JUMP",
															"source": 8,
															"value": "[out]"
														},
														{
															"begin": 2036,
															"end": 2163,
															"name": "tag",
															"source": 8,
															"value": "97"
														},
														{
															"begin": 2036,
															"end": 2163,
															"name": "JUMPDEST",
															"source": 8
														},
														{
															"begin": 2097,
															"end": 2107,
															"name": "PUSH",
															"source": 8,
															"value": "4E487B71"
														},
														{
															"begin": 2092,
															"end": 2095,
															"name": "PUSH",
															"source": 8,
															"value": "E0"
														},
														{
															"begin": 2088,
															"end": 2108,
															"name": "SHL",
															"source": 8
														},
														{
															"begin": 2085,
															"end": 2086,
															"name": "PUSH",
															"source": 8,
															"value": "0"
														},
														{
															"begin": 2078,
															"end": 2109,
															"name": "MSTORE",
															"source": 8
														},
														{
															"begin": 2128,
															"end": 2132,
															"name": "PUSH",
															"source": 8,
															"value": "11"
														},
														{
															"begin": 2125,
															"end": 2126,
															"name": "PUSH",
															"source": 8,
															"value": "4"
														},
														{
															"begin": 2118,
															"end": 2133,
															"name": "MSTORE",
															"source": 8
														},
														{
															"begin": 2152,
															"end": 2156,
															"name": "PUSH",
															"source": 8,
															"value": "24"
														},
														{
															"begin": 2149,
															"end": 2150,
															"name": "PUSH",
															"source": 8,
															"value": "0"
														},
														{
															"begin": 2142,
															"end": 2157,
															"name": "REVERT",
															"source": 8
														}
													]
												}
											}
										}
									}
								}
							}
						},
						"methodIdentifiers": {
							"createCrowdSale(uint256,address,address)": "ee323eca",
							"getAllDeployedProjects()": "f0e24a40",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"crowdsaleContract\",\"type\":\"address\"}],\"name\":\"newCrowdSaleCreatedAt\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createCrowdSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDeployedProjects\",\"outputs\":[{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiaryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crowdsaleContractAddr\",\"type\":\"address\"}],\"internalType\":\"struct CrowdsaleFactory.crowdsaleMeta[]\",\"name\":\"props\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrowdsaleFactory.sol\":\"CrowdsaleFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://43e46da9d9f49741ecd876a269e71bc7494058d7a8e9478429998adb5bc3eaa0\",\"dweb:/ipfs/QmUtp4cqzf22C5rJ76AabKADquGWcjsc33yjYXxXC4sDvy\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]},\"contracts/Crowdsale.sol\":{\"keccak256\":\"0xfc6fa2e7243fcd3fe6012abf3e1da3bdc5c360bbfa392a3865e178f14169ea49\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://e32165cb4773d17846f6146780b1f9ef349a4759e04e17fe0140b1cdd3ee3e9b\",\"dweb:/ipfs/QmSWcyLomNsy23yzhistP7Bs7NnPRyAYhfMGWED3LLuP8T\"]},\"contracts/CrowdsaleFactory.sol\":{\"keccak256\":\"0x8e42a31be5ff6ae6861175a3798917f060b5fb536cdeafbcdadb5f6522221f86\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://543447f597492d3053d845252529ea68a7cb003be33b2b63d9b80b91828de9ee\",\"dweb:/ipfs/QmRBPPVLe8tPJpB7NuDkC22HQzSiovBXSEwPmPNcpmChmd\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/CrowdsaleFactory.sol:CrowdsaleFactory",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 1398,
								"contract": "contracts/CrowdsaleFactory.sol:CrowdsaleFactory",
								"label": "numOfCrowdsale",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 1413,
								"contract": "contracts/CrowdsaleFactory.sol:CrowdsaleFactory",
								"label": "deployedCrowdsale",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_struct(crowdsaleMeta)1408_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_contract(ERC20)698": {
								"encoding": "inplace",
								"label": "contract ERC20",
								"numberOfBytes": "20"
							},
							"t_mapping(t_uint256,t_struct(crowdsaleMeta)1408_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct CrowdsaleFactory.crowdsaleMeta)",
								"numberOfBytes": "32",
								"value": "t_struct(crowdsaleMeta)1408_storage"
							},
							"t_struct(crowdsaleMeta)1408_storage": {
								"encoding": "inplace",
								"label": "struct CrowdsaleFactory.crowdsaleMeta",
								"members": [
									{
										"astId": 1401,
										"contract": "contracts/CrowdsaleFactory.sol:CrowdsaleFactory",
										"label": "token",
										"offset": 0,
										"slot": "0",
										"type": "t_contract(ERC20)698"
									},
									{
										"astId": 1403,
										"contract": "contracts/CrowdsaleFactory.sol:CrowdsaleFactory",
										"label": "rate",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 1405,
										"contract": "contracts/CrowdsaleFactory.sol:CrowdsaleFactory",
										"label": "beneficiaryAddr",
										"offset": 0,
										"slot": "2",
										"type": "t_address"
									},
									{
										"astId": 1407,
										"contract": "contracts/CrowdsaleFactory.sol:CrowdsaleFactory",
										"label": "crowdsaleContractAddr",
										"offset": 0,
										"slot": "3",
										"type": "t_address"
									}
								],
								"numberOfBytes": "128"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							823
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 824,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 823,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								823
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 813,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 813,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0",
							"usedErrors": []
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							823
						],
						"ERC20": [
							698
						],
						"IERC20": [
							776
						],
						"IERC20Metadata": [
							801
						]
					},
					"id": 699,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 115,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 699,
							"sourceUnit": 777,
							"src": "130:22:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 116,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 699,
							"sourceUnit": 802,
							"src": "153:41:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 117,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 699,
							"sourceUnit": 824,
							"src": "195:33:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 119,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 823,
										"src": "1421:7:1"
									},
									"id": 120,
									"nodeType": "InheritanceSpecifier",
									"src": "1421:7:1"
								},
								{
									"baseName": {
										"id": 121,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 776,
										"src": "1430:6:1"
									},
									"id": 122,
									"nodeType": "InheritanceSpecifier",
									"src": "1430:6:1"
								},
								{
									"baseName": {
										"id": 123,
										"name": "IERC20Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 801,
										"src": "1438:14:1"
									},
									"id": 124,
									"nodeType": "InheritanceSpecifier",
									"src": "1438:14:1"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 118,
								"nodeType": "StructuredDocumentation",
								"src": "230:1172:1",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 698,
							"linearizedBaseContracts": [
								698,
								801,
								776,
								823
							],
							"name": "ERC20",
							"nameLocation": "1412:5:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 128,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1495:9:1",
									"nodeType": "VariableDeclaration",
									"scope": 698,
									"src": "1459:45:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 127,
										"keyType": {
											"id": 125,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1467:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1459:27:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 126,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1478:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 134,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1567:11:1",
									"nodeType": "VariableDeclaration",
									"scope": 698,
									"src": "1511:67:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 133,
										"keyType": {
											"id": 129,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1519:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1511:47:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 132,
											"keyType": {
												"id": 130,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1538:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1530:27:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 131,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1549:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 136,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1601:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 698,
									"src": "1585:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 135,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1585:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 138,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1635:5:1",
									"nodeType": "VariableDeclaration",
									"scope": 698,
									"src": "1620:20:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 137,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1620:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 140,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1661:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 698,
									"src": "1646:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 139,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1646:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 156,
										"nodeType": "Block",
										"src": "2034:57:1",
										"statements": [
											{
												"expression": {
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 148,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "2044:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 149,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 143,
														"src": "2052:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2044:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 151,
												"nodeType": "ExpressionStatement",
												"src": "2044:13:1"
											},
											{
												"expression": {
													"id": 154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 152,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 140,
														"src": "2067:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 153,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 145,
														"src": "2077:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2067:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 155,
												"nodeType": "ExpressionStatement",
												"src": "2067:17:1"
											}
										]
									},
									"documentation": {
										"id": 141,
										"nodeType": "StructuredDocumentation",
										"src": "1675:298:1",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 157,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2004:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1990:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 142,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1990:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2025:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "2011:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 144,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2011:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1989:44:1"
									},
									"returnParameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2034:0:1"
									},
									"scope": 698,
									"src": "1978:113:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										788
									],
									"body": {
										"id": 166,
										"nodeType": "Block",
										"src": "2225:29:1",
										"statements": [
											{
												"expression": {
													"id": 164,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 138,
													"src": "2242:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 163,
												"id": 165,
												"nodeType": "Return",
												"src": "2235:12:1"
											}
										]
									},
									"documentation": {
										"id": 158,
										"nodeType": "StructuredDocumentation",
										"src": "2097:54:1",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 167,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2165:4:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 160,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2192:8:1"
									},
									"parameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2169:2:1"
									},
									"returnParameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "2210:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 161,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2210:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2209:15:1"
									},
									"scope": 698,
									"src": "2156:98:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										794
									],
									"body": {
										"id": 176,
										"nodeType": "Block",
										"src": "2438:31:1",
										"statements": [
											{
												"expression": {
													"id": 174,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 140,
													"src": "2455:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 173,
												"id": 175,
												"nodeType": "Return",
												"src": "2448:14:1"
											}
										]
									},
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "2260:102:1",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 177,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2376:6:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 170,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2405:8:1"
									},
									"parameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2382:2:1"
									},
									"returnParameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2423:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 171,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2423:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2422:15:1"
									},
									"scope": 698,
									"src": "2367:102:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										800
									],
									"body": {
										"id": 186,
										"nodeType": "Block",
										"src": "3158:26:1",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 184,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3175:2:1",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 183,
												"id": 185,
												"nodeType": "Return",
												"src": "3168:9:1"
											}
										]
									},
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "2475:613:1",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 187,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3102:8:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 180,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3133:8:1"
									},
									"parameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3110:2:1"
									},
									"returnParameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "3151:5:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 181,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3151:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3150:7:1"
									},
									"scope": 698,
									"src": "3093:91:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										725
									],
									"body": {
										"id": 196,
										"nodeType": "Block",
										"src": "3314:36:1",
										"statements": [
											{
												"expression": {
													"id": 194,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 136,
													"src": "3331:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 193,
												"id": 195,
												"nodeType": "Return",
												"src": "3324:19:1"
											}
										]
									},
									"documentation": {
										"id": 188,
										"nodeType": "StructuredDocumentation",
										"src": "3190:49:1",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 197,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3253:11:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 190,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3287:8:1"
									},
									"parameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3264:2:1"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "3305:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3305:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3304:9:1"
									},
									"scope": 698,
									"src": "3244:106:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										733
									],
									"body": {
										"id": 210,
										"nodeType": "Block",
										"src": "3491:42:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 206,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "3508:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 208,
													"indexExpression": {
														"id": 207,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 200,
														"src": "3518:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3508:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 205,
												"id": 209,
												"nodeType": "Return",
												"src": "3501:25:1"
											}
										]
									},
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "3356:47:1",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 211,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3417:9:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 202,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3464:8:1"
									},
									"parameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3435:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "3427:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 199,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3427:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3426:17:1"
									},
									"returnParameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "3482:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3482:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3481:9:1"
									},
									"scope": 698,
									"src": "3408:125:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										743
									],
									"body": {
										"id": 235,
										"nodeType": "Block",
										"src": "3814:104:1",
										"statements": [
											{
												"assignments": [
													223
												],
												"declarations": [
													{
														"constant": false,
														"id": 223,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3832:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 235,
														"src": "3824:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 222,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3824:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 226,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 224,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 813,
														"src": "3840:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 225,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3840:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3824:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 228,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 223,
															"src": "3872:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 229,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 214,
															"src": "3879:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 230,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 216,
															"src": "3883:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 227,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 459,
														"src": "3862:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3862:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 232,
												"nodeType": "ExpressionStatement",
												"src": "3862:28:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 233,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3907:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 221,
												"id": 234,
												"nodeType": "Return",
												"src": "3900:11:1"
											}
										]
									},
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "3539:185:1",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 236,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3738:8:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 218,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3790:8:1"
									},
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3755:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3747:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 213,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3747:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3767:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3759:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 215,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3759:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3746:28:1"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3808:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 219,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3808:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3807:6:1"
									},
									"scope": 698,
									"src": "3729:189:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										753
									],
									"body": {
										"id": 253,
										"nodeType": "Block",
										"src": "4074:51:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 247,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 134,
															"src": "4091:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 249,
														"indexExpression": {
															"id": 248,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 239,
															"src": "4103:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4091:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 251,
													"indexExpression": {
														"id": 250,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 241,
														"src": "4110:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4091:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 246,
												"id": 252,
												"nodeType": "Return",
												"src": "4084:34:1"
											}
										]
									},
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "3924:47:1",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 254,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3985:9:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 243,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4047:8:1"
									},
									"parameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4003:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "3995:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3995:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4018:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "4010:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4010:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3994:32:1"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "4065:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4065:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4064:9:1"
									},
									"scope": 698,
									"src": "3976:149:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										763
									],
									"body": {
										"id": 278,
										"nodeType": "Block",
										"src": "4522:108:1",
										"statements": [
											{
												"assignments": [
													266
												],
												"declarations": [
													{
														"constant": false,
														"id": 266,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4540:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 278,
														"src": "4532:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 265,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4532:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 269,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 267,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 813,
														"src": "4548:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 268,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4548:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4532:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 271,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 266,
															"src": "4579:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 272,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 257,
															"src": "4586:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 273,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 259,
															"src": "4595:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 270,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 632,
														"src": "4570:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4570:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 275,
												"nodeType": "ExpressionStatement",
												"src": "4570:32:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4619:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 264,
												"id": 277,
												"nodeType": "Return",
												"src": "4612:11:1"
											}
										]
									},
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "4131:297:1",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4442:7:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 261,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4498:8:1"
									},
									"parameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4458:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "4450:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4450:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4475:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "4467:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 258,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4467:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4449:33:1"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "4516:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 262,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4516:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4515:6:1"
									},
									"scope": 698,
									"src": "4433:197:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										775
									],
									"body": {
										"id": 311,
										"nodeType": "Block",
										"src": "5325:153:1",
										"statements": [
											{
												"assignments": [
													293
												],
												"declarations": [
													{
														"constant": false,
														"id": 293,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5343:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 311,
														"src": "5335:15:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 292,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5335:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 296,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 294,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 813,
														"src": "5353:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 295,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5353:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5335:30:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 298,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 282,
															"src": "5391:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 299,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 293,
															"src": "5397:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 300,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 286,
															"src": "5406:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 297,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 675,
														"src": "5375:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5375:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 302,
												"nodeType": "ExpressionStatement",
												"src": "5375:38:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 304,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 282,
															"src": "5433:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 305,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 284,
															"src": "5439:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 306,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 286,
															"src": "5443:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 303,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 459,
														"src": "5423:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5423:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 308,
												"nodeType": "ExpressionStatement",
												"src": "5423:27:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5467:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 291,
												"id": 310,
												"nodeType": "Return",
												"src": "5460:11:1"
											}
										]
									},
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "4636:551:1",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 312,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5201:12:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 288,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5301:8:1"
									},
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5231:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "5223:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5223:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5253:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "5245:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5245:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5273:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "5265:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5265:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5213:72:1"
									},
									"returnParameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "5319:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 289,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5319:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5318:6:1"
									},
									"scope": 698,
									"src": "5192:286:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 340,
										"nodeType": "Block",
										"src": "5967:140:1",
										"statements": [
											{
												"assignments": [
													323
												],
												"declarations": [
													{
														"constant": false,
														"id": 323,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5985:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 340,
														"src": "5977:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 322,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5977:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 326,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 324,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 813,
														"src": "5993:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5993:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5977:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 328,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 323,
															"src": "6024:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 329,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 315,
															"src": "6031:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 331,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 323,
																		"src": "6050:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 332,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 315,
																		"src": "6057:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 330,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 254,
																	"src": "6040:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 333,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6040:25:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 334,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 317,
																"src": "6068:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6040:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 327,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 632,
														"src": "6015:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6015:64:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 337,
												"nodeType": "ExpressionStatement",
												"src": "6015:64:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 338,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6096:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 321,
												"id": 339,
												"nodeType": "Return",
												"src": "6089:11:1"
											}
										]
									},
									"documentation": {
										"id": 313,
										"nodeType": "StructuredDocumentation",
										"src": "5484:384:1",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 341,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "5882:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 315,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5908:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "5900:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 314,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5900:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "5925:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "5917:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 316,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5917:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5899:37:1"
									},
									"returnParameters": {
										"id": 321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "5961:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 319,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5961:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5960:6:1"
									},
									"scope": 698,
									"src": "5873:234:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 381,
										"nodeType": "Block",
										"src": "6693:328:1",
										"statements": [
											{
												"assignments": [
													352
												],
												"declarations": [
													{
														"constant": false,
														"id": 352,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6711:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 381,
														"src": "6703:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 351,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6703:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 355,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 353,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 813,
														"src": "6719:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6719:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6703:28:1"
											},
											{
												"assignments": [
													357
												],
												"declarations": [
													{
														"constant": false,
														"id": 357,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "6749:16:1",
														"nodeType": "VariableDeclaration",
														"scope": 381,
														"src": "6741:24:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 356,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6741:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 362,
												"initialValue": {
													"arguments": [
														{
															"id": 359,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 352,
															"src": "6778:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 360,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 344,
															"src": "6785:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 358,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 254,
														"src": "6768:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6768:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6741:52:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 366,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 364,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 357,
																"src": "6811:16:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 365,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 346,
																"src": "6831:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6811:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 367,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6848:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 363,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6803:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6803:85:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 369,
												"nodeType": "ExpressionStatement",
												"src": "6803:85:1"
											},
											{
												"id": 378,
												"nodeType": "UncheckedBlock",
												"src": "6898:95:1",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 371,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 352,
																	"src": "6931:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 372,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 344,
																	"src": "6938:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 375,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 373,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 357,
																		"src": "6947:16:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 374,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 346,
																		"src": "6966:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6947:34:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 370,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 632,
																"src": "6922:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 376,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6922:60:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 377,
														"nodeType": "ExpressionStatement",
														"src": "6922:60:1"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 379,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7010:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 350,
												"id": 380,
												"nodeType": "Return",
												"src": "7003:11:1"
											}
										]
									},
									"documentation": {
										"id": 342,
										"nodeType": "StructuredDocumentation",
										"src": "6113:476:1",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 382,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6603:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6629:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6621:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 343,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6621:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6646:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6638:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6638:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6620:42:1"
									},
									"returnParameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6687:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 348,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6687:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6686:6:1"
									},
									"scope": 698,
									"src": "6594:427:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 458,
										"nodeType": "Block",
										"src": "7583:543:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 398,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 393,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 385,
																"src": "7601:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 396,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7617:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 395,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7609:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 394,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7609:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 397,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7609:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7601:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 399,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7621:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 392,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7593:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7593:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 401,
												"nodeType": "ExpressionStatement",
												"src": "7593:68:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 403,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 387,
																"src": "7679:2:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 406,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7693:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 405,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7685:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 404,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7685:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 407,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7685:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7679:16:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 409,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7697:37:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 402,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7671:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7671:64:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 411,
												"nodeType": "ExpressionStatement",
												"src": "7671:64:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 413,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 385,
															"src": "7767:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 414,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 387,
															"src": "7773:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 415,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "7777:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 412,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 686,
														"src": "7746:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7746:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 417,
												"nodeType": "ExpressionStatement",
												"src": "7746:38:1"
											},
											{
												"assignments": [
													419
												],
												"declarations": [
													{
														"constant": false,
														"id": 419,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "7803:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 458,
														"src": "7795:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 418,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7795:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 423,
												"initialValue": {
													"baseExpression": {
														"id": 420,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "7817:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 422,
													"indexExpression": {
														"id": 421,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 385,
														"src": "7827:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7817:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7795:37:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 427,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 425,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 419,
																"src": "7850:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 426,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 389,
																"src": "7865:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7850:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 428,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7873:40:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 424,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7842:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7842:72:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 430,
												"nodeType": "ExpressionStatement",
												"src": "7842:72:1"
											},
											{
												"id": 439,
												"nodeType": "UncheckedBlock",
												"src": "7924:73:1",
												"statements": [
													{
														"expression": {
															"id": 437,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 431,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 128,
																	"src": "7948:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 433,
																"indexExpression": {
																	"id": 432,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 385,
																	"src": "7958:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "7948:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 436,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 434,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 419,
																	"src": "7966:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 435,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 389,
																	"src": "7980:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7966:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7948:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 438,
														"nodeType": "ExpressionStatement",
														"src": "7948:38:1"
													}
												]
											},
											{
												"expression": {
													"id": 444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 440,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 128,
															"src": "8006:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 442,
														"indexExpression": {
															"id": 441,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 387,
															"src": "8016:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8006:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 443,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 389,
														"src": "8023:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8006:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 445,
												"nodeType": "ExpressionStatement",
												"src": "8006:23:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 447,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 385,
															"src": "8054:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 448,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 387,
															"src": "8060:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 449,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "8064:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 446,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 710,
														"src": "8045:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 450,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8045:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 451,
												"nodeType": "EmitStatement",
												"src": "8040:31:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 453,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 385,
															"src": "8102:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 454,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 387,
															"src": "8108:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 455,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "8112:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 452,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 697,
														"src": "8082:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8082:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 457,
												"nodeType": "ExpressionStatement",
												"src": "8082:37:1"
											}
										]
									},
									"documentation": {
										"id": 383,
										"nodeType": "StructuredDocumentation",
										"src": "7027:443:1",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 459,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7484:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7511:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "7503:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 384,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7503:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7533:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "7525:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7525:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7553:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "7545:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 388,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7545:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7493:72:1"
									},
									"returnParameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7583:0:1"
									},
									"scope": 698,
									"src": "7475:651:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 514,
										"nodeType": "Block",
										"src": "8467:324:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 473,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 468,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 462,
																"src": "8485:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 471,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8504:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 470,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8496:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 469,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8496:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 472,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8496:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8485:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 474,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8508:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 467,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8477:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 475,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8477:65:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 476,
												"nodeType": "ExpressionStatement",
												"src": "8477:65:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 480,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8582:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 479,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8574:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 478,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8574:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 481,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8574:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 482,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 462,
															"src": "8586:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 483,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 464,
															"src": "8595:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 477,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 686,
														"src": "8553:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 484,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8553:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 485,
												"nodeType": "ExpressionStatement",
												"src": "8553:49:1"
											},
											{
												"expression": {
													"id": 488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 486,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 136,
														"src": "8613:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 487,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 464,
														"src": "8629:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8613:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 489,
												"nodeType": "ExpressionStatement",
												"src": "8613:22:1"
											},
											{
												"expression": {
													"id": 494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 490,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 128,
															"src": "8645:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 492,
														"indexExpression": {
															"id": 491,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 462,
															"src": "8655:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8645:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 493,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 464,
														"src": "8667:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8645:28:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 495,
												"nodeType": "ExpressionStatement",
												"src": "8645:28:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 499,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8705:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 498,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8697:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 497,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8697:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 500,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8697:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 501,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 462,
															"src": "8709:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 502,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 464,
															"src": "8718:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 496,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 710,
														"src": "8688:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8688:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 504,
												"nodeType": "EmitStatement",
												"src": "8683:42:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 508,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8764:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 507,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8756:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 506,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8756:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 509,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8756:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 510,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 462,
															"src": "8768:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 511,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 464,
															"src": "8777:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 505,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 697,
														"src": "8736:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8736:48:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 513,
												"nodeType": "ExpressionStatement",
												"src": "8736:48:1"
											}
										]
									},
									"documentation": {
										"id": 460,
										"nodeType": "StructuredDocumentation",
										"src": "8132:265:1",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8411:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8425:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "8417:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 461,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8417:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 464,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8442:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "8434:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 463,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8434:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8416:33:1"
									},
									"returnParameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8467:0:1"
									},
									"scope": 698,
									"src": "8402:389:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 586,
										"nodeType": "Block",
										"src": "9176:511:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 529,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 524,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 518,
																"src": "9194:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 527,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9213:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 526,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9205:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 525,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9205:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 528,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9205:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9194:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 530,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9217:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 523,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9186:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 531,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9186:67:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 532,
												"nodeType": "ExpressionStatement",
												"src": "9186:67:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 534,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "9285:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 537,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9302:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 536,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9294:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 535,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9294:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 538,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9294:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 539,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 520,
															"src": "9306:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 533,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 686,
														"src": "9264:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9264:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 541,
												"nodeType": "ExpressionStatement",
												"src": "9264:49:1"
											},
											{
												"assignments": [
													543
												],
												"declarations": [
													{
														"constant": false,
														"id": 543,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9332:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 586,
														"src": "9324:22:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 542,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9324:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 547,
												"initialValue": {
													"baseExpression": {
														"id": 544,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "9349:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 546,
													"indexExpression": {
														"id": 545,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 518,
														"src": "9359:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9349:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9324:43:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 551,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 549,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 543,
																"src": "9385:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 550,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 520,
																"src": "9403:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9385:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 552,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9411:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 548,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9377:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 553,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9377:71:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 554,
												"nodeType": "ExpressionStatement",
												"src": "9377:71:1"
											},
											{
												"id": 563,
												"nodeType": "UncheckedBlock",
												"src": "9458:79:1",
												"statements": [
													{
														"expression": {
															"id": 561,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 555,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 128,
																	"src": "9482:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 557,
																"indexExpression": {
																	"id": 556,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 518,
																	"src": "9492:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9482:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 560,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 558,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 543,
																	"src": "9503:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 559,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 520,
																	"src": "9520:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9503:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9482:44:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 562,
														"nodeType": "ExpressionStatement",
														"src": "9482:44:1"
													}
												]
											},
											{
												"expression": {
													"id": 566,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 564,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 136,
														"src": "9546:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 565,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 520,
														"src": "9562:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9546:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 567,
												"nodeType": "ExpressionStatement",
												"src": "9546:22:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 569,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "9593:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 572,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9610:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 571,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9602:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 570,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9602:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 573,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9602:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 574,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 520,
															"src": "9614:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 568,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 710,
														"src": "9584:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 575,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9584:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 576,
												"nodeType": "EmitStatement",
												"src": "9579:42:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 578,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "9652:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 581,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9669:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 580,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9661:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 579,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9661:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 582,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9661:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 583,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 520,
															"src": "9673:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 577,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 697,
														"src": "9632:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 584,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9632:48:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 585,
												"nodeType": "ExpressionStatement",
												"src": "9632:48:1"
											}
										]
									},
									"documentation": {
										"id": 516,
										"nodeType": "StructuredDocumentation",
										"src": "8797:309:1",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 587,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9120:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9134:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "9126:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9126:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9151:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "9143:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 519,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9143:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9125:33:1"
									},
									"returnParameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9176:0:1"
									},
									"scope": 698,
									"src": "9111:576:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 631,
										"nodeType": "Block",
										"src": "10223:257:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 603,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 598,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 590,
																"src": "10241:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 601,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10258:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 600,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10250:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 599,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10250:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 602,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10250:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10241:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 604,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10262:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 597,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10233:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10233:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 606,
												"nodeType": "ExpressionStatement",
												"src": "10233:68:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 613,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 608,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 592,
																"src": "10319:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 611,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10338:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 610,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10330:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 609,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10330:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 612,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10330:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10319:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 614,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10342:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 607,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10311:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10311:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 616,
												"nodeType": "ExpressionStatement",
												"src": "10311:68:1"
											},
											{
												"expression": {
													"id": 623,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 617,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 134,
																"src": "10390:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 620,
															"indexExpression": {
																"id": 618,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 590,
																"src": "10402:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10390:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 621,
														"indexExpression": {
															"id": 619,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 592,
															"src": "10409:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10390:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 622,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 594,
														"src": "10420:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10390:36:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 624,
												"nodeType": "ExpressionStatement",
												"src": "10390:36:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 626,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 590,
															"src": "10450:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 627,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 592,
															"src": "10457:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 628,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 594,
															"src": "10466:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 625,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 719,
														"src": "10441:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10441:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 630,
												"nodeType": "EmitStatement",
												"src": "10436:37:1"
											}
										]
									},
									"documentation": {
										"id": 588,
										"nodeType": "StructuredDocumentation",
										"src": "9693:412:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 632,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10119:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 590,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10145:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 632,
												"src": "10137:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 589,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10137:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10168:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 632,
												"src": "10160:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 591,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10160:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10193:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 632,
												"src": "10185:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 593,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10185:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10127:78:1"
									},
									"returnParameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10223:0:1"
									},
									"scope": 698,
									"src": "10110:370:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 674,
										"nodeType": "Block",
										"src": "10881:321:1",
										"statements": [
											{
												"assignments": [
													643
												],
												"declarations": [
													{
														"constant": false,
														"id": 643,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10899:16:1",
														"nodeType": "VariableDeclaration",
														"scope": 674,
														"src": "10891:24:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 642,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10891:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 648,
												"initialValue": {
													"arguments": [
														{
															"id": 645,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 635,
															"src": "10928:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 646,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 637,
															"src": "10935:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 644,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 254,
														"src": "10918:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 647,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10918:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10891:52:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 655,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 649,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 643,
														"src": "10957:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 652,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10982:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 651,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10982:7:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 650,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10977:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 653,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10977:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 654,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10977:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10957:37:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 673,
												"nodeType": "IfStatement",
												"src": "10953:243:1",
												"trueBody": {
													"id": 672,
													"nodeType": "Block",
													"src": "10996:200:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 659,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 657,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 643,
																			"src": "11018:16:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 658,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 639,
																			"src": "11038:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11018:26:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 660,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11046:31:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 656,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11010:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 661,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11010:68:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 662,
															"nodeType": "ExpressionStatement",
															"src": "11010:68:1"
														},
														{
															"id": 671,
															"nodeType": "UncheckedBlock",
															"src": "11092:94:1",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 664,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 635,
																				"src": "11129:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 665,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 637,
																				"src": "11136:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 668,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 666,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 643,
																					"src": "11145:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 667,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 639,
																					"src": "11164:6:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11145:25:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 663,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 632,
																			"src": "11120:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 669,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11120:51:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 670,
																	"nodeType": "ExpressionStatement",
																	"src": "11120:51:1"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 633,
										"nodeType": "StructuredDocumentation",
										"src": "10486:270:1",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 675,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10770:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10803:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "10795:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 634,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10795:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 637,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10826:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "10818:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 636,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10818:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10851:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "10843:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 638,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10843:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10785:78:1"
									},
									"returnParameters": {
										"id": 641,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10881:0:1"
									},
									"scope": 698,
									"src": "10761:441:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 685,
										"nodeType": "Block",
										"src": "11905:2:1",
										"statements": []
									},
									"documentation": {
										"id": 676,
										"nodeType": "StructuredDocumentation",
										"src": "11208:573:1",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 686,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "11795:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 678,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "11833:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "11825:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 677,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11825:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 680,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11855:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "11847:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 679,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11847:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 682,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11875:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "11867:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 681,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11867:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11815:72:1"
									},
									"returnParameters": {
										"id": 684,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11905:0:1"
									},
									"scope": 698,
									"src": "11786:121:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 696,
										"nodeType": "Block",
										"src": "12613:2:1",
										"statements": []
									},
									"documentation": {
										"id": 687,
										"nodeType": "StructuredDocumentation",
										"src": "11913:577:1",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 697,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12504:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 694,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12541:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "12533:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 688,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12533:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 691,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12563:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "12555:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 690,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12555:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12583:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "12575:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 692,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12575:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12523:72:1"
									},
									"returnParameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12613:0:1"
									},
									"scope": 698,
									"src": "12495:120:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 699,
							"src": "1403:11214:1",
							"usedErrors": []
						}
					],
					"src": "105:12513:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							776
						]
					},
					"id": 777,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 700,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 701,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 776,
							"linearizedBaseContracts": [
								776
							],
							"name": "IERC20",
							"nameLocation": "212:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 702,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 710,
									"name": "Transfer",
									"nameLocation": "394:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 709,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 704,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "403:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 703,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 706,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "425:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 705,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 708,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "445:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 707,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:2"
									},
									"src": "388:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 711,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 719,
									"name": "Approval",
									"nameLocation": "625:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 713,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "634:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 712,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 715,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "657:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 714,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 717,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "682:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 716,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:2"
									},
									"src": "619:78:2"
								},
								{
									"documentation": {
										"id": 720,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 725,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:2"
									},
									"returnParameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 723,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 725,
												"src": "820:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 722,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:2"
									},
									"scope": 776,
									"src": "774:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 726,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 733,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 729,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 728,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 733,
												"src": "931:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 727,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:2"
									},
									"returnParameters": {
										"id": 732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 731,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 733,
												"src": "971:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 730,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:2"
									},
									"scope": 776,
									"src": "912:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 734,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 743,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 736,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 743,
												"src": "1211:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 735,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 738,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 743,
												"src": "1223:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 737,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:2"
									},
									"returnParameters": {
										"id": 742,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 741,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 743,
												"src": "1257:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 740,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:2"
									},
									"scope": 776,
									"src": "1193:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 744,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 753,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "1557:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 745,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 748,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "1572:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 747,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:2"
									},
									"returnParameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 751,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "1612:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:2"
									},
									"scope": 776,
									"src": "1538:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 754,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 763,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "2291:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 755,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 758,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "2308:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 757,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:2"
									},
									"returnParameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "2342:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 760,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:2"
									},
									"scope": 776,
									"src": "2274:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 764,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 775,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 766,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "2677:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 765,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 768,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "2699:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 767,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "2719:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 769,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:2"
									},
									"returnParameters": {
										"id": 774,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "2758:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 772,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:2"
									},
									"scope": 776,
									"src": "2646:118:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 777,
							"src": "202:2564:2",
							"usedErrors": []
						}
					],
					"src": "106:2661:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							776
						],
						"IERC20Metadata": [
							801
						]
					},
					"id": 802,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 778,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 779,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 802,
							"sourceUnit": 777,
							"src": "135:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 781,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 776,
										"src": "305:6:3"
									},
									"id": 782,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:3"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 780,
								"nodeType": "StructuredDocumentation",
								"src": "160:116:3",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 801,
							"linearizedBaseContracts": [
								801,
								776
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 783,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 788,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 784,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:3"
									},
									"returnParameters": {
										"id": 787,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 786,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 788,
												"src": "416:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 785,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:3"
									},
									"scope": 801,
									"src": "377:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 789,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:3",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 794,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 790,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:3"
									},
									"returnParameters": {
										"id": 793,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 792,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 794,
												"src": "539:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 791,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:3"
									},
									"scope": 801,
									"src": "498:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 795,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:3",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 800,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 796,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:3"
									},
									"returnParameters": {
										"id": 799,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 798,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "673:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 797,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:3"
									},
									"scope": 801,
									"src": "630:50:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 802,
							"src": "277:405:3",
							"usedErrors": []
						}
					],
					"src": "110:573:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							823
						]
					},
					"id": 824,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 803,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 804,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 823,
							"linearizedBaseContracts": [
								823
							],
							"name": "Context",
							"nameLocation": "626:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 812,
										"nodeType": "Block",
										"src": "702:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 809,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 810,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 808,
												"id": 811,
												"nodeType": "Return",
												"src": "712:17:4"
											}
										]
									},
									"id": 813,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 805,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:4"
									},
									"returnParameters": {
										"id": 808,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 807,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "693:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 806,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:4"
									},
									"scope": 823,
									"src": "640:96:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 821,
										"nodeType": "Block",
										"src": "809:32:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 818,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 817,
												"id": 820,
												"nodeType": "Return",
												"src": "819:15:4"
											}
										]
									},
									"id": 822,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 814,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:4"
									},
									"returnParameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 822,
												"src": "793:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 815,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:4"
									},
									"scope": 823,
									"src": "742:99:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 824,
							"src": "608:235:4",
							"usedErrors": []
						}
					],
					"src": "86:758:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							1135
						]
					},
					"id": 1136,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 825,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 826,
								"nodeType": "StructuredDocumentation",
								"src": "285:196:5",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 1135,
							"linearizedBaseContracts": [
								1135
							],
							"name": "SafeMath",
							"nameLocation": "490:8:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 857,
										"nodeType": "Block",
										"src": "717:140:5",
										"statements": [
											{
												"id": 856,
												"nodeType": "UncheckedBlock",
												"src": "727:124:5",
												"statements": [
													{
														"assignments": [
															839
														],
														"declarations": [
															{
																"constant": false,
																"id": 839,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "759:1:5",
																"nodeType": "VariableDeclaration",
																"scope": 856,
																"src": "751:9:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 838,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "751:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 843,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 842,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 840,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 829,
																"src": "763:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 841,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 831,
																"src": "767:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "763:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "751:17:5"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 846,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 844,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 839,
																"src": "786:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 845,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 829,
																"src": "790:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "786:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 851,
														"nodeType": "IfStatement",
														"src": "782:28:5",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 847,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "801:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 848,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "808:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 849,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "800:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 837,
															"id": 850,
															"nodeType": "Return",
															"src": "793:17:5"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 852,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "832:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 853,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 839,
																	"src": "838:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 854,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "831:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 837,
														"id": 855,
														"nodeType": "Return",
														"src": "824:16:5"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 827,
										"nodeType": "StructuredDocumentation",
										"src": "505:131:5",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 858,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "650:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "665:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "657:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 828,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 831,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "676:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "668:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 830,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "656:22:5"
									},
									"returnParameters": {
										"id": 837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "702:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 833,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "702:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 836,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "708:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 835,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "708:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "701:15:5"
									},
									"scope": 1135,
									"src": "641:216:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 885,
										"nodeType": "Block",
										"src": "1078:113:5",
										"statements": [
											{
												"id": 884,
												"nodeType": "UncheckedBlock",
												"src": "1088:97:5",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 872,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 870,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 863,
																"src": "1116:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 871,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 861,
																"src": "1120:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1116:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 877,
														"nodeType": "IfStatement",
														"src": "1112:28:5",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 873,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1131:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 874,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1138:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 875,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1130:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 869,
															"id": 876,
															"nodeType": "Return",
															"src": "1123:17:5"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 878,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1162:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 881,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 879,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 861,
																		"src": "1168:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 880,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 863,
																		"src": "1172:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1168:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 882,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1161:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 869,
														"id": 883,
														"nodeType": "Return",
														"src": "1154:20:5"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 859,
										"nodeType": "StructuredDocumentation",
										"src": "863:134:5",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 886,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "1011:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 864,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 861,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1026:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "1018:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 860,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1018:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 863,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1037:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "1029:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 862,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1029:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1017:22:5"
									},
									"returnParameters": {
										"id": 869,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 866,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "1063:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 865,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1063:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "1069:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 867,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1069:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1062:15:5"
									},
									"scope": 1135,
									"src": "1002:189:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 927,
										"nodeType": "Block",
										"src": "1415:417:5",
										"statements": [
											{
												"id": 926,
												"nodeType": "UncheckedBlock",
												"src": "1425:401:5",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 900,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 898,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 889,
																"src": "1683:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 899,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1688:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1683:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 905,
														"nodeType": "IfStatement",
														"src": "1679:28:5",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 901,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1699:4:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 902,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1705:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 903,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1698:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 897,
															"id": 904,
															"nodeType": "Return",
															"src": "1691:16:5"
														}
													},
													{
														"assignments": [
															907
														],
														"declarations": [
															{
																"constant": false,
																"id": 907,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1729:1:5",
																"nodeType": "VariableDeclaration",
																"scope": 926,
																"src": "1721:9:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 906,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1721:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 911,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 910,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 908,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 889,
																"src": "1733:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 909,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 891,
																"src": "1737:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1733:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1721:17:5"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 916,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 914,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 912,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 907,
																	"src": "1756:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 913,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 889,
																	"src": "1760:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1756:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 915,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 891,
																"src": "1765:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1756:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 921,
														"nodeType": "IfStatement",
														"src": "1752:33:5",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 917,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1776:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 918,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1783:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 919,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1775:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 897,
															"id": 920,
															"nodeType": "Return",
															"src": "1768:17:5"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 922,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1807:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 923,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 907,
																	"src": "1813:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 924,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1806:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 897,
														"id": 925,
														"nodeType": "Return",
														"src": "1799:16:5"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 887,
										"nodeType": "StructuredDocumentation",
										"src": "1197:137:5",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 928,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1348:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1363:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "1355:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 888,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1355:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1374:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "1366:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1366:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1354:22:5"
									},
									"returnParameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "1400:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 893,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1400:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "1406:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 895,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1406:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1399:15:5"
									},
									"scope": 1135,
									"src": "1339:493:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 955,
										"nodeType": "Block",
										"src": "2057:114:5",
										"statements": [
											{
												"id": 954,
												"nodeType": "UncheckedBlock",
												"src": "2067:98:5",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 942,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 940,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 933,
																"src": "2095:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 941,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2100:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2095:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 947,
														"nodeType": "IfStatement",
														"src": "2091:29:5",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 943,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2111:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 944,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2118:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 945,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2110:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 939,
															"id": 946,
															"nodeType": "Return",
															"src": "2103:17:5"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 948,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2142:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 951,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 949,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 931,
																		"src": "2148:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 950,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 933,
																		"src": "2152:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2148:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 952,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2141:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 939,
														"id": 953,
														"nodeType": "Return",
														"src": "2134:20:5"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 929,
										"nodeType": "StructuredDocumentation",
										"src": "1838:138:5",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 956,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1990:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2005:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "1997:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1997:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2016:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "2008:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 932,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1996:22:5"
									},
									"returnParameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "2042:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 935,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2042:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "2048:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 937,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2048:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2041:15:5"
									},
									"scope": 1135,
									"src": "1981:190:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 983,
										"nodeType": "Block",
										"src": "2406:114:5",
										"statements": [
											{
												"id": 982,
												"nodeType": "UncheckedBlock",
												"src": "2416:98:5",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 970,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 968,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 961,
																"src": "2444:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 969,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2449:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2444:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 975,
														"nodeType": "IfStatement",
														"src": "2440:29:5",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 971,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2460:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 972,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2467:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 973,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2459:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 967,
															"id": 974,
															"nodeType": "Return",
															"src": "2452:17:5"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 976,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2491:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 979,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 977,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 959,
																		"src": "2497:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 978,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 961,
																		"src": "2501:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2497:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 980,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2490:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 967,
														"id": 981,
														"nodeType": "Return",
														"src": "2483:20:5"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 957,
										"nodeType": "StructuredDocumentation",
										"src": "2177:148:5",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 984,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2339:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 962,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 959,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2354:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "2346:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 958,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2346:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 961,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2365:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "2357:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 960,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2357:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2345:22:5"
									},
									"returnParameters": {
										"id": 967,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 964,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "2391:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 963,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2391:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 966,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "2397:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 965,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2397:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2390:15:5"
									},
									"scope": 1135,
									"src": "2330:190:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 998,
										"nodeType": "Block",
										"src": "2822:29:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 996,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 994,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 987,
														"src": "2839:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 995,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 989,
														"src": "2843:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2839:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 993,
												"id": 997,
												"nodeType": "Return",
												"src": "2832:12:5"
											}
										]
									},
									"documentation": {
										"id": 985,
										"nodeType": "StructuredDocumentation",
										"src": "2526:224:5",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 999,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "2764:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2776:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "2768:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 986,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2787:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "2779:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 988,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2779:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2767:22:5"
									},
									"returnParameters": {
										"id": 993,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 992,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "2813:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 991,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2813:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2812:9:5"
									},
									"scope": 1135,
									"src": "2755:96:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1013,
										"nodeType": "Block",
										"src": "3189:29:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1011,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1009,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1002,
														"src": "3206:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1010,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1004,
														"src": "3210:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3206:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1008,
												"id": 1012,
												"nodeType": "Return",
												"src": "3199:12:5"
											}
										]
									},
									"documentation": {
										"id": 1000,
										"nodeType": "StructuredDocumentation",
										"src": "2857:260:5",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1014,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "3131:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1005,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3143:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "3135:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1001,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3135:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1004,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3154:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "3146:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1003,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3146:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3134:22:5"
									},
									"returnParameters": {
										"id": 1008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "3180:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1006,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3180:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3179:9:5"
									},
									"scope": 1135,
									"src": "3122:96:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1028,
										"nodeType": "Block",
										"src": "3532:29:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1026,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1024,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1017,
														"src": "3549:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1025,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1019,
														"src": "3553:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3549:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1023,
												"id": 1027,
												"nodeType": "Return",
												"src": "3542:12:5"
											}
										]
									},
									"documentation": {
										"id": 1015,
										"nodeType": "StructuredDocumentation",
										"src": "3224:236:5",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 1029,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nameLocation": "3474:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1017,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3486:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "3478:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1016,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3478:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3497:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "3489:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1018,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3489:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3477:22:5"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "3523:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1021,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3523:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3522:9:5"
									},
									"scope": 1135,
									"src": "3465:96:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1043,
										"nodeType": "Block",
										"src": "3917:29:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1041,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1039,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1032,
														"src": "3934:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1040,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1034,
														"src": "3938:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3934:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1038,
												"id": 1042,
												"nodeType": "Return",
												"src": "3927:12:5"
											}
										]
									},
									"documentation": {
										"id": 1030,
										"nodeType": "StructuredDocumentation",
										"src": "3567:278:5",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1044,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "3859:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1035,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1032,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3871:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1044,
												"src": "3863:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1031,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3863:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1034,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3882:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1044,
												"src": "3874:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1033,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3874:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3862:22:5"
									},
									"returnParameters": {
										"id": 1038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1044,
												"src": "3908:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3908:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3907:9:5"
									},
									"scope": 1135,
									"src": "3850:96:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1058,
										"nodeType": "Block",
										"src": "4466:29:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1056,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1054,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1047,
														"src": "4483:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 1055,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1049,
														"src": "4487:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4483:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1053,
												"id": 1057,
												"nodeType": "Return",
												"src": "4476:12:5"
											}
										]
									},
									"documentation": {
										"id": 1045,
										"nodeType": "StructuredDocumentation",
										"src": "3952:442:5",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1059,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "4408:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1047,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4420:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "4412:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1046,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4412:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1049,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4431:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "4423:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1048,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4423:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4411:22:5"
									},
									"returnParameters": {
										"id": 1053,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1052,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "4457:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1051,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4457:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:9:5"
									},
									"scope": 1135,
									"src": "4399:96:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1083,
										"nodeType": "Block",
										"src": "5084:106:5",
										"statements": [
											{
												"id": 1082,
												"nodeType": "UncheckedBlock",
												"src": "5094:90:5",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1074,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1072,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1064,
																		"src": "5126:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 1073,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1062,
																		"src": "5131:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5126:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1075,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1066,
																	"src": "5134:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1071,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5118:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1076,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5118:29:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1077,
														"nodeType": "ExpressionStatement",
														"src": "5118:29:5"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1080,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1078,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1062,
																"src": "5168:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1079,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1064,
																"src": "5172:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5168:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1070,
														"id": 1081,
														"nodeType": "Return",
														"src": "5161:12:5"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1060,
										"nodeType": "StructuredDocumentation",
										"src": "4501:453:5",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1084,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "4968:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1067,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1062,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4989:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1084,
												"src": "4981:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1061,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4981:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1064,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5008:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1084,
												"src": "5000:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1063,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1066,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5033:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1084,
												"src": "5019:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1065,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5019:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4971:80:5"
									},
									"returnParameters": {
										"id": 1070,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1069,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1084,
												"src": "5075:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1068,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5074:9:5"
									},
									"scope": 1135,
									"src": "4959:231:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1108,
										"nodeType": "Block",
										"src": "5799:105:5",
										"statements": [
											{
												"id": 1107,
												"nodeType": "UncheckedBlock",
												"src": "5809:89:5",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1099,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1097,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1089,
																		"src": "5841:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1098,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5845:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5841:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1100,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1091,
																	"src": "5848:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1096,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5833:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1101,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5833:28:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1102,
														"nodeType": "ExpressionStatement",
														"src": "5833:28:5"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1105,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1103,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1087,
																"src": "5882:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1104,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1089,
																"src": "5886:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5882:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1095,
														"id": 1106,
														"nodeType": "Return",
														"src": "5875:12:5"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1085,
										"nodeType": "StructuredDocumentation",
										"src": "5196:473:5",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1109,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "5683:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1092,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1087,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "5704:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1109,
												"src": "5696:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1086,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5696:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1089,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5723:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1109,
												"src": "5715:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1088,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5715:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1091,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5748:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1109,
												"src": "5734:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1090,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5734:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5686:80:5"
									},
									"returnParameters": {
										"id": 1095,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1094,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1109,
												"src": "5790:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1093,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5790:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5789:9:5"
									},
									"scope": 1135,
									"src": "5674:230:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1133,
										"nodeType": "Block",
										"src": "6675:105:5",
										"statements": [
											{
												"id": 1132,
												"nodeType": "UncheckedBlock",
												"src": "6685:89:5",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1124,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1122,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1114,
																		"src": "6717:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1123,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6721:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6717:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1125,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1116,
																	"src": "6724:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1121,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6709:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1126,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6709:28:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1127,
														"nodeType": "ExpressionStatement",
														"src": "6709:28:5"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1130,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1128,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1112,
																"src": "6758:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 1129,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1114,
																"src": "6762:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6758:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1120,
														"id": 1131,
														"nodeType": "Return",
														"src": "6751:12:5"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1110,
										"nodeType": "StructuredDocumentation",
										"src": "5910:635:5",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1134,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "6559:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1112,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6580:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "6572:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1111,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6572:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "6599:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "6591:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6591:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6624:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "6610:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1115,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6610:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6562:80:5"
									},
									"returnParameters": {
										"id": 1120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "6666:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6666:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6665:9:5"
									},
									"scope": 1135,
									"src": "6550:230:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1136,
							"src": "482:6300:5",
							"usedErrors": []
						}
					],
					"src": "107:6676:5"
				},
				"id": 5
			},
			"contracts/Crowdsale.sol": {
				"ast": {
					"absolutePath": "contracts/Crowdsale.sol",
					"exportedSymbols": {
						"Context": [
							823
						],
						"Crowdsale": [
							1390
						],
						"ERC20": [
							698
						],
						"IERC20": [
							776
						],
						"IERC20Metadata": [
							801
						],
						"SafeMath": [
							1135
						]
					},
					"id": 1391,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1137,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 1138,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1391,
							"sourceUnit": 699,
							"src": "99:55:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"id": 1139,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1391,
							"sourceUnit": 1136,
							"src": "155:57:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1140,
								"nodeType": "StructuredDocumentation",
								"src": "390:695:6",
								"text": " @title Crowdsale\n @dev Crowdsale is a base contract for managing a token crowdsale,\n allowing investors to purchase tokens with ether. This contract implements\n such functionality in its most fundamental form and can be extended to provide additional\n functionality and/or custom behavior.\n The external interface represents the basic interface for purchasing tokens, and conform\n the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n the methods to add functionality. Consider using 'super' where appropiate to concatenate\n behavior."
							},
							"fullyImplemented": true,
							"id": 1390,
							"linearizedBaseContracts": [
								1390
							],
							"name": "Crowdsale",
							"nameLocation": "1095:9:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1143,
									"libraryName": {
										"id": 1141,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1135,
										"src": "1115:8:6"
									},
									"nodeType": "UsingForDirective",
									"src": "1109:27:6",
									"typeName": {
										"id": 1142,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1128:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "fc0c546a",
									"id": 1146,
									"mutability": "mutable",
									"name": "token",
									"nameLocation": "1179:5:6",
									"nodeType": "VariableDeclaration",
									"scope": 1390,
									"src": "1166:18:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_ERC20_$698",
										"typeString": "contract ERC20"
									},
									"typeName": {
										"id": 1145,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1144,
											"name": "ERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 698,
											"src": "1166:5:6"
										},
										"referencedDeclaration": 698,
										"src": "1166:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ERC20_$698",
											"typeString": "contract ERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "521eb273",
									"id": 1148,
									"mutability": "mutable",
									"name": "wallet",
									"nameLocation": "1243:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 1390,
									"src": "1228:21:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1147,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1228:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2c4e722e",
									"id": 1150,
									"mutability": "mutable",
									"name": "rate",
									"nameLocation": "1316:4:6",
									"nodeType": "VariableDeclaration",
									"scope": 1390,
									"src": "1301:19:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1149,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1301:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "4042b66f",
									"id": 1152,
									"mutability": "mutable",
									"name": "weiRaised",
									"nameLocation": "1366:9:6",
									"nodeType": "VariableDeclaration",
									"scope": 1390,
									"src": "1351:24:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1151,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1351:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1153,
										"nodeType": "StructuredDocumentation",
										"src": "1380:223:6",
										"text": " Event for token purchase logging\n @param purchaser who paid for the tokens\n @param beneficiary who got the tokens\n @param value weis paid for purchase\n @param amount amount of tokens purchased"
									},
									"id": 1163,
									"name": "TokenPurchase",
									"nameLocation": "1612:13:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1155,
												"indexed": true,
												"mutability": "mutable",
												"name": "purchaser",
												"nameLocation": "1647:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "1631:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1154,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1631:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1157,
												"indexed": true,
												"mutability": "mutable",
												"name": "beneficiary",
												"nameLocation": "1678:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "1662:27:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1156,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1662:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1159,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1703:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "1695:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1695:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1161,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1722:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "1714:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1714:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1625:107:6"
									},
									"src": "1606:127:6"
								},
								{
									"body": {
										"id": 1213,
										"nodeType": "Block",
										"src": "1990:170:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1177,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1175,
																"name": "_rate",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1166,
																"src": "2004:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1176,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2012:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2004:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1174,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1996:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1996:18:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1179,
												"nodeType": "ExpressionStatement",
												"src": "1996:18:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1186,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1181,
																"name": "_wallet",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1168,
																"src": "2028:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1184,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2047:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1183,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2039:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1182,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2039:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1185,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2039:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2028:21:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1180,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2020:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2020:30:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1188,
												"nodeType": "ExpressionStatement",
												"src": "2020:30:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1198,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1192,
																		"name": "_token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1171,
																		"src": "2072:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ERC20_$698",
																			"typeString": "contract ERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_ERC20_$698",
																			"typeString": "contract ERC20"
																		}
																	],
																	"id": 1191,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2064:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1190,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2064:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1193,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2064:15:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2091:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1195,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2083:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1194,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2083:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1197,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2083:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2064:29:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1189,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2056:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2056:38:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1200,
												"nodeType": "ExpressionStatement",
												"src": "2056:38:6"
											},
											{
												"expression": {
													"id": 1203,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1201,
														"name": "rate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1150,
														"src": "2101:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1202,
														"name": "_rate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1166,
														"src": "2108:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2101:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1204,
												"nodeType": "ExpressionStatement",
												"src": "2101:12:6"
											},
											{
												"expression": {
													"id": 1207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1205,
														"name": "wallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1148,
														"src": "2119:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1206,
														"name": "_wallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1168,
														"src": "2128:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2119:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1208,
												"nodeType": "ExpressionStatement",
												"src": "2119:16:6"
											},
											{
												"expression": {
													"id": 1211,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1209,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1146,
														"src": "2141:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$698",
															"typeString": "contract ERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1210,
														"name": "_token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1171,
														"src": "2149:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$698",
															"typeString": "contract ERC20"
														}
													},
													"src": "2141:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$698",
														"typeString": "contract ERC20"
													}
												},
												"id": 1212,
												"nodeType": "ExpressionStatement",
												"src": "2141:14:6"
											}
										]
									},
									"documentation": {
										"id": 1164,
										"nodeType": "StructuredDocumentation",
										"src": "1737:192:6",
										"text": " @param _rate Number of token units a buyer gets per wei\n @param _wallet Address where collected funds will be forwarded to\n @param _token Address of the token being sold"
									},
									"id": 1214,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1166,
												"mutability": "mutable",
												"name": "_rate",
												"nameLocation": "1952:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1214,
												"src": "1944:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1944:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1168,
												"mutability": "mutable",
												"name": "_wallet",
												"nameLocation": "1967:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1214,
												"src": "1959:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1167,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1959:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "1982:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1214,
												"src": "1976:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$698",
													"typeString": "contract ERC20"
												},
												"typeName": {
													"id": 1170,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1169,
														"name": "ERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 698,
														"src": "1976:5:6"
													},
													"referencedDeclaration": 698,
													"src": "1976:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$698",
														"typeString": "contract ERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1943:46:6"
									},
									"returnParameters": {
										"id": 1173,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1990:0:6"
									},
									"scope": 1390,
									"src": "1932:228:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1223,
										"nodeType": "Block",
										"src": "2384:32:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1219,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2400:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1220,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2400:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1218,
														"name": "buyTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1289,
														"src": "2390:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2390:21:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1222,
												"nodeType": "ExpressionStatement",
												"src": "2390:21:6"
											}
										]
									},
									"documentation": {
										"id": 1215,
										"nodeType": "StructuredDocumentation",
										"src": "2293:59:6",
										"text": " @dev fallback function ***DO NOT OVERRIDE***"
									},
									"id": 1224,
									"implemented": true,
									"kind": "fallback",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1216,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:6"
									},
									"returnParameters": {
										"id": 1217,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2384:0:6"
									},
									"scope": 1390,
									"src": "2355:61:6",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1232,
										"nodeType": "Block",
										"src": "2448:34:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1228,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2466:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1229,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2466:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1227,
														"name": "buyTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1289,
														"src": "2456:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2456:21:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1231,
												"nodeType": "ExpressionStatement",
												"src": "2456:21:6"
											}
										]
									},
									"id": 1233,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1225,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2428:2:6"
									},
									"returnParameters": {
										"id": 1226,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2448:0:6"
									},
									"scope": 1390,
									"src": "2420:62:6",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1288,
										"nodeType": "Block",
										"src": "2674:521:6",
										"statements": [
											{
												"assignments": [
													1240
												],
												"declarations": [
													{
														"constant": false,
														"id": 1240,
														"mutability": "mutable",
														"name": "weiAmount",
														"nameLocation": "2689:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 1288,
														"src": "2681:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1239,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2681:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1243,
												"initialValue": {
													"expression": {
														"id": 1241,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "2701:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1242,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "value",
													"nodeType": "MemberAccess",
													"src": "2701:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2681:29:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1245,
															"name": "_beneficiary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1236,
															"src": "2737:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1246,
															"name": "weiAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1240,
															"src": "2751:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1244,
														"name": "_preValidatePurchase",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1313,
														"src": "2716:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256) pure"
														}
													},
													"id": 1247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2716:45:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1248,
												"nodeType": "ExpressionStatement",
												"src": "2716:45:6"
											},
											{
												"assignments": [
													1250
												],
												"declarations": [
													{
														"constant": false,
														"id": 1250,
														"mutability": "mutable",
														"name": "tokens",
														"nameLocation": "2820:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1288,
														"src": "2812:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1249,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2812:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1254,
												"initialValue": {
													"arguments": [
														{
															"id": 1252,
															"name": "weiAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1240,
															"src": "2845:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1251,
														"name": "_getTokenAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1375,
														"src": "2829:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2829:26:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2812:43:6"
											},
											{
												"expression": {
													"id": 1260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1255,
														"name": "weiRaised",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1152,
														"src": "2882:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1258,
																"name": "weiAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1240,
																"src": "2908:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1256,
																"name": "weiRaised",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1152,
																"src": "2894:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1257,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 999,
															"src": "2894:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1259,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2894:24:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2882:36:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1261,
												"nodeType": "ExpressionStatement",
												"src": "2882:36:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1263,
															"name": "_beneficiary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1236,
															"src": "2942:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1264,
															"name": "tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1250,
															"src": "2956:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1262,
														"name": "_processPurchase",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1352,
														"src": "2925:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1265,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2925:38:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1266,
												"nodeType": "ExpressionStatement",
												"src": "2925:38:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1268,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2995:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1269,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2995:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1270,
															"name": "_beneficiary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1236,
															"src": "3013:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1271,
															"name": "weiAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1240,
															"src": "3033:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1272,
															"name": "tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1250,
															"src": "3050:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1267,
														"name": "TokenPurchase",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1163,
														"src": "2974:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1273,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2974:88:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1274,
												"nodeType": "EmitStatement",
												"src": "2969:93:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1276,
															"name": "_beneficiary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1236,
															"src": "3092:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1277,
															"name": "weiAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1240,
															"src": "3106:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1275,
														"name": "_updatePurchasingState",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1361,
														"src": "3069:22:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3069:47:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1279,
												"nodeType": "ExpressionStatement",
												"src": "3069:47:6"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1280,
														"name": "_forwardFunds",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1389,
														"src": "3123:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3123:15:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1282,
												"nodeType": "ExpressionStatement",
												"src": "3123:15:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1284,
															"name": "_beneficiary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1236,
															"src": "3166:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1285,
															"name": "weiAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1240,
															"src": "3180:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1283,
														"name": "_postValidatePurchase",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1322,
														"src": "3144:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3144:46:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1287,
												"nodeType": "ExpressionStatement",
												"src": "3144:46:6"
											}
										]
									},
									"documentation": {
										"id": 1234,
										"nodeType": "StructuredDocumentation",
										"src": "2486:129:6",
										"text": " @dev low level token purchase ***DO NOT OVERRIDE***\n @param _beneficiary Address performing the token purchase"
									},
									"functionSelector": "ec8ac4d8",
									"id": 1289,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "buyTokens",
									"nameLocation": "2627:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1236,
												"mutability": "mutable",
												"name": "_beneficiary",
												"nameLocation": "2645:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1289,
												"src": "2637:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2637:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2636:22:6"
									},
									"returnParameters": {
										"id": 1238,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2674:0:6"
									},
									"scope": 1390,
									"src": "2618:577:6",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1312,
										"nodeType": "Block",
										"src": "3727:76:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1303,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1298,
																"name": "_beneficiary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1292,
																"src": "3741:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1301,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3765:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1300,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3757:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1299,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3757:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1302,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3757:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3741:26:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1297,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3733:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1304,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3733:35:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1305,
												"nodeType": "ExpressionStatement",
												"src": "3733:35:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1309,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1307,
																"name": "_weiAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1294,
																"src": "3782:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 1308,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3796:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3782:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1306,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3774:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3774:24:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1311,
												"nodeType": "ExpressionStatement",
												"src": "3774:24:6"
											}
										]
									},
									"documentation": {
										"id": 1290,
										"nodeType": "StructuredDocumentation",
										"src": "3331:285:6",
										"text": " @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n @param _beneficiary Address performing the token purchase\n @param _weiAmount Value in wei involved in the purchase"
									},
									"id": 1313,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_preValidatePurchase",
									"nameLocation": "3628:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1292,
												"mutability": "mutable",
												"name": "_beneficiary",
												"nameLocation": "3662:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1313,
												"src": "3654:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3654:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1294,
												"mutability": "mutable",
												"name": "_weiAmount",
												"nameLocation": "3688:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1313,
												"src": "3680:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3680:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3648:54:6"
									},
									"returnParameters": {
										"id": 1296,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3727:0:6"
									},
									"scope": 1390,
									"src": "3619:184:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1321,
										"nodeType": "Block",
										"src": "4181:30:6",
										"statements": []
									},
									"documentation": {
										"id": 1314,
										"nodeType": "StructuredDocumentation",
										"src": "3807:271:6",
										"text": " @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n @param _beneficiary Address performing the token purchase\n @param _weiAmount Value in wei involved in the purchase"
									},
									"id": 1322,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_postValidatePurchase",
									"nameLocation": "4090:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1316,
												"mutability": "mutable",
												"name": "_beneficiary",
												"nameLocation": "4125:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1322,
												"src": "4117:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4117:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1318,
												"mutability": "mutable",
												"name": "_weiAmount",
												"nameLocation": "4151:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1322,
												"src": "4143:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4143:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4111:54:6"
									},
									"returnParameters": {
										"id": 1320,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4181:0:6"
									},
									"scope": 1390,
									"src": "4081:130:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1337,
										"nodeType": "Block",
										"src": "4581:53:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1333,
															"name": "_beneficiary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1325,
															"src": "4602:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1334,
															"name": "_tokenAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1327,
															"src": "4616:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1330,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1146,
															"src": "4587:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ERC20_$698",
																"typeString": "contract ERC20"
															}
														},
														"id": 1332,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 236,
														"src": "4587:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 1335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4587:42:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1336,
												"nodeType": "ExpressionStatement",
												"src": "4587:42:6"
											}
										]
									},
									"documentation": {
										"id": 1323,
										"nodeType": "StructuredDocumentation",
										"src": "4215:256:6",
										"text": " @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n @param _beneficiary Address performing the token purchase\n @param _tokenAmount Number of tokens to be emitted"
									},
									"id": 1338,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_deliverTokens",
									"nameLocation": "4483:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1325,
												"mutability": "mutable",
												"name": "_beneficiary",
												"nameLocation": "4511:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1338,
												"src": "4503:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1324,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4503:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1327,
												"mutability": "mutable",
												"name": "_tokenAmount",
												"nameLocation": "4537:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1338,
												"src": "4529:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1326,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4529:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4497:56:6"
									},
									"returnParameters": {
										"id": 1329,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4581:0:6"
									},
									"scope": 1390,
									"src": "4474:160:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1351,
										"nodeType": "Block",
										"src": "4978:53:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1347,
															"name": "_beneficiary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1341,
															"src": "4999:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1348,
															"name": "_tokenAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1343,
															"src": "5013:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1346,
														"name": "_deliverTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1338,
														"src": "4984:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4984:42:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1350,
												"nodeType": "ExpressionStatement",
												"src": "4984:42:6"
											}
										]
									},
									"documentation": {
										"id": 1339,
										"nodeType": "StructuredDocumentation",
										"src": "4638:240:6",
										"text": " @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n @param _beneficiary Address receiving the tokens\n @param _tokenAmount Number of tokens to be purchased"
									},
									"id": 1352,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_processPurchase",
									"nameLocation": "4890:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1341,
												"mutability": "mutable",
												"name": "_beneficiary",
												"nameLocation": "4920:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1352,
												"src": "4912:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1340,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4912:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1343,
												"mutability": "mutable",
												"name": "_tokenAmount",
												"nameLocation": "4946:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1352,
												"src": "4938:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1342,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4938:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4906:56:6"
									},
									"returnParameters": {
										"id": 1345,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4978:0:6"
									},
									"scope": 1390,
									"src": "4881:150:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1360,
										"nodeType": "Block",
										"src": "5385:30:6",
										"statements": []
									},
									"documentation": {
										"id": 1353,
										"nodeType": "StructuredDocumentation",
										"src": "5035:246:6",
										"text": " @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n @param _beneficiary Address receiving the tokens\n @param _weiAmount Value in wei involved in the purchase"
									},
									"id": 1361,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_updatePurchasingState",
									"nameLocation": "5293:22:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1355,
												"mutability": "mutable",
												"name": "_beneficiary",
												"nameLocation": "5329:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "5321:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1354,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5321:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1357,
												"mutability": "mutable",
												"name": "_weiAmount",
												"nameLocation": "5355:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "5347:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1356,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5347:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5315:54:6"
									},
									"returnParameters": {
										"id": 1359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5385:0:6"
									},
									"scope": 1390,
									"src": "5284:131:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1374,
										"nodeType": "Block",
										"src": "5736:38:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1371,
															"name": "rate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1150,
															"src": "5764:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1369,
															"name": "_weiAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1364,
															"src": "5749:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1370,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mul",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1029,
														"src": "5749:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1372,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5749:20:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1368,
												"id": 1373,
												"nodeType": "Return",
												"src": "5742:27:6"
											}
										]
									},
									"documentation": {
										"id": 1362,
										"nodeType": "StructuredDocumentation",
										"src": "5419:231:6",
										"text": " @dev Override to extend the way in which ether is converted to tokens.\n @param _weiAmount Value in wei to be converted into tokens\n @return Number of tokens that can be purchased with the specified _weiAmount"
									},
									"id": 1375,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getTokenAmount",
									"nameLocation": "5662:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "_weiAmount",
												"nameLocation": "5686:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "5678:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1363,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5678:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5677:20:6"
									},
									"returnParameters": {
										"id": 1368,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1367,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "5725:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1366,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5725:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5724:9:6"
									},
									"scope": 1390,
									"src": "5653:121:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1388,
										"nodeType": "Block",
										"src": "5887:46:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1384,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5918:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "5918:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1381,
																	"name": "wallet",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1148,
																	"src": "5901:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1380,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5893:8:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 1379,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5893:8:6",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 1382,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5893:15:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 1383,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "5893:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5893:35:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1387,
												"nodeType": "ExpressionStatement",
												"src": "5893:35:6"
											}
										]
									},
									"documentation": {
										"id": 1376,
										"nodeType": "StructuredDocumentation",
										"src": "5778:72:6",
										"text": " @dev Determines how ETH is stored/forwarded on purchases."
									},
									"id": 1389,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_forwardFunds",
									"nameLocation": "5862:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1377,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5875:2:6"
									},
									"returnParameters": {
										"id": 1378,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5887:0:6"
									},
									"scope": 1390,
									"src": "5853:80:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1391,
							"src": "1086:4849:6",
							"usedErrors": []
						}
					],
					"src": "36:5899:6"
				},
				"id": 6
			},
			"contracts/CrowdsaleFactory.sol": {
				"ast": {
					"absolutePath": "contracts/CrowdsaleFactory.sol",
					"exportedSymbols": {
						"Context": [
							823
						],
						"Crowdsale": [
							1390
						],
						"CrowdsaleFactory": [
							1516
						],
						"ERC20": [
							698
						],
						"IERC20": [
							776
						],
						"IERC20Metadata": [
							801
						],
						"Ownable": [
							112
						],
						"SafeMath": [
							1135
						]
					},
					"id": 1517,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1392,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:7"
						},
						{
							"absolutePath": "contracts/Crowdsale.sol",
							"file": "./Crowdsale.sol",
							"id": 1393,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1517,
							"sourceUnit": 1391,
							"src": "61:25:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1394,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1517,
							"sourceUnit": 113,
							"src": "87:52:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1395,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "170:7:7"
									},
									"id": 1396,
									"nodeType": "InheritanceSpecifier",
									"src": "170:7:7"
								}
							],
							"contractDependencies": [
								1390
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1516,
							"linearizedBaseContracts": [
								1516,
								112,
								823
							],
							"name": "CrowdsaleFactory",
							"nameLocation": "150:16:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1398,
									"mutability": "mutable",
									"name": "numOfCrowdsale",
									"nameLocation": "193:14:7",
									"nodeType": "VariableDeclaration",
									"scope": 1516,
									"src": "188:19:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1397,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "188:4:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "CrowdsaleFactory.crowdsaleMeta",
									"id": 1408,
									"members": [
										{
											"constant": false,
											"id": 1401,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "251:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 1408,
											"src": "245:11:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_ERC20_$698",
												"typeString": "contract ERC20"
											},
											"typeName": {
												"id": 1400,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1399,
													"name": "ERC20",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 698,
													"src": "245:5:7"
												},
												"referencedDeclaration": 698,
												"src": "245:5:7",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$698",
													"typeString": "contract ERC20"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1403,
											"mutability": "mutable",
											"name": "rate",
											"nameLocation": "271:4:7",
											"nodeType": "VariableDeclaration",
											"scope": 1408,
											"src": "266:9:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1402,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "266:4:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1405,
											"mutability": "mutable",
											"name": "beneficiaryAddr",
											"nameLocation": "293:15:7",
											"nodeType": "VariableDeclaration",
											"scope": 1408,
											"src": "285:23:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1404,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "285:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1407,
											"mutability": "mutable",
											"name": "crowdsaleContractAddr",
											"nameLocation": "326:21:7",
											"nodeType": "VariableDeclaration",
											"scope": 1408,
											"src": "318:29:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1406,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "318:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "crowdsaleMeta",
									"nameLocation": "221:13:7",
									"nodeType": "StructDefinition",
									"scope": 1516,
									"src": "214:140:7",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1413,
									"mutability": "mutable",
									"name": "deployedCrowdsale",
									"nameLocation": "399:17:7",
									"nodeType": "VariableDeclaration",
									"scope": 1516,
									"src": "360:56:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_crowdsaleMeta_$1408_storage_$",
										"typeString": "mapping(uint256 => struct CrowdsaleFactory.crowdsaleMeta)"
									},
									"typeName": {
										"id": 1412,
										"keyType": {
											"id": 1409,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "368:4:7",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "360:30:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_crowdsaleMeta_$1408_storage_$",
											"typeString": "mapping(uint256 => struct CrowdsaleFactory.crowdsaleMeta)"
										},
										"valueType": {
											"id": 1411,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1410,
												"name": "crowdsaleMeta",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1408,
												"src": "376:13:7"
											},
											"referencedDeclaration": 1408,
											"src": "376:13:7",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_crowdsaleMeta_$1408_storage_ptr",
												"typeString": "struct CrowdsaleFactory.crowdsaleMeta"
											}
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 1417,
									"name": "newCrowdSaleCreatedAt",
									"nameLocation": "429:21:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1415,
												"indexed": false,
												"mutability": "mutable",
												"name": "crowdsaleContract",
												"nameLocation": "459:17:7",
												"nodeType": "VariableDeclaration",
												"scope": 1417,
												"src": "451:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1414,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "451:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "450:28:7"
									},
									"src": "423:56:7"
								},
								{
									"body": {
										"id": 1477,
										"nodeType": "Block",
										"src": "667:439:7",
										"statements": [
											{
												"assignments": [
													1428
												],
												"declarations": [
													{
														"constant": false,
														"id": 1428,
														"mutability": "mutable",
														"name": "crowdsaleId",
														"nameLocation": "682:11:7",
														"nodeType": "VariableDeclaration",
														"scope": 1477,
														"src": "677:16:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1427,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "677:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1431,
												"initialValue": {
													"id": 1430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "++",
													"prefix": false,
													"src": "696:16:7",
													"subExpression": {
														"id": 1429,
														"name": "numOfCrowdsale",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1398,
														"src": "696:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "677:35:7"
											},
											{
												"assignments": [
													1434
												],
												"declarations": [
													{
														"constant": false,
														"id": 1434,
														"mutability": "mutable",
														"name": "currentCrowdsale",
														"nameLocation": "744:16:7",
														"nodeType": "VariableDeclaration",
														"scope": 1477,
														"src": "722:38:7",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_crowdsaleMeta_$1408_storage_ptr",
															"typeString": "struct CrowdsaleFactory.crowdsaleMeta"
														},
														"typeName": {
															"id": 1433,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1432,
																"name": "crowdsaleMeta",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1408,
																"src": "722:13:7"
															},
															"referencedDeclaration": 1408,
															"src": "722:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_crowdsaleMeta_$1408_storage_ptr",
																"typeString": "struct CrowdsaleFactory.crowdsaleMeta"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1438,
												"initialValue": {
													"baseExpression": {
														"id": 1435,
														"name": "deployedCrowdsale",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1413,
														"src": "763:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_crowdsaleMeta_$1408_storage_$",
															"typeString": "mapping(uint256 => struct CrowdsaleFactory.crowdsaleMeta storage ref)"
														}
													},
													"id": 1437,
													"indexExpression": {
														"id": 1436,
														"name": "crowdsaleId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1428,
														"src": "781:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "763:30:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_crowdsaleMeta_$1408_storage",
														"typeString": "struct CrowdsaleFactory.crowdsaleMeta storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "722:71:7"
											},
											{
												"expression": {
													"id": 1443,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1439,
															"name": "currentCrowdsale",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1434,
															"src": "803:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_crowdsaleMeta_$1408_storage_ptr",
																"typeString": "struct CrowdsaleFactory.crowdsaleMeta storage pointer"
															}
														},
														"id": 1441,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "token",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1401,
														"src": "803:22:7",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$698",
															"typeString": "contract ERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1442,
														"name": "_token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1424,
														"src": "828:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$698",
															"typeString": "contract ERC20"
														}
													},
													"src": "803:31:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$698",
														"typeString": "contract ERC20"
													}
												},
												"id": 1444,
												"nodeType": "ExpressionStatement",
												"src": "803:31:7"
											},
											{
												"expression": {
													"id": 1449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1445,
															"name": "currentCrowdsale",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1434,
															"src": "844:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_crowdsaleMeta_$1408_storage_ptr",
																"typeString": "struct CrowdsaleFactory.crowdsaleMeta storage pointer"
															}
														},
														"id": 1447,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "rate",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1403,
														"src": "844:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1448,
														"name": "_rate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1419,
														"src": "868:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "844:29:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1450,
												"nodeType": "ExpressionStatement",
												"src": "844:29:7"
											},
											{
												"expression": {
													"id": 1455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1451,
															"name": "currentCrowdsale",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1434,
															"src": "883:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_crowdsaleMeta_$1408_storage_ptr",
																"typeString": "struct CrowdsaleFactory.crowdsaleMeta storage pointer"
															}
														},
														"id": 1453,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "beneficiaryAddr",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1405,
														"src": "883:32:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1454,
														"name": "_wallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1421,
														"src": "918:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "883:42:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1456,
												"nodeType": "ExpressionStatement",
												"src": "883:42:7"
											},
											{
												"expression": {
													"id": 1470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1457,
															"name": "currentCrowdsale",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1434,
															"src": "935:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_crowdsaleMeta_$1408_storage_ptr",
																"typeString": "struct CrowdsaleFactory.crowdsaleMeta storage pointer"
															}
														},
														"id": 1459,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "crowdsaleContractAddr",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1407,
														"src": "935:38:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1465,
																		"name": "_rate",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1419,
																		"src": "998:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1466,
																		"name": "_wallet",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1421,
																		"src": "1005:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1467,
																		"name": "_token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1424,
																		"src": "1014:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ERC20_$698",
																			"typeString": "contract ERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_contract$_ERC20_$698",
																			"typeString": "contract ERC20"
																		}
																	],
																	"id": 1464,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "NewExpression",
																	"src": "984:13:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_creation_nonpayable$_t_uint256_$_t_address_$_t_contract$_ERC20_$698_$returns$_t_contract$_Crowdsale_$1390_$",
																		"typeString": "function (uint256,address,contract ERC20) returns (contract Crowdsale)"
																	},
																	"typeName": {
																		"id": 1463,
																		"nodeType": "UserDefinedTypeName",
																		"pathNode": {
																			"id": 1462,
																			"name": "Crowdsale",
																			"nodeType": "IdentifierPath",
																			"referencedDeclaration": 1390,
																			"src": "988:9:7"
																		},
																		"referencedDeclaration": 1390,
																		"src": "988:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Crowdsale_$1390",
																			"typeString": "contract Crowdsale"
																		}
																	}
																},
																"id": 1468,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "984:37:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Crowdsale_$1390",
																	"typeString": "contract Crowdsale"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_Crowdsale_$1390",
																	"typeString": "contract Crowdsale"
																}
															],
															"id": 1461,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "976:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1460,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "976:7:7",
																"typeDescriptions": {}
															}
														},
														"id": 1469,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "976:46:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "935:87:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1471,
												"nodeType": "ExpressionStatement",
												"src": "935:87:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1473,
																"name": "currentCrowdsale",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1434,
																"src": "1059:16:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_crowdsaleMeta_$1408_storage_ptr",
																	"typeString": "struct CrowdsaleFactory.crowdsaleMeta storage pointer"
																}
															},
															"id": 1474,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "crowdsaleContractAddr",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1407,
															"src": "1059:38:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1472,
														"name": "newCrowdSaleCreatedAt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1417,
														"src": "1037:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1475,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1037:61:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1476,
												"nodeType": "EmitStatement",
												"src": "1032:66:7"
											}
										]
									},
									"functionSelector": "ee323eca",
									"id": 1478,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createCrowdSale",
									"nameLocation": "598:15:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1419,
												"mutability": "mutable",
												"name": "_rate",
												"nameLocation": "622:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "614:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1418,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "614:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1421,
												"mutability": "mutable",
												"name": "_wallet",
												"nameLocation": "637:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "629:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1420,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1424,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "652:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "646:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$698",
													"typeString": "contract ERC20"
												},
												"typeName": {
													"id": 1423,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1422,
														"name": "ERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 698,
														"src": "646:5:7"
													},
													"referencedDeclaration": 698,
													"src": "646:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$698",
														"typeString": "contract ERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "613:46:7"
									},
									"returnParameters": {
										"id": 1426,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "667:0:7"
									},
									"scope": 1516,
									"src": "589:517:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1514,
										"nodeType": "Block",
										"src": "1197:232:7",
										"statements": [
											{
												"expression": {
													"id": 1492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1485,
														"name": "props",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1483,
														"src": "1243:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_crowdsaleMeta_$1408_memory_ptr_$dyn_memory_ptr",
															"typeString": "struct CrowdsaleFactory.crowdsaleMeta memory[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1490,
																"name": "numOfCrowdsale",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1398,
																"src": "1271:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "NewExpression",
															"src": "1251:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_crowdsaleMeta_$1408_memory_ptr_$dyn_memory_ptr_$",
																"typeString": "function (uint256) pure returns (struct CrowdsaleFactory.crowdsaleMeta memory[] memory)"
															},
															"typeName": {
																"baseType": {
																	"id": 1487,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 1486,
																		"name": "crowdsaleMeta",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 1408,
																		"src": "1255:13:7"
																	},
																	"referencedDeclaration": 1408,
																	"src": "1255:13:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_crowdsaleMeta_$1408_storage_ptr",
																		"typeString": "struct CrowdsaleFactory.crowdsaleMeta"
																	}
																},
																"id": 1488,
																"nodeType": "ArrayTypeName",
																"src": "1255:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_struct$_crowdsaleMeta_$1408_storage_$dyn_storage_ptr",
																	"typeString": "struct CrowdsaleFactory.crowdsaleMeta[]"
																}
															}
														},
														"id": 1491,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1251:35:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_crowdsaleMeta_$1408_memory_ptr_$dyn_memory_ptr",
															"typeString": "struct CrowdsaleFactory.crowdsaleMeta memory[] memory"
														}
													},
													"src": "1243:43:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_crowdsaleMeta_$1408_memory_ptr_$dyn_memory_ptr",
														"typeString": "struct CrowdsaleFactory.crowdsaleMeta memory[] memory"
													}
												},
												"id": 1493,
												"nodeType": "ExpressionStatement",
												"src": "1243:43:7"
											},
											{
												"body": {
													"id": 1512,
													"nodeType": "Block",
													"src": "1359:64:7",
													"statements": [
														{
															"expression": {
																"id": 1510,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1504,
																		"name": "props",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1483,
																		"src": "1373:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_crowdsaleMeta_$1408_memory_ptr_$dyn_memory_ptr",
																			"typeString": "struct CrowdsaleFactory.crowdsaleMeta memory[] memory"
																		}
																	},
																	"id": 1506,
																	"indexExpression": {
																		"id": 1505,
																		"name": "index",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1495,
																		"src": "1379:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1373:12:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_crowdsaleMeta_$1408_memory_ptr",
																		"typeString": "struct CrowdsaleFactory.crowdsaleMeta memory"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1507,
																		"name": "deployedCrowdsale",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1413,
																		"src": "1388:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_crowdsaleMeta_$1408_storage_$",
																			"typeString": "mapping(uint256 => struct CrowdsaleFactory.crowdsaleMeta storage ref)"
																		}
																	},
																	"id": 1509,
																	"indexExpression": {
																		"id": 1508,
																		"name": "index",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1495,
																		"src": "1406:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1388:24:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_crowdsaleMeta_$1408_storage",
																		"typeString": "struct CrowdsaleFactory.crowdsaleMeta storage ref"
																	}
																},
																"src": "1373:39:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_crowdsaleMeta_$1408_memory_ptr",
																	"typeString": "struct CrowdsaleFactory.crowdsaleMeta memory"
																}
															},
															"id": 1511,
															"nodeType": "ExpressionStatement",
															"src": "1373:39:7"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1498,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1495,
														"src": "1328:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1499,
														"name": "numOfCrowdsale",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1398,
														"src": "1335:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1328:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1513,
												"initializationExpression": {
													"assignments": [
														1495
													],
													"declarations": [
														{
															"constant": false,
															"id": 1495,
															"mutability": "mutable",
															"name": "index",
															"nameLocation": "1318:5:7",
															"nodeType": "VariableDeclaration",
															"scope": 1513,
															"src": "1310:13:7",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1494,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1310:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1497,
													"initialValue": {
														"hexValue": "30",
														"id": 1496,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1325:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1310:16:7"
												},
												"loopExpression": {
													"expression": {
														"id": 1502,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1351:7:7",
														"subExpression": {
															"id": 1501,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1495,
															"src": "1351:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1503,
													"nodeType": "ExpressionStatement",
													"src": "1351:7:7"
												},
												"nodeType": "ForStatement",
												"src": "1305:118:7"
											}
										]
									},
									"functionSelector": "f0e24a40",
									"id": 1515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAllDeployedProjects",
									"nameLocation": "1121:22:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1479,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1144:2:7"
									},
									"returnParameters": {
										"id": 1484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1483,
												"mutability": "mutable",
												"name": "props",
												"nameLocation": "1191:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1515,
												"src": "1168:28:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_crowdsaleMeta_$1408_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct CrowdsaleFactory.crowdsaleMeta[]"
												},
												"typeName": {
													"baseType": {
														"id": 1481,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1480,
															"name": "crowdsaleMeta",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1408,
															"src": "1168:13:7"
														},
														"referencedDeclaration": 1408,
														"src": "1168:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_crowdsaleMeta_$1408_storage_ptr",
															"typeString": "struct CrowdsaleFactory.crowdsaleMeta"
														}
													},
													"id": 1482,
													"nodeType": "ArrayTypeName",
													"src": "1168:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_crowdsaleMeta_$1408_storage_$dyn_storage_ptr",
														"typeString": "struct CrowdsaleFactory.crowdsaleMeta[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1167:30:7"
									},
									"scope": 1516,
									"src": "1112:317:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1517,
							"src": "141:1291:7",
							"usedErrors": []
						}
					],
					"src": "36:1397:7"
				},
				"id": 7
			}
		}
	}
}