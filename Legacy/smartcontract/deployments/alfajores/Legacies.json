{
  "address": "0xC85d80669400Ea6a6AED0fed4b5E69810398a7eA",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "addTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_legatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_checkInterval",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getLegacyTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "legacies",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "legatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastSeen",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "checkInterval",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "legacyIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_checkInterval",
          "type": "uint256"
        }
      ],
      "name": "updateCheckInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_legatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_checkInterval",
          "type": "uint256"
        }
      ],
      "name": "updateLegacy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_legatee",
          "type": "address"
        }
      ],
      "name": "updateLegatee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc93f641e659c79c868e1616504def5535b5d9f50e6f75f956f4b4d69236a6a7c",
  "receipt": {
    "to": null,
    "from": "0xc167ECBe026780438751Be1683dB051af2120669",
    "contractAddress": "0xC85d80669400Ea6a6AED0fed4b5E69810398a7eA",
    "transactionIndex": 1,
    "gasUsed": "2002727",
    "logsBloom": "0x
    "blockHash": "0x1707b402a2ef8ac958b2f1026e9c38f63927abeaa7a90dc8bb8ba243a2a1d414",
    "transactionHash": "0xc93f641e659c79c868e1616504def5535b5d9f50e6f75f956f4b4d69236a6a7c",
    "logs": [],
    "blockNumber": 14318072,
    "cumulativeGasUsed": "6263387",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f2c072f07b2e67951369071fb2919528",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_legatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_checkInterval\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLegacyTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"legacies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"legatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastSeen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"legacyIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_checkInterval\",\"type\":\"uint256\"}],\"name\":\"updateCheckInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_legatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_checkInterval\",\"type\":\"uint256\"}],\"name\":\"updateLegacy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_legatee\",\"type\":\"address\"}],\"name\":\"updateLegatee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Legacies.sol\":\"Legacies\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatible directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatible as KeeperCompatible} from \\\"./AutomationCompatible.sol\\\";\\nimport {AutomationBase as KeeperBase} from \\\"./AutomationBase.sol\\\";\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xa5f26a85ab9a927016e27af9f1ec33f878c28d8f06cb611e7fb2e189a5336a43\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"contracts/Legacies.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\nimport \\\"./TransferHelper.sol\\\";\\n\\ninterface IERC20 {\\n    function balanceOf(address owner) external returns(uint256 balance);\\n    function allowance(address owner, address spender) external returns(uint256 remaining);\\n}\\n\\ncontract Legacies is KeeperCompatible {\\n    Legacy[] public legacies;\\n    mapping(address=>uint256) public legacyIndexes;\\n\\n    struct Legacy {\\n        address owner;\\n        address legatee;\\n        address[] tokens;\\n        uint256 lastSeen;\\n        uint256 checkInterval;\\n        bool fulfilled;\\n    }\\n\\n    constructor() {\\n        //Create dummy legacy to occupy index 0\\n        create(address(0), 0);\\n    }\\n\\n    function create(address _legatee, uint256 _checkInterval) public {\\n        uint256 _index = legacies.length;\\n        // Revert if msg.sender already has an active legacy!\\n        require(legacyIndexes[msg.sender] == 0, \\\"Legacy exist!\\\");\\n        legacies.push(Legacy(msg.sender, _legatee, new address[](0), block.timestamp, _checkInterval, false));\\n        legacyIndexes[msg.sender] = _index;\\n    }\\n\\n    function cancel() public {\\n        uint256 _index = legacyIndexes[msg.sender];\\n        require(legacies[_index].owner == msg.sender, \\\"not owner!\\\");\\n        delete legacies[_index];\\n        legacyIndexes[msg.sender] = 0;\\n    }\\n    \\n    function updateLegacy(address _legatee, uint256 _checkInterval) public {\\n        uint256 _index = legacyIndexes[msg.sender];\\n        require(legacies[_index].owner == msg.sender, \\\"not owner!\\\");\\n        legacies[_index].checkInterval = _checkInterval;\\n        legacies[_index].legatee = _legatee;\\n    }\\n\\n    function updateCheckInterval(uint256 _checkInterval) public {\\n        uint256 _index = legacyIndexes[msg.sender];\\n        require(legacies[_index].owner == msg.sender, \\\"not owner!\\\");\\n        legacies[_index].checkInterval = _checkInterval;\\n    }\\n\\n    function updateLegatee(address _legatee) public {\\n        uint256 _index = legacyIndexes[msg.sender];\\n        require(legacies[_index].owner == msg.sender, \\\"not owner!\\\");\\n        legacies[_index].legatee = _legatee;\\n    }\\n\\n    function checkIn() public {\\n        uint256 _index = legacyIndexes[msg.sender];\\n        require(legacies[_index].owner == msg.sender, \\\"not owner!\\\");\\n        legacies[_index].lastSeen = block.timestamp;\\n    }\\n\\n    function getLegacyTokens(uint256 _index) public view returns(address[] memory) {\\n        return legacies[_index].tokens;\\n    }\\n\\n    function addTokens(address[] memory _tokens) public {\\n\\tuint256 _index = legacyIndexes[msg.sender];\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            IERC20 _token = IERC20(_tokens[i]);\\n            //Confirm token approval\\n            require(_token.allowance(msg.sender, address(this)) == type(uint256).max, \\\"not approved!\\\");\\n            legacies[_index].tokens.push(_tokens[i]);\\n        }\\n    }\\n\\n    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory performData ) {\\n        upkeepNeeded = false;\\n        //Get 10 legacies due for fulfillment\\n        for (uint256 i = 0; i < legacies.length; i++) {\\n            Legacy memory _legacy = legacies[i];\\n            if (!_legacy.fulfilled && block.timestamp - _legacy.lastSeen > _legacy.checkInterval) {\\n                upkeepNeeded = true;\\n                performData = abi.encode(i);\\n                break;\\n            }\\n        }\\n\\n    }\\n\\n    function performUpkeep(bytes calldata performData ) external override {\\n        //Decode perfromData\\n        uint256 index = abi.decode(performData, (uint256));\\n\\n        Legacy memory _legacy = legacies[index];    \\n        //Confirm performData\\n        require(block.timestamp - _legacy.lastSeen > _legacy.checkInterval, \\\"not due!\\\" );\\n        legacies[index].fulfilled = true;\\n\\n        //Transfer tokens to legatee\\n        for (uint256 i = 0; i < _legacy.tokens.length; i++) {\\n  \\t\\t    address _token = _legacy.tokens[i];\\n            uint256 _allowed = IERC20(_token).allowance(_legacy.owner, address(this));\\n            uint256 _balance = IERC20(_token).balanceOf(_legacy.owner);\\n            // Skip tokens not approved\\n            if (_allowed < _balance) {\\n                continue;\\n            }\\n            TransferHelper.safeTransferFrom(\\n                _token,\\n                _legacy.owner,\\n                _legacy.legatee,\\n                _balance\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d842a5fa690e8ded4e33361c64ee3eb5598db818b6294960840654f779aa7af\",\"license\":\"MIT\"},\"contracts/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80635b63c009116100715780635b63c0091461014f5780636031b9d21461016b5780636e04ff0d1461019f578063884c53ad146101d0578063c91e78e814610200578063ea8a1af014610230576100b4565b80630ecaea73146100b9578063183ff085146100d55780631ffd0844146100df578063443e0184146100fb5780634585e33b146101175780634ae05c7d14610133575b600080fd5b6100d360048036038101906100ce91906117f2565b61023a565b005b6100dd6104bf565b005b6100f960048036038101906100f49190611832565b6105e3565b005b6101156004803603810190610110919061185f565b610708565b005b610131600480360381019061012c91906118f1565b610867565b005b61014d60048036038101906101489190611a8d565b610c43565b005b610169600480360381019061016491906117f2565b610e59565b005b61018560048036038101906101809190611832565b610fe3565b604051610196959493929190611b0f565b60405180910390f35b6101b960048036038101906101b491906118f1565b611076565b6040516101c7929190611bea565b60405180910390f35b6101ea60048036038101906101e5919061185f565b611298565b6040516101f79190611c1a565b60405180910390f35b61021a60048036038101906102159190611832565b6112b0565b6040516102279190611cf3565b60405180910390f35b610238611363565b005b6000808054905090506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146102c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bc90611d72565b60405180910390fd5b60006040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff8111156103255761032461194f565b5b6040519080825280602002602001820160405280156103535781602001602082028036833780820191505090505b50815260200142815260200184815260200160001515815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019061043f929190611682565b50606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908315150217905550505080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490503373ffffffffffffffffffffffffffffffffffffffff166000828154811061052e5761052d611d92565b5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ad90611e0d565b60405180910390fd5b42600082815481106105cb576105ca611d92565b5b90600052602060002090600602016003018190555050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490503373ffffffffffffffffffffffffffffffffffffffff166000828154811061065257610651611d92565b5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d190611e0d565b60405180910390fd5b81600082815481106106ef576106ee611d92565b5b9060005260206000209060060201600401819055505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490503373ffffffffffffffffffffffffffffffffffffffff166000828154811061077757610776611d92565b5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f690611e0d565b60405180910390fd5b816000828154811061081457610813611d92565b5b906000526020600020906006020160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082828101906108789190611832565b9050600080828154811061088f5761088e611d92565b5b90600052602060002090600602016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054806020026020016040519081016040528092919081815260200182805480156109d957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161098f575b5050505050815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff16151515158152505090508060800151816060015142610a289190611e5c565b11610a68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5f90611edc565b60405180910390fd5b600160008381548110610a7e57610a7d611d92565b5b906000526020600020906006020160050160006101000a81548160ff02191690831515021790555060005b816040015151811015610c3c57600082604001518281518110610acf57610ace611d92565b5b6020026020010151905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e8560000151306040518363ffffffff1660e01b8152600401610b1a929190611efc565b602060405180830381600087803b158015610b3457600080fd5b505af1158015610b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6c9190611f3a565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a0823186600001516040518263ffffffff1660e01b8152600401610bad9190611f67565b602060405180830381600087803b158015610bc757600080fd5b505af1158015610bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bff9190611f3a565b905080821015610c1157505050610c29565b610c25838660000151876020015184611549565b5050505b8080610c3490611f82565b915050610aa9565b5050505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060005b8251811015610e54576000838281518110610ca857610ca7611d92565b5b602002602001015190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610d0e929190611efc565b602060405180830381600087803b158015610d2857600080fd5b505af1158015610d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d609190611f3a565b14610da0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9790612017565b60405180910390fd5b60008381548110610db457610db3611d92565b5b9060005260206000209060060201600201848381518110610dd857610dd7611d92565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080610e4c90611f82565b915050610c8a565b505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490503373ffffffffffffffffffffffffffffffffffffffff1660008281548110610ec857610ec7611d92565b5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4790611e0d565b60405180910390fd5b8160008281548110610f6557610f64611d92565b5b9060005260206000209060060201600401819055508260008281548110610f8f57610f8e611d92565b5b906000526020600020906006020160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60008181548110610ff357600080fd5b90600052602060002090600602016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050160009054906101000a900460ff16905085565b600060606000915060005b6000805490508110156112905760008082815481106110a3576110a2611d92565b5b90600052602060002090600602016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054806020026020016040519081016040528092919081815260200182805480156111ed57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116111a3575b5050505050815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff16151515158152505090508060a0015115801561124b575080608001518160600151426112499190611e5c565b115b1561127c5760019350816040516020016112659190611c1a565b604051602081830303815290604052925050611290565b50808061128890611f82565b915050611081565b509250929050565b60016020528060005260406000206000915090505481565b6060600082815481106112c6576112c5611d92565b5b906000526020600020906006020160020180548060200260200160405190810160405280929190818152602001828054801561135757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161130d575b50505050509050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490503373ffffffffffffffffffffffffffffffffffffffff16600082815481106113d2576113d1611d92565b5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461145a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145190611e0d565b60405180910390fd5b6000818154811061146e5761146d611d92565b5b9060005260206000209060060201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006114db919061170c565b600382016000905560048201600090556005820160006101000a81549060ff021916905550506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161157d93929190612037565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516115cb91906120aa565b6000604051808303816000865af19150503d8060008114611608576040519150601f19603f3d011682016040523d82523d6000602084013e61160d565b606091505b509150915081801561163b575060008151148061163a57508080602001905181019061163991906120ed565b5b5b61167a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116719061218c565b60405180910390fd5b505050505050565b8280548282559060005260206000209081019282156116fb579160200282015b828111156116fa5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906116a2565b5b509050611708919061172d565b5090565b508054600082559060005260206000209081019061172a919061172d565b50565b5b8082111561174657600081600090555060010161172e565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117898261175e565b9050919050565b6117998161177e565b81146117a457600080fd5b50565b6000813590506117b681611790565b92915050565b6000819050919050565b6117cf816117bc565b81146117da57600080fd5b50565b6000813590506117ec816117c6565b92915050565b6000806040838503121561180957611808611754565b5b6000611817858286016117a7565b9250506020611828858286016117dd565b9150509250929050565b60006020828403121561184857611847611754565b5b6000611856848285016117dd565b91505092915050565b60006020828403121561187557611874611754565b5b6000611883848285016117a7565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126118b1576118b061188c565b5b8235905067ffffffffffffffff8111156118ce576118cd611891565b5b6020830191508360018202830111156118ea576118e9611896565b5b9250929050565b6000806020838503121561190857611907611754565b5b600083013567ffffffffffffffff81111561192657611925611759565b5b6119328582860161189b565b92509250509250929050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119878261193e565b810181811067ffffffffffffffff821117156119a6576119a561194f565b5b80604052505050565b60006119b961174a565b90506119c5828261197e565b919050565b600067ffffffffffffffff8211156119e5576119e461194f565b5b602082029050602081019050919050565b6000611a09611a04846119ca565b6119af565b90508083825260208201905060208402830185811115611a2c57611a2b611896565b5b835b81811015611a555780611a4188826117a7565b845260208401935050602081019050611a2e565b5050509392505050565b600082601f830112611a7457611a7361188c565b5b8135611a848482602086016119f6565b91505092915050565b600060208284031215611aa357611aa2611754565b5b600082013567ffffffffffffffff811115611ac157611ac0611759565b5b611acd84828501611a5f565b91505092915050565b611adf8161177e565b82525050565b611aee816117bc565b82525050565b60008115159050919050565b611b0981611af4565b82525050565b600060a082019050611b246000830188611ad6565b611b316020830187611ad6565b611b3e6040830186611ae5565b611b4b6060830185611ae5565b611b586080830184611b00565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b9c578082015181840152602081019050611b81565b83811115611bab576000848401525b50505050565b6000611bbc82611b62565b611bc68185611b6d565b9350611bd6818560208601611b7e565b611bdf8161193e565b840191505092915050565b6000604082019050611bff6000830185611b00565b8181036020830152611c118184611bb1565b90509392505050565b6000602082019050611c2f6000830184611ae5565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611c6a8161177e565b82525050565b6000611c7c8383611c61565b60208301905092915050565b6000602082019050919050565b6000611ca082611c35565b611caa8185611c40565b9350611cb583611c51565b8060005b83811015611ce6578151611ccd8882611c70565b9750611cd883611c88565b925050600181019050611cb9565b5085935050505092915050565b60006020820190508181036000830152611d0d8184611c95565b905092915050565b600082825260208201905092915050565b7f4c65676163792065786973742100000000000000000000000000000000000000600082015250565b6000611d5c600d83611d15565b9150611d6782611d26565b602082019050919050565b60006020820190508181036000830152611d8b81611d4f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f6e6f74206f776e65722100000000000000000000000000000000000000000000600082015250565b6000611df7600a83611d15565b9150611e0282611dc1565b602082019050919050565b60006020820190508181036000830152611e2681611dea565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e67826117bc565b9150611e72836117bc565b925082821015611e8557611e84611e2d565b5b828203905092915050565b7f6e6f742064756521000000000000000000000000000000000000000000000000600082015250565b6000611ec6600883611d15565b9150611ed182611e90565b602082019050919050565b60006020820190508181036000830152611ef581611eb9565b9050919050565b6000604082019050611f116000830185611ad6565b611f1e6020830184611ad6565b9392505050565b600081519050611f34816117c6565b92915050565b600060208284031215611f5057611f4f611754565b5b6000611f5e84828501611f25565b91505092915050565b6000602082019050611f7c6000830184611ad6565b92915050565b6000611f8d826117bc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611fc057611fbf611e2d565b5b600182019050919050565b7f6e6f7420617070726f7665642100000000000000000000000000000000000000600082015250565b6000612001600d83611d15565b915061200c82611fcb565b602082019050919050565b6000602082019050818103600083015261203081611ff4565b9050919050565b600060608201905061204c6000830186611ad6565b6120596020830185611ad6565b6120666040830184611ae5565b949350505050565b600081905092915050565b600061208482611b62565b61208e818561206e565b935061209e818560208601611b7e565b80840191505092915050565b60006120b68284612079565b915081905092915050565b6120ca81611af4565b81146120d557600080fd5b50565b6000815190506120e7816120c1565b92915050565b60006020828403121561210357612102611754565b5b6000612111848285016120d8565b91505092915050565b7f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260008201527f616e7366657246726f6d206661696c6564000000000000000000000000000000602082015250565b6000612176603183611d15565b91506121818261211a565b604082019050919050565b600060208201905081810360008301526121a581612169565b905091905056fea26469706673582212201a7dab81aab52f5b0def81e816f92923c5eca667c56eb90b0ad92f906369c75764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 92,
        "contract": "contracts/Legacies.sol:Legacies",
        "label": "legacies",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Legacy)110_storage)dyn_storage"
      },
      {
        "astId": 96,
        "contract": "contracts/Legacies.sol:Legacies",
        "label": "legacyIndexes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Legacy)110_storage)dyn_storage": {
        "base": "t_struct(Legacy)110_storage",
        "encoding": "dynamic_array",
        "label": "struct Legacies.Legacy[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Legacy)110_storage": {
        "encoding": "inplace",
        "label": "struct Legacies.Legacy",
        "members": [
          {
            "astId": 98,
            "contract": "contracts/Legacies.sol:Legacies",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 100,
            "contract": "contracts/Legacies.sol:Legacies",
            "label": "legatee",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 103,
            "contract": "contracts/Legacies.sol:Legacies",
            "label": "tokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 105,
            "contract": "contracts/Legacies.sol:Legacies",
            "label": "lastSeen",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 107,
            "contract": "contracts/Legacies.sol:Legacies",
            "label": "checkInterval",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 109,
            "contract": "contracts/Legacies.sol:Legacies",
            "label": "fulfilled",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}