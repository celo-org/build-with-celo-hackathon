{
  "language": "Solidity",
  "sources": {
    "contracts/Legacies.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\";\nimport \"./TransferHelper.sol\";\n\ninterface IERC20 {\n    function balanceOf(address owner) external returns(uint256 balance);\n    function allowance(address owner, address spender) external returns(uint256 remaining);\n}\n\ncontract Legacies is KeeperCompatible {\n    Legacy[] public legacies;\n    mapping(address=>uint256) public legacyIndexes;\n\n    struct Legacy {\n        address owner;\n        address legatee;\n        address[] tokens;\n        uint256 lastSeen;\n        uint256 checkInterval;\n        bool fulfilled;\n    }\n\n    constructor() {\n        //Create dummy legacy to occupy index 0\n        create(address(0), 0);\n    }\n\n    function create(address _legatee, uint256 _checkInterval) public {\n        uint256 _index = legacies.length;\n        // Revert if msg.sender already has an active legacy!\n        require(legacyIndexes[msg.sender] == 0, \"Legacy exist!\");\n        legacies.push(Legacy(msg.sender, _legatee, new address[](0), block.timestamp, _checkInterval, false));\n        legacyIndexes[msg.sender] = _index;\n    }\n\n    function cancel() public {\n        uint256 _index = legacyIndexes[msg.sender];\n        require(legacies[_index].owner == msg.sender, \"not owner!\");\n        delete legacies[_index];\n        legacyIndexes[msg.sender] = 0;\n    }\n    \n    function updateLegacy(address _legatee, uint256 _checkInterval) public {\n        uint256 _index = legacyIndexes[msg.sender];\n        require(legacies[_index].owner == msg.sender, \"not owner!\");\n        legacies[_index].checkInterval = _checkInterval;\n        legacies[_index].legatee = _legatee;\n    }\n\n    function updateCheckInterval(uint256 _checkInterval) public {\n        uint256 _index = legacyIndexes[msg.sender];\n        require(legacies[_index].owner == msg.sender, \"not owner!\");\n        legacies[_index].checkInterval = _checkInterval;\n    }\n\n    function updateLegatee(address _legatee) public {\n        uint256 _index = legacyIndexes[msg.sender];\n        require(legacies[_index].owner == msg.sender, \"not owner!\");\n        legacies[_index].legatee = _legatee;\n    }\n\n    function checkIn() public {\n        uint256 _index = legacyIndexes[msg.sender];\n        require(legacies[_index].owner == msg.sender, \"not owner!\");\n        legacies[_index].lastSeen = block.timestamp;\n    }\n\n    function getLegacyTokens(uint256 _index) public view returns(address[] memory) {\n        return legacies[_index].tokens;\n    }\n\n    function addTokens(address[] memory _tokens) public {\n\tuint256 _index = legacyIndexes[msg.sender];\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            IERC20 _token = IERC20(_tokens[i]);\n            //Confirm token approval\n            require(_token.allowance(msg.sender, address(this)) == type(uint256).max, \"not approved!\");\n            legacies[_index].tokens.push(_tokens[i]);\n        }\n    }\n\n    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory performData ) {\n        upkeepNeeded = false;\n        //Get 10 legacies due for fulfillment\n        for (uint256 i = 0; i < legacies.length; i++) {\n            Legacy memory _legacy = legacies[i];\n            if (!_legacy.fulfilled && block.timestamp - _legacy.lastSeen > _legacy.checkInterval) {\n                upkeepNeeded = true;\n                performData = abi.encode(i);\n                break;\n            }\n        }\n\n    }\n\n    function performUpkeep(bytes calldata performData ) external override {\n        //Decode perfromData\n        uint256 index = abi.decode(performData, (uint256));\n\n        Legacy memory _legacy = legacies[index];    \n        //Confirm performData\n        require(block.timestamp - _legacy.lastSeen > _legacy.checkInterval, \"not due!\" );\n        legacies[index].fulfilled = true;\n\n        //Transfer tokens to legatee\n        for (uint256 i = 0; i < _legacy.tokens.length; i++) {\n  \t\t    address _token = _legacy.tokens[i];\n            uint256 _allowed = IERC20(_token).allowance(_legacy.owner, address(this));\n            uint256 _balance = IERC20(_token).balanceOf(_legacy.owner);\n            // Skip tokens not approved\n            if (_allowed < _balance) {\n                continue;\n            }\n            TransferHelper.safeTransferFrom(\n                _token,\n                _legacy.owner,\n                _legacy.legatee,\n                _balance\n            );\n        }\n    }\n}\n"
    },
    "contracts/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatible directly.\n */\npragma solidity ^0.8.0;\nimport {AutomationCompatible as KeeperCompatible} from \"./AutomationCompatible.sol\";\nimport {AutomationBase as KeeperBase} from \"./AutomationBase.sol\";\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \"./interfaces/AutomationCompatibleInterface.sol\";\n"
    },
    "@chainlink/contracts/src/v0.8/AutomationCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AutomationBase.sol\";\nimport \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/AutomationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}