"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = _interopRequireWildcard(require("ui-box"));

var _hooks = require("../../hooks");

var _icons = require("../../icons");

var _deprecatedThemeHelpers = require("../../lib/deprecated-theme-helpers");

var _excluded = ["appearance", "aria-describedby", "autoFocus", "children", "defaultValue", "disabled", "height", "id", "isInvalid", "name", "onChange", "required", "value"],
    _excluded2 = ["className"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var internalStyles = {
  textTransform: 'default',
  WebkitAppearance: 'none',
  MozAppearance: 'none',
  border: 'none',
  flex: 1,
  background: 'none',
  width: '100%',
  WebkitFontSmoothing: 'antialiased',
  textDecoration: 'none',
  outline: 'none',
  cursor: 'pointer',
  ':-moz-focusring': {
    color: 'transparent',
    textShadow: '0 0 0 #000'
  }
};
var pseudoSelectors = {
  _disabled: '[disabled]',
  _invalid: '&[aria-invalid="true"]',
  _hover: '&:not([disabled]):hover',
  _focus: '&:not([disabled]):focus',
  _active: '&:not([disabled]):active'
};

var getIconSizeForSelect = function getIconSizeForSelect(height) {
  if (height <= 28) return 12;
  if (height <= 32) return 14; // Slightly bigger than getIconSizeForButton

  if (height <= 40) return 16;
  if (height <= 48) return 18;
  return 20;
};

var Select = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function Select(props, ref) {
  var _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,
      ariaDescribedby = props['aria-describedby'],
      autoFocus = props.autoFocus,
      children = props.children,
      defaultValue = props.defaultValue,
      disabled = props.disabled,
      heightProp = props.height,
      id = props.id,
      _props$isInvalid = props.isInvalid,
      isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,
      name = props.name,
      onChange = props.onChange,
      required = props.required,
      value = props.value,
      restProps = (0, _objectWithoutProperties2["default"])(props, _excluded);

  var _useStyleConfig = (0, _hooks.useStyleConfig)('Select', {
    appearance: appearance,
    size: restProps.size || 'medium'
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      boxProps = (0, _objectWithoutProperties2["default"])(_useStyleConfig, _excluded2);

  var height = heightProp || boxProps.height;
  var textProps = !restProps.size && restProps.height ? (0, _deprecatedThemeHelpers.getTextPropsForControlHeight)(restProps.height) : {};
  var iconSize = getIconSizeForSelect(height);
  var iconMargin = height >= 36 ? 12 : 8;
  return /*#__PURE__*/_react["default"].createElement(_uiBox["default"], (0, _extends2["default"])({
    display: "inline-flex",
    flex: 1,
    position: "relative",
    width: "auto",
    height: height
  }, restProps, textProps), /*#__PURE__*/_react["default"].createElement(_uiBox["default"], (0, _extends2["default"])({
    is: "select",
    ref: ref,
    className: themedClassName,
    id: id,
    name: name,
    onChange: onChange,
    defaultValue: defaultValue,
    value: value,
    required: required,
    autoFocus: autoFocus,
    disabled: disabled,
    "aria-invalid": String(isInvalid),
    paddingLeft: Math.round(height / 3.2),
    paddingRight: iconMargin * 2 + iconSize
  }, boxProps, {
    height: "100%",
    "aria-describedby": ariaDescribedby
  }), children), /*#__PURE__*/_react["default"].createElement(_icons.CaretDownIcon, {
    color: "default",
    size: iconSize,
    position: "absolute",
    top: "50%",
    marginTop: -iconSize / 2,
    right: iconMargin,
    pointerEvents: "none"
  }));
}));
Select.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _uiBox.dimensions.propTypes), _uiBox.spacing.propTypes), _uiBox.position.propTypes), _uiBox.layout.propTypes), {}, {
  /**
   * The id attribute for the select.
   */
  id: _propTypes["default"].string,

  /**
   * The name attribute for the select.
   */
  name: _propTypes["default"].string,

  /**
   * The options that are passed to the select.
   */
  children: _propTypes["default"].node,

  /**
   * The initial value of an uncontrolled select
   */
  defaultValue: _propTypes["default"].any,

  /**
   * Function called when value changes.
   */
  onChange: _propTypes["default"].func,

  /**
   * The value of the select.
   */
  value: _propTypes["default"].any,

  /**
   * When true, the select is required.
   */
  required: _propTypes["default"].bool,

  /**
   * When true, the select should auto focus.
   */
  autoFocus: _propTypes["default"].bool,

  /**
   * When true, the select is invalid.
   */
  isInvalid: _propTypes["default"].bool,

  /**
   * The appearance of the select. The default theme only supports default.
   */
  appearance: _propTypes["default"].string
});
var _default = Select;
exports["default"] = _default;