"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.pseudoSelectors = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _hooks = require("../../hooks");

var _layers = require("../../layers");

var _safeInvoke = _interopRequireDefault(require("../../lib/safe-invoke"));

var _manageTableRowFocusInteraction = _interopRequireDefault(require("./manageTableRowFocusInteraction"));

var _excluded = ["className", "children", "intent", "appearance", "tabIndex", "onClick", "onKeyDown", "onSelect", "onDeselect", "isHighlighted", "isSelectable", "isSelected"],
    _excluded2 = ["className", "height"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var noop = function noop() {};

var pseudoSelectors = {
  _hover: '&[data-isselectable="true"]:not([aria-current="true"]):not([aria-checked="true"]):not(:focus):not(:active):hover',
  _focus: '&[data-isselectable="true"]:not([aria-checked="true"]):not([aria-current="true"]):focus, &[aria-selected="true"]',
  _active: '&[aria-current="true"], &[data-isselectable="true"]:active',
  _current: '&[aria-current="true"], &[aria-checked="true"]',
  _lastOfType: '&:last-of-type',
  _isSelectable: '&[data-isselectable="true"]'
};
exports.pseudoSelectors = pseudoSelectors;
var internalStyles = {
  display: 'flex'
};
var TableRow = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function TableRow(props, forwardedRef) {
  var className = props.className,
      children = props.children,
      _props$intent = props.intent,
      intent = _props$intent === void 0 ? 'none' : _props$intent,
      _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,
      _props$tabIndex = props.tabIndex,
      tabIndex = _props$tabIndex === void 0 ? -1 : _props$tabIndex,
      onClick = props.onClick,
      _props$onKeyDown = props.onKeyDown,
      onKeyDown = _props$onKeyDown === void 0 ? noop : _props$onKeyDown,
      _props$onSelect = props.onSelect,
      onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,
      _props$onDeselect = props.onDeselect,
      onDeselect = _props$onDeselect === void 0 ? noop : _props$onDeselect,
      isHighlighted = props.isHighlighted,
      isSelectable = props.isSelectable,
      isSelected = props.isSelected,
      rest = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var mainRef = (0, _react.useRef)();
  var onRef = (0, _hooks.useMergedRef)(mainRef, forwardedRef);
  var onClickRef = (0, _hooks.useLatest)(onClick);
  var onKeyDownRef = (0, _hooks.useLatest)(onKeyDown);
  var onDeselectRef = (0, _hooks.useLatest)(onDeselect);
  var onSelectRef = (0, _hooks.useLatest)(onSelect);
  var handleClick = (0, _react.useCallback)(function (event) {
    (0, _safeInvoke["default"])(onClickRef.current, event);

    if (isSelectable) {
      if (isSelected) {
        (0, _safeInvoke["default"])(onDeselectRef.current);
      } else {
        (0, _safeInvoke["default"])(onSelectRef.current);
      }
    }
  }, // These "missing" deps are all refs
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [isSelected, isSelectable]);
  var handleKeyDown = (0, _react.useCallback)(function (event) {
    (0, _safeInvoke["default"])(onKeyDownRef.current, event);

    if (isSelectable) {
      if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {
        try {
          (0, _manageTableRowFocusInteraction["default"])(event.key, mainRef.current);
        } catch (_) {}
      } else if (event.key === 'Escape') {
        if (mainRef.current && mainRef.current instanceof Node) mainRef.current.blur();
      }
    }
  }, // These "missing" deps are all refs
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [isSelectable]);
  var clickable = (0, _hooks.useClickable)({
    onKeyDown: handleKeyDown,
    tabIndex: tabIndex
  });

  var _useStyleConfig = (0, _hooks.useStyleConfig)('TableRow', {
    appearance: appearance,
    intent: intent
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      themeHeight = _useStyleConfig.height,
      boxProps = (0, _objectWithoutProperties2["default"])(_useStyleConfig, _excluded2);

  var height = rest.height || themeHeight;
  return /*#__PURE__*/_react["default"].createElement(_layers.Pane, (0, _extends2["default"])({
    ref: onRef,
    className: (0, _classnames["default"])(themedClassName, className),
    "aria-selected": isHighlighted,
    "aria-current": isSelected,
    "data-isselectable": isSelectable,
    tabIndex: isSelectable ? clickable.tabIndex : undefined,
    onClick: handleClick,
    onKeyDown: clickable.onKeyDown,
    borderBottom: "muted",
    height: height
  }, boxProps, rest), children);
}));
TableRow.propTypes = _objectSpread(_objectSpread({}, _layers.Pane.propTypes), {}, {
  /**
   * The height of the row. Remember to add paddings when using "auto".
   */
  height: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /**
   * Function that is called on click and enter/space keypress.
   */
  onSelect: _propTypes["default"].func,

  /**
   * Function that is called on click and enter/space keypress.
   */
  onDeselect: _propTypes["default"].func,

  /**
   * Makes the TableRow selectable.
   */
  isSelectable: _propTypes["default"].bool,

  /**
   * Makes the TableRow selected.
   */
  isSelected: _propTypes["default"].bool,

  /**
   * Manually set the TableRow to be highlighted.
   */
  isHighlighted: _propTypes["default"].bool,

  /**
   * The intent of the alert.
   */
  intent: _propTypes["default"].string,

  /**
   * The appearance of the table row. Default theme only support default.
   */
  appearance: _propTypes["default"].string,

  /**
   * Class name passed to the table row.
   * Only use if you know what you are doing.
   */
  className: _propTypes["default"].string
});
var _default = TableRow;
exports["default"] = _default;