"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _hooks = require("../../hooks");

var _safeInvoke = _interopRequireDefault(require("../../lib/safe-invoke"));

var _portal = require("../../portal");

var _stack = require("../../stack");

var _EditableCellField = _interopRequireDefault(require("./EditableCellField"));

var _TableCell = _interopRequireDefault(require("./TableCell"));

var _TextTableCell = _interopRequireDefault(require("./TextTableCell"));

var _excluded = ["children", "size", "disabled", "placeholder", "isSelectable", "textProps", "autoFocus", "onChange"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var emptyProps = {};
var EditableCell = /*#__PURE__*/(0, _react.memo)(function EditableCell(props) {
  var children = props.children,
      _props$size = props.size,
      size = _props$size === void 0 ? 300 : _props$size,
      disabled = props.disabled,
      placeholder = props.placeholder,
      _props$isSelectable = props.isSelectable,
      isSelectable = _props$isSelectable === void 0 ? true : _props$isSelectable,
      _props$textProps = props.textProps,
      textProps = _props$textProps === void 0 ? emptyProps : _props$textProps,
      _props$autoFocus = props.autoFocus,
      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
      onChange = props.onChange,
      rest = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var cursor = 'text';
  var mainRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(children),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = (0, _react.useState)(autoFocus),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      isEditing = _useState4[0],
      setIsEditing = _useState4[1];

  var onChangeRef = (0, _hooks.useLatest)(onChange);
  (0, _react.useEffect)(function () {
    setValue(children);
  }, [children]);
  var handleDoubleClick = (0, _react.useCallback)(function () {
    if (disabled || !isSelectable) return;
    setIsEditing(true);
  }, [disabled, isSelectable]);
  var handleKeyDown = (0, _react.useCallback)(function (e) {
    if (disabled) return;
    var key = e.key;
    /**
     * When the user presses a character on the keyboard, use that character
     * as the value in the text field.
     */

    if (key === 'Enter' || key === 'Shift') {
      setIsEditing(true);
    } else if (key.match(/^[a-z]{0,10}$/) && !e.metaKey && !e.ctrlKey && !e.altKey) {
      setIsEditing(true);
      setValue(function (prev) {
        return prev + key;
      });
    }
  }, [disabled]);
  var handleFieldChangeComplete = (0, _react.useCallback)(function (value) {
    setIsEditing(false);
    setValue(value);
    (0, _safeInvoke["default"])(onChangeRef.current, value);

    if (mainRef.current && isSelectable) {
      mainRef.current.focus();
    }
  }, // onChangeRef is a ref
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [isSelectable]);
  var handleFieldCancel = (0, _react.useCallback)(function () {
    setIsEditing(false);
  }, []);
  var handleClick = (0, _react.useCallback)(function () {
    if (mainRef.current) {
      mainRef.current.focus();
    }
  }, []);
  var getTargetRef = (0, _react.useCallback)(function () {
    return mainRef.current;
  }, []);

  if (disabled) {
    cursor = 'not-allowed';
  } else if (isSelectable) {
    cursor = 'default';
  }

  var lessOpacity = (0, _react.useMemo)(function () {
    return disabled || !value && placeholder;
  }, [disabled, value, placeholder]);
  var mergedTextProps = (0, _react.useMemo)(function () {
    return _objectSpread({
      size: size,
      opacity: lessOpacity ? 0.5 : 1
    }, textProps);
  }, [lessOpacity, size, textProps]);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_TextTableCell["default"], (0, _extends2["default"])({
    ref: mainRef,
    isSelectable: isSelectable,
    onClick: handleClick,
    onDoubleClick: handleDoubleClick,
    onKeyDown: handleKeyDown,
    cursor: cursor,
    textProps: mergedTextProps
  }, rest), value || placeholder), isEditing && /*#__PURE__*/_react["default"].createElement(_portal.Portal, null, /*#__PURE__*/_react["default"].createElement(_stack.Stack, null, function (zIndex) {
    return /*#__PURE__*/_react["default"].createElement(_EditableCellField["default"], {
      zIndex: zIndex,
      getTargetRef: getTargetRef,
      value: value,
      onEscape: handleFieldCancel,
      onChangeComplete: handleFieldChangeComplete,
      onCancel: handleFieldCancel,
      size: size
    });
  })));
});
EditableCell.propTypes = _objectSpread(_objectSpread({}, _TableCell["default"].propTypes), {}, {
  /*
   * Makes the TableCell focusable.
   * Will add tabIndex={-1 || this.props.tabIndex}.
   */
  isSelectable: _propTypes["default"].bool,

  /**
   * When true, the cell can't be edited.
   */
  disabled: _propTypes["default"].bool,

  /**
   * Optional placeholder when children is falsy.
   */
  placeholder: _propTypes["default"].node,

  /**
   * The size used for the TextTableCell and Textarea.
   */
  size: _propTypes["default"].oneOf([300, 400]),

  /**
   * This is the value of the cell.
   */
  children: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /**
   * Function called when value changes. (value: string) => void.
   */
  onChange: _propTypes["default"].func,

  /**
   * When true, the cell will initialize in the editing state.
   */
  autoFocus: _propTypes["default"].bool
});
var _default = EditableCell;
exports["default"] = _default;