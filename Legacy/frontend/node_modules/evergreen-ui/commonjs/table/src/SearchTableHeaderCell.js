"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _icons = require("../../icons");

var _IconWrapper = require("../../icons/src/IconWrapper");

var _typography = require("../../typography");

var _TableHeaderCell = _interopRequireDefault(require("./TableHeaderCell"));

var _excluded = ["value", "children", "onChange", "autoFocus", "spellCheck", "placeholder", "icon"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var invisibleInputClass = (0, _glamor.css)({
  border: 'none',
  backgroundColor: 'transparent',
  WebkitAppearance: 'none',
  MozAppearance: 'none',
  WebkitFontSmoothing: 'antialiased',
  '&:focus': {
    outline: 'none'
  },
  '&::placeholder': {
    color: 'rgba(67, 90, 111, 0.7)'
  }
}).toString();

var noop = function noop() {};

var SearchTableHeaderCell = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function SearchTableHeaderCell(props, ref) {
  var value = props.value,
      children = props.children,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? noop : _props$onChange,
      autoFocus = props.autoFocus,
      _props$spellCheck = props.spellCheck,
      spellCheck = _props$spellCheck === void 0 ? true : _props$spellCheck,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? 'Filter...' : _props$placeholder,
      _props$icon = props.icon,
      icon = _props$icon === void 0 ? _icons.SearchIcon : _props$icon,
      rest = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var handleChange = (0, _react.useCallback)(function (e) {
    return onChange(e.target.value);
  }, [onChange]);
  return /*#__PURE__*/_react["default"].createElement(_TableHeaderCell["default"], rest, /*#__PURE__*/_react["default"].createElement(_IconWrapper.IconWrapper, {
    icon: icon,
    color: "muted",
    marginLeft: 2,
    marginRight: 10,
    size: 12
  }), /*#__PURE__*/_react["default"].createElement(_typography.Text, {
    is: "input",
    size: 300,
    flex: "1",
    className: invisibleInputClass,
    value: value,
    onChange: handleChange,
    autoFocus: autoFocus,
    spellCheck: spellCheck,
    fontWeight: 500,
    marginLeft: -2,
    paddingLeft: 0,
    placeholder: placeholder,
    ref: ref
  }));
}));
SearchTableHeaderCell.propTypes = _objectSpread(_objectSpread({}, _TableHeaderCell["default"].propTypes), {}, {
  /**
   * The value of the input.
   */
  value: _propTypes["default"].string,

  /**
   * Handler to be called when the input changes.
   */
  onChange: _propTypes["default"].func,

  /**
   * Sets whether the component should be automatically focused on component render.
   */
  autoFocus: _propTypes["default"].bool,

  /**
   * Sets whether to apply spell checking to the content.
   */
  spellCheck: _propTypes["default"].bool,

  /**
   * Text to display in the input if the input is empty.
   */
  placeholder: _propTypes["default"].string,

  /**
   * The Evergreen or custom icon before the label.
   */
  icon: _propTypes["default"].oneOfType([_propTypes["default"].elementType, _propTypes["default"].element])
});
var _default = SearchTableHeaderCell;
exports["default"] = _default;