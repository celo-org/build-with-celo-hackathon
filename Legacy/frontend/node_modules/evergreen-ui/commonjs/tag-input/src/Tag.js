"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _badges = require("../../badges");

var _icons = require("../../icons");

var _scales = require("../../scales");

var _excluded = ["children", "isRemovable", "onRemove"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Tag = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function Tag(props, ref) {
  var children = props.children,
      isRemovable = props.isRemovable,
      onRemove = props.onRemove,
      restProps = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var badgeStyles = {
    alignItems: 'center',
    display: 'inline-flex',
    fontWeight: 400,
    borderRadius: 4,
    paddingX: 8,
    paddingY: 6,
    marginTop: 0,
    marginBottom: 0,
    textTransform: 'none'
  };

  if (isRemovable) {
    badgeStyles.paddingRight = (0, _scales.minorScale)(1);
  }

  return /*#__PURE__*/_react["default"].createElement(_badges.Badge, (0, _extends2["default"])({
    ref: ref,
    isInteractive: true
  }, badgeStyles, restProps), children, isRemovable && /*#__PURE__*/_react["default"].createElement(_icons.CrossIcon, {
    marginLeft: (0, _scales.minorScale)(1),
    onClick: onRemove,
    size: (0, _scales.minorScale)(3)
  }));
}));
Tag.propTypes = {
  /** The tag content */
  children: _propTypes["default"].node,

  /**
   * Callback invoked when the removal icon is clicked.
   * (event) => void
   */
  onRemove: _propTypes["default"].func,

  /** Whether or not the tag can be removed. */
  isRemovable: _propTypes["default"].bool
};
var _default = Tag;
exports["default"] = _default;