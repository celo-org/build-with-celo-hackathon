"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _TagInput = _interopRequireDefault(require("../src/TagInput"));

var TEST_VALUES = ['one', 'two', 'three'];
var TEST_PLACEHOLDER = 'Enter something...';
describe('<TagInput />', function () {
  describe('onAdd', function () {
    it('should be called when a new value is entered', function () {
      var mockOnAdd = jest.fn();
      var newTestVal = 'Testing';
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_TagInput["default"], {
        values: TEST_VALUES,
        onAdd: mockOnAdd,
        inputProps: {
          placeholder: TEST_PLACEHOLDER
        }
      }));

      _userEvent["default"].type(_react2.screen.getByPlaceholderText(TEST_PLACEHOLDER), "".concat(newTestVal, "{enter}"));

      expect(_react2.screen.queryByTestId('TagInput-autocomplete-toggle')).not.toBeInTheDocument();
      expect(mockOnAdd).toHaveBeenCalledWith([newTestVal]);
    });
  });
  describe('onRemove', function () {
    it('should be called after hitting backspace', function () {
      var mockOnRemove = jest.fn();
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_TagInput["default"], {
        values: TEST_VALUES,
        onRemove: mockOnRemove,
        inputProps: {
          placeholder: TEST_PLACEHOLDER
        }
      }));

      _userEvent["default"].type(_react2.screen.getByPlaceholderText(TEST_PLACEHOLDER), '{backspace}');

      var lastValueIndex = TEST_VALUES.length - 1;
      expect(mockOnRemove).toHaveBeenCalledWith(TEST_VALUES[lastValueIndex], lastValueIndex);
    });
  });
  describe('onChange', function () {
    it('should be called when a value is added', function () {
      var mockOnChange = jest.fn();
      var newTestVal = 'Testing';
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_TagInput["default"], {
        values: TEST_VALUES,
        onChange: mockOnChange,
        inputProps: {
          placeholder: TEST_PLACEHOLDER
        }
      }));

      _userEvent["default"].type(_react2.screen.getByPlaceholderText(TEST_PLACEHOLDER), "".concat(newTestVal, "{enter}"));

      expect(mockOnChange).toHaveBeenLastCalledWith(TEST_VALUES.concat([newTestVal]));
    });
    it('should be called when a value is removed', function () {
      var mockOnChange = jest.fn();
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_TagInput["default"], {
        values: TEST_VALUES,
        onChange: mockOnChange,
        inputProps: {
          placeholder: TEST_PLACEHOLDER
        }
      }));

      _userEvent["default"].type(_react2.screen.getByPlaceholderText(TEST_PLACEHOLDER), '{backspace}');

      var valuesLastRemoved = TEST_VALUES.slice(0, -1);
      expect(mockOnChange).toHaveBeenLastCalledWith(valuesLastRemoved);
    });
  });
  describe('tagSubmitKey', function () {
    it('should allow entering values with space key', function () {
      var mockOnAdd = jest.fn();
      var newTestVal = 'Testing';
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_TagInput["default"], {
        tagSubmitKey: "space",
        values: TEST_VALUES,
        onAdd: mockOnAdd,
        inputProps: {
          placeholder: TEST_PLACEHOLDER
        }
      }));

      _userEvent["default"].type(_react2.screen.getByPlaceholderText(TEST_PLACEHOLDER), "".concat(newTestVal, "{space}"));

      expect(mockOnAdd).toHaveBeenCalledWith([newTestVal]);
    });
  });
  describe('disabled', function () {
    it('prop should disable input', function () {
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_TagInput["default"], {
        disabled: true,
        values: TEST_VALUES,
        inputProps: {
          placeholder: TEST_PLACEHOLDER
        }
      }));
      expect(_react2.screen.getByPlaceholderText(TEST_PLACEHOLDER)).toBeDisabled();
    });
    it('prop should remove X icons', function () {
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_TagInput["default"], {
        disabled: true,
        values: TEST_VALUES,
        inputProps: {
          placeholder: TEST_PLACEHOLDER
        }
      }));
      TEST_VALUES.forEach(function (value) {
        // Checks to make sure the "X" icon is not within each tag
        expect(_react2.screen.getByText(value).children.length).toBe(0);
      });
    });
  });
  describe('addOnBlur', function () {
    it('should allow adding new value on blur', function () {
      var mockOnAdd = jest.fn();
      jest.spyOn(window, 'requestAnimationFrame').mockImplementation(function (cb) {
        return cb();
      });
      var newTestVal = 'Testing';
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_TagInput["default"], {
        addOnBlur: true,
        "data-testid": "wrapper",
        values: TEST_VALUES,
        onAdd: mockOnAdd,
        inputProps: {
          placeholder: TEST_PLACEHOLDER
        }
      }));

      _userEvent["default"].type(_react2.screen.getByPlaceholderText(TEST_PLACEHOLDER), newTestVal);

      _react2.screen.getByPlaceholderText(TEST_PLACEHOLDER).blur();

      _react2.fireEvent.blur(_react2.screen.getByPlaceholderText(TEST_PLACEHOLDER));

      expect(mockOnAdd).toHaveBeenCalledWith([newTestVal]);
      window.requestAnimationFrame.mockRestore();
    });
  });
  describe('separator', function () {
    it('prop should allow entering multiple values at a time', function () {
      var mockOnAdd = jest.fn();
      var newTestVal = 'Testing|123';
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_TagInput["default"], {
        separator: "|",
        values: TEST_VALUES,
        onAdd: mockOnAdd,
        inputProps: {
          placeholder: TEST_PLACEHOLDER
        }
      }));

      _userEvent["default"].type(_react2.screen.getByPlaceholderText(TEST_PLACEHOLDER), "".concat(newTestVal, "{enter}"));

      expect(mockOnAdd).toHaveBeenCalledWith(['Testing', '123']);
    });
  });
  describe('autocompleteItems', function () {
    it('should render a toggle button when provided', function () {
      var mockOnAdd = jest.fn();
      var testAutocompleteItems = ['Testing1', 'Testing2', 'Testing3', 'Other'];
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_TagInput["default"], {
        autocompleteItems: testAutocompleteItems,
        values: TEST_VALUES,
        onAdd: mockOnAdd,
        inputProps: {
          placeholder: TEST_PLACEHOLDER
        }
      }));
      testAutocompleteItems.forEach(function (item) {
        expect(_react2.screen.queryByText(item)).not.toBeInTheDocument();
      });

      _userEvent["default"].click(_react2.screen.getByTestId('TagInput-autocomplete-toggle'));

      testAutocompleteItems.forEach(function (item) {
        expect(_react2.screen.queryByText(item)).toBeInTheDocument();
      });
    });
    it('should reveal options based on search query', function () {
      var mockOnAdd = jest.fn();
      var testAutocompleteItems = ['Testing1', 'Testing2', 'Testing3', 'Other'];
      var testSearch = 'Test';
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_TagInput["default"], {
        autocompleteItems: testAutocompleteItems,
        values: TEST_VALUES,
        onAdd: mockOnAdd,
        inputProps: {
          placeholder: TEST_PLACEHOLDER
        }
      }));
      testAutocompleteItems.forEach(function (item) {
        expect(_react2.screen.queryByText(item)).not.toBeInTheDocument();
      });

      _userEvent["default"].type(_react2.screen.getByPlaceholderText(TEST_PLACEHOLDER), testSearch);

      testAutocompleteItems.forEach(function (item) {
        if (item.startsWith(testSearch)) {
          expect(_react2.screen.queryByText(item)).toBeInTheDocument();
        } else {
          expect(_react2.screen.queryByText(item)).not.toBeInTheDocument();
        }
      });
    });
    it('should allow user to add item via popover', function () {
      var mockOnAdd = jest.fn();
      var testAutocompleteItems = ['Testing1', 'Testing2', 'Testing3', 'Other'];
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_TagInput["default"], {
        autocompleteItems: testAutocompleteItems,
        values: TEST_VALUES,
        onAdd: mockOnAdd,
        inputProps: {
          placeholder: TEST_PLACEHOLDER
        }
      }));

      _userEvent["default"].click(_react2.screen.getByTestId('TagInput-autocomplete-toggle'));

      _userEvent["default"].click(_react2.screen.getByText(testAutocompleteItems[0]));

      expect(mockOnAdd).toHaveBeenCalledWith([testAutocompleteItems[0]]);
    });
  });
});