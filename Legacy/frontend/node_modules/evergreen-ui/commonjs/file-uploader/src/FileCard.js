"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _humanizePlus = _interopRequireDefault(require("humanize-plus"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = _interopRequireDefault(require("ui-box"));

var _buttons = require("../../buttons");

var _hooks = require("../../hooks");

var _icons = require("../../icons");

var _image = require("../../image");

var _layers = require("../../layers");

var _hasValue = _interopRequireDefault(require("../../lib/has-value"));

var _isFunction = _interopRequireDefault(require("../../lib/is-function"));

var _scales = require("../../scales");

var _spinner = require("../../spinner");

var _theme = require("../../theme");

var _typography = require("../../typography");

var _getIconFromType = _interopRequireDefault(require("./utils/get-icon-from-type"));

var _isImage = _interopRequireDefault(require("./utils/is-image"));

var _excluded = ["description", "disabled", "isInvalid", "isLoading", "name", "onRemove", "sizeInBytes", "src", "type", "validationMessage"],
    _excluded2 = ["className"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var imageSize = (0, _scales.majorScale)(5);
var styleModifiers = {};
var pseudoSelectors = {
  _invalid: "&[aria-invalid='true']"
};
var internalStyles = {};
var FileCard = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var description = props.description,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$isInvalid = props.isInvalid,
      isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,
      _props$isLoading = props.isLoading,
      isLoading = _props$isLoading === void 0 ? false : _props$isLoading,
      name = props.name,
      onRemove = props.onRemove,
      sizeInBytes = props.sizeInBytes,
      src = props.src,
      type = props.type,
      validationMessage = props.validationMessage,
      rest = (0, _objectWithoutProperties2["default"])(props, _excluded);

  var _useTheme = (0, _theme.useTheme)(),
      colors = _useTheme.colors;

  var _useStyleConfig = (0, _hooks.useStyleConfig)('FileCard', styleModifiers, pseudoSelectors, internalStyles),
      className = _useStyleConfig.className,
      boxProps = (0, _objectWithoutProperties2["default"])(_useStyleConfig, _excluded2);

  var FileTypeIcon = (0, _getIconFromType["default"])(type);
  var renderImage = (0, _hasValue["default"])(src) && (0, _isImage["default"])(type);
  var renderInvalidIcon = !isLoading && isInvalid;
  var renderDefaultIcon = !isLoading && !isInvalid;
  return /*#__PURE__*/_react["default"].createElement(_uiBox["default"], {
    ref: ref,
    display: "flex",
    flexDirection: "column",
    marginBottom: isInvalid ? (0, _scales.majorScale)(1) : (0, _scales.majorScale)(2)
  }, /*#__PURE__*/_react["default"].createElement(_uiBox["default"], (0, _extends2["default"])({
    "aria-invalid": isInvalid,
    className: className
  }, boxProps, rest), /*#__PURE__*/_react["default"].createElement(_uiBox["default"], {
    alignItems: "center",
    display: "flex",
    flexDirection: "row",
    width: "100%"
  }, /*#__PURE__*/_react["default"].createElement(_uiBox["default"], {
    marginLeft: (0, _scales.majorScale)(2),
    marginRight: (0, _scales.majorScale)(1)
  }, renderImage ? /*#__PURE__*/_react["default"].createElement(_image.Image, {
    height: imageSize,
    src: src,
    width: imageSize
  }) : /*#__PURE__*/_react["default"].createElement(_layers.Card, {
    alignItems: "center",
    backgroundColor: isInvalid || isLoading ? undefined : colors.gray90,
    display: "flex",
    height: (0, _scales.majorScale)(5),
    justifyContent: "center",
    width: (0, _scales.majorScale)(5)
  }, isLoading && /*#__PURE__*/_react["default"].createElement(_spinner.Spinner, {
    size: (0, _scales.majorScale)(2)
  }), renderInvalidIcon && /*#__PURE__*/_react["default"].createElement(_icons.InfoSignIcon, {
    color: colors.red500,
    size: (0, _scales.majorScale)(2)
  }), renderDefaultIcon && /*#__PURE__*/_react["default"].createElement(FileTypeIcon, {
    color: colors.gray600,
    size: (0, _scales.majorScale)(2)
  }))), /*#__PURE__*/_react["default"].createElement(_uiBox["default"], {
    display: "flex",
    flexDirection: "column",
    overflow: "hidden"
  }, /*#__PURE__*/_react["default"].createElement(_typography.Paragraph, {
    color: colors.gray800,
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis"
  }, name), /*#__PURE__*/_react["default"].createElement(_typography.Paragraph, {
    color: colors.gray700,
    size: 300
  }, (0, _hasValue["default"])(description) ? description : _humanizePlus["default"].fileSize(sizeInBytes, 0))), (0, _isFunction["default"])(onRemove) && /*#__PURE__*/_react["default"].createElement(_buttons.IconButton, {
    appearance: "minimal",
    disabled: disabled || isLoading,
    icon: _icons.TrashIcon,
    onClick: onRemove,
    marginLeft: "auto",
    marginRight: (0, _scales.majorScale)(2),
    type: "button"
  }))), (0, _hasValue["default"])(validationMessage) && /*#__PURE__*/_react["default"].createElement(_typography.Paragraph, {
    color: colors.red500,
    size: "small"
  }, validationMessage));
}));
FileCard.propTypes = {
  /**
   * Description to display under the file name. If not provided, defaults to the file size
   */
  description: _propTypes["default"].string,

  /**
   * Disables the button to remove the file
   */
  disabled: _propTypes["default"].bool,

  /**
   * When true, displays the card in an error state
   */
  isInvalid: _propTypes["default"].bool,

  /**
   * Sets a loading state on the card. If the remove button is rendered, it will be disabled
   */
  isLoading: _propTypes["default"].bool,

  /**
   * Name of the file to display
   */
  name: _propTypes["default"].string,

  /**
   * Callback to be fired when the remove button is clicked. If not provided, the button will not
   * render
   */
  onRemove: _propTypes["default"].func,

  /**
   * Size of the file
   */
  sizeInBytes: _propTypes["default"].number,

  /**
   * Url of the uploaded image
   */
  src: _propTypes["default"].string,

  /**
   * MimeType of the file to display, which controls what type of icon is rendered
   */
  type: _propTypes["default"].string,

  /**
   * Message to display underneath the card
   */
  validationMessage: _propTypes["default"].string
};
var _default = FileCard;
exports["default"] = _default;