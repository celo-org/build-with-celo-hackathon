"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = _interopRequireDefault(require("lodash.merge"));

var _splitFiles = _interopRequireDefault(require("./split-files"));

/**
 * @typedef {object} RebaseFilesOptions
 * @property {string[] | undefined} acceptedMimeTypes
 * @property {number | undefined} maxFiles
 * @property {number | undefined} maxSizeInBytes
 */

/**
 * @typedef {object} RebaseFilesResult
 * @property {File[]} accepted
 * @property {FileRejection[]} rejected
 */

/**
 * Returns separate arrays for accepted and rejected files based on the provided options, similar to
 * `splitFiles`. This function should be used for rebasing files on removal (i.e. for removing files
 * from the `rejected` array when they are no longer over maximum limit, if there is one)
 * @param {File[]} files
 * @param {RebaseFilesOptions | undefined} options
 * @returns {RebaseFilesResult}
 */
var rebaseFiles = function rebaseFiles(files, options) {
  return (0, _splitFiles["default"])(files, (0, _lodash["default"])({}, options !== null && options !== void 0 ? options : {}, {
    currentFileCount: null
  }));
};

var _default = rebaseFiles;
exports["default"] = _default;