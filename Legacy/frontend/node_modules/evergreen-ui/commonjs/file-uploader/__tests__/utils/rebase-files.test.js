"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

var _utils = require("../../../test/utils");

var _rebaseFiles = _interopRequireDefault(require("../../src/utils/rebase-files"));

var splitFilesModule = _interopRequireWildcard(require("../../src/utils/split-files"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('rebaseFiles', function () {
  it("should not take 'currentFileCount' into consideration in split files", function () {
    var maxFiles = 5;
    var files = (0, _utils.buildFiles)(maxFiles); // Despite passing a value for currentFileCount, it should be wiped out

    var currentFileCount = 3;
    var splitFilesSpy = jest.spyOn(splitFilesModule, 'default');
    var result = (0, _rebaseFiles["default"])(files, {
      currentFileCount: currentFileCount,
      maxFiles: maxFiles
    });
    expect(result.rejected).toStrictEqual([]);
    expect(splitFilesSpy).toHaveBeenCalledWith(files, expect.objectContaining({
      currentFileCount: null
    }));
  });
});