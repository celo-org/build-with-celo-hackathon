"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _preventBodyScroll = _interopRequireDefault(require("../prevent-body-scroll"));

describe('preventBodyScroll', function () {
  it('Should change body overflow to hidden on true and reset overflow on false', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            expect(document.body.style.overflow).toEqual('');
            (0, _preventBodyScroll["default"])(true);
            expect(document.body.style.overflow).toEqual('hidden');
            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual('');

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('Should be able to handle changes from other scripts changing body overflow', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // Repeat logic of first test
            expect(document.body.style.overflow).toEqual('');
            (0, _preventBodyScroll["default"])(true);
            expect(document.body.style.overflow).toEqual('hidden');
            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual(''); // Outside source changes overflow to hidden

            document.body.style.overflow = 'hidden'; // Restores 'hidden' as expected

            expect(document.body.style.overflow).toEqual('hidden');
            (0, _preventBodyScroll["default"])(true);
            expect(document.body.style.overflow).toEqual('hidden');
            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual('hidden'); // 'hidden' should no longer be apart of the history

            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual(''); // Outside source changes overflow to ''

            document.body.style.overflow = ''; // Repeat steps from first test to ensure it is not affected

            expect(document.body.style.overflow).toEqual('');
            (0, _preventBodyScroll["default"])(true);
            expect(document.body.style.overflow).toEqual('hidden');
            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual('');

          case 19:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('Should be able to restore multiple layers of overflow values', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            document.body.style.overflow = ''; // First overlay

            (0, _preventBodyScroll["default"])(true);
            expect(document.body.style.overflow).toEqual('hidden'); // Second overlay

            (0, _preventBodyScroll["default"])(true);
            expect(document.body.style.overflow).toEqual('hidden'); // Third overlay

            (0, _preventBodyScroll["default"])(true);
            expect(document.body.style.overflow).toEqual('hidden'); // Remove third overlay

            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual('hidden'); // Remove second overlay

            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual('hidden'); // Remove first overlay

            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual('');

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
});