"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactTinyVirtualList = _interopRequireDefault(require("@segment/react-tiny-virtual-list"));

var _fuzzaldrinPlus = _interopRequireDefault(require("fuzzaldrin-plus"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _icons = require("../../icons");

var _image = require("../../image");

var _layers = require("../../layers");

var _SearchTableHeaderCell = _interopRequireDefault(require("../../table/src/SearchTableHeaderCell"));

var _TableHead = _interopRequireDefault(require("../../table/src/TableHead"));

var _theme = require("../../theme");

var _Option = _interopRequireDefault(require("./Option"));

var _OptionShapePropType = _interopRequireDefault(require("./OptionShapePropType"));

var _excluded = ["options", "optionSize", "close", "closeOnSelect", "onSelect", "onDeselect", "onFilterChange", "hasFilter", "selected", "optionsFilter", "isMultiSelect", "height", "width", "renderItem", "filterPlaceholder", "filterIcon", "defaultSearchValue"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Fuzzaldrin-plus is the default filter, but you can use your own
 * as long as they follow the following signature:
 * @param options <Array[String]> - ['label', 'label2', ...]
 * @param input <String>
 */
var fuzzyFilter = function fuzzyFilter(options, input, _ref) {
  var key = _ref.key;
  return _fuzzaldrinPlus["default"].filter(options, input, {
    key: key
  });
};

var noop = function noop() {};

var defaultRenderItem = function defaultRenderItem(props) {
  return /*#__PURE__*/_react["default"].createElement(_Option["default"], props, props.icon && /*#__PURE__*/_react["default"].createElement(_image.Image, {
    src: props.icon,
    width: 24,
    marginRight: 8
  }), props.label);
};

defaultRenderItem.displayName = "defaultRenderItem";
var OptionsList = /*#__PURE__*/(0, _react.memo)(function OptionsList(props) {
  var _props$options = props.options,
      originalOptions = _props$options === void 0 ? [] : _props$options,
      _props$optionSize = props.optionSize,
      optionSize = _props$optionSize === void 0 ? 33 : _props$optionSize,
      close = props.close,
      closeOnSelect = props.closeOnSelect,
      _props$onSelect = props.onSelect,
      onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,
      _props$onDeselect = props.onDeselect,
      onDeselect = _props$onDeselect === void 0 ? noop : _props$onDeselect,
      _props$onFilterChange = props.onFilterChange,
      onFilterChange = _props$onFilterChange === void 0 ? noop : _props$onFilterChange,
      hasFilter = props.hasFilter,
      _props$selected = props.selected,
      selected = _props$selected === void 0 ? [] : _props$selected,
      optionsFilter = props.optionsFilter,
      isMultiSelect = props.isMultiSelect,
      height = props.height,
      width = props.width,
      _props$renderItem = props.renderItem,
      _renderItem = _props$renderItem === void 0 ? defaultRenderItem : _props$renderItem,
      _props$filterPlacehol = props.filterPlaceholder,
      filterPlaceholder = _props$filterPlacehol === void 0 ? 'Filter...' : _props$filterPlacehol,
      _props$filterIcon = props.filterIcon,
      filterIcon = _props$filterIcon === void 0 ? _icons.SearchIcon : _props$filterIcon,
      _props$defaultSearchV = props.defaultSearchValue,
      defaultSearchValue = _props$defaultSearchV === void 0 ? '' : _props$defaultSearchV,
      rest = (0, _objectWithoutProperties2["default"])(props, _excluded);

  var _useState = (0, _react.useState)(defaultSearchValue),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      searchValue = _useState2[0],
      setSearchValue = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      searchRef = _useState4[0],
      setSearchRef = _useState4[1];

  var requestId = (0, _react.useRef)();
  var theme = (0, _theme.useTheme)();
  var tokens = theme.tokens;
  var isSelected = (0, _react.useCallback)(function (item) {
    return Boolean(selected.find(function (selectedItem) {
      return selectedItem === item.value;
    }));
  }, [selected]);
  var optionLabels = (0, _react.useMemo)(function () {
    return originalOptions.map(function (item) {
      return item.label;
    });
  }, [originalOptions]); // Gets filtered options any time the filter fn, value, or options change

  var options = (0, _react.useMemo)(function () {
    if (searchValue.trim() === '') {
      return originalOptions;
    } // Preserve backwards compatibility with allowing custom filters, which accept array of strings


    if (typeof optionsFilter === 'function') {
      return optionsFilter(optionLabels, searchValue).map(function (name) {
        return originalOptions.find(function (item) {
          return item.label === name;
        });
      });
    }

    return fuzzyFilter(originalOptions, searchValue, {
      key: 'label'
    });
  }, [originalOptions, optionLabels, optionsFilter, searchValue]);
  var getCurrentIndex = (0, _react.useCallback)(function () {
    return options.findIndex(function (option) {
      return option.value === selected[selected.length - 1];
    });
  }, [selected, options]);
  var handleArrowUp = (0, _react.useCallback)(function () {
    var nextIndex = getCurrentIndex() - 1;

    if (nextIndex < 0) {
      nextIndex = options.length - 1;
    }

    if (isSelected(options[nextIndex])) {
      return;
    }

    onSelect(options[nextIndex]);
  }, [onSelect, options, getCurrentIndex, isSelected]);
  var handleArrowDown = (0, _react.useCallback)(function () {
    var nextIndex = getCurrentIndex() + 1;

    if (nextIndex === options.length) {
      nextIndex = 0;
    }

    if (!isSelected(options[nextIndex])) {
      onSelect(options[nextIndex]);
    }
  }, [onSelect, options, getCurrentIndex, isSelected]);
  var handleChange = (0, _react.useCallback)(function (searchValue) {
    setSearchValue(searchValue);
    onFilterChange(searchValue);
  }, [onFilterChange]);
  var handleSelect = (0, _react.useCallback)(function (item) {
    if (isSelected(item) && isMultiSelect) {
      onDeselect(item);
    } else {
      onSelect(item);
    }

    if (!isMultiSelect && closeOnSelect) {
      close();
    }
  }, [onDeselect, isMultiSelect, closeOnSelect, onSelect, isSelected, close]);
  var handleEnter = (0, _react.useCallback)(function () {
    var isSelected = getCurrentIndex() !== -1;

    if (isSelected) {
      if (!isMultiSelect && closeOnSelect) {
        close();
      }
    }
  }, [isMultiSelect, close, closeOnSelect, getCurrentIndex]);
  var handleDeselect = (0, _react.useCallback)(function (item) {
    onDeselect(item);
  }, [onDeselect]);
  var handleKeyDown = (0, _react.useCallback)(function (e) {
    if (e.key === 'ArrowUp') {
      handleArrowUp();
    }

    if (e.key === 'ArrowDown') {
      handleArrowDown();
    }

    if (e.key === 'Enter') {
      handleEnter();
    }

    if (e.key === 'Escape') {
      close();
    }
  }, [close, handleArrowUp, handleArrowDown, handleEnter]);
  (0, _react.useEffect)(function () {
    if (hasFilter) {
      requestId.current = requestAnimationFrame(function () {
        if (searchRef) {
          searchRef.focus();
        }
      });
      window.addEventListener('keydown', handleKeyDown);
      return function () {
        cancelAnimationFrame(requestId.current);
        window.removeEventListener('keydown', handleKeyDown);
      };
    }
  }, [hasFilter, searchRef, handleKeyDown]);
  var listHeight = height - (hasFilter ? 32 : 0);
  var currentIndex = getCurrentIndex();
  var scrollToIndex = currentIndex === -1 ? 0 : currentIndex;
  return /*#__PURE__*/_react["default"].createElement(_layers.Pane, (0, _extends2["default"])({
    height: height,
    width: width,
    display: "flex",
    flexDirection: "column"
  }, rest), hasFilter && /*#__PURE__*/_react["default"].createElement(_TableHead["default"], {
    height: 32,
    backgroundColor: tokens.colors.gray50
  }, /*#__PURE__*/_react["default"].createElement(_SearchTableHeaderCell["default"], {
    onChange: handleChange,
    ref: setSearchRef,
    borderRight: null,
    placeholder: filterPlaceholder,
    icon: filterIcon
  })), /*#__PURE__*/_react["default"].createElement(_layers.Pane, {
    flex: 1
  }, options.length > 0 && /*#__PURE__*/_react["default"].createElement(_reactTinyVirtualList["default"], {
    height: listHeight,
    width: "100%",
    itemSize: optionSize,
    itemCount: options.length,
    overscanCount: 20,
    scrollToAlignment: "auto",
    scrollToIndex: scrollToIndex || undefined,
    renderItem: function renderItem(_ref2) {
      var index = _ref2.index,
          style = _ref2.style;
      var item = options[index];
      var isItemSelected = isSelected(item);
      var itemProps = {
        key: item.value,
        label: item.label,
        icon: item.icon,
        item: item,
        style: style,
        height: optionSize,
        onSelect: function onSelect() {
          return handleSelect(item);
        },
        onDeselect: function onDeselect() {
          return handleDeselect(item);
        },
        isSelectable: !isItemSelected || isMultiSelect,
        isSelected: isItemSelected,
        disabled: item.disabled,
        tabIndex: 0
      };
      return _renderItem(itemProps);
    }
  })));
});
OptionsList.propTypes = {
  options: _propTypes["default"].arrayOf(_OptionShapePropType["default"]),
  close: _propTypes["default"].func,
  height: _propTypes["default"].number,
  width: _propTypes["default"].number,

  /**
   * When true, multi select is accounted for.
   */
  isMultiSelect: _propTypes["default"].bool,

  /**
   * When true, menu closes on option selection.
   */
  closeOnSelect: _propTypes["default"].bool,

  /**
   * This holds the values of the options
   */
  selected: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number])),
  onSelect: _propTypes["default"].func,
  onDeselect: _propTypes["default"].func,
  onFilterChange: _propTypes["default"].func,
  hasFilter: _propTypes["default"].bool,
  optionSize: _propTypes["default"].number,
  renderItem: _propTypes["default"].func,
  filterPlaceholder: _propTypes["default"].string,
  filterIcon: _propTypes["default"].oneOfType([_propTypes["default"].elementType, _propTypes["default"].element]),
  optionsFilter: _propTypes["default"].func,
  defaultSearchValue: _propTypes["default"].string
};
var _default = OptionsList;
exports["default"] = _default;