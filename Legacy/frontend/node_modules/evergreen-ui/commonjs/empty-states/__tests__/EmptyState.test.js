"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _icons = require("../../icons");

var _themes = require("../../themes");

var _index = require("../../typography/index");

var _SmallExample = _interopRequireDefault(require("../fixtures/SmallExample"));

var _SmallMinimalExample = _interopRequireDefault(require("../fixtures/SmallMinimalExample"));

var _EmptyState = _interopRequireDefault(require("../src/EmptyState"));

describe('Empty States', function () {
  it('does not crash when rendering', function () {
    expect(function () {
      return (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_EmptyState["default"], {
        title: "My Empty States",
        icon: /*#__PURE__*/_react["default"].createElement(_icons.LockIcon, {
          color: _themes.defaultTheme.tokens.colors.gray500
        }),
        iconBgColor: _themes.defaultTheme.tokens.colors.gray200
      }));
    }).not.toThrowError();
  });
  it('should render an icon and a title', function () {
    var _render = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_EmptyState["default"], {
      title: "My Empty States",
      icon: /*#__PURE__*/_react["default"].createElement(_icons.LockIcon, {
        color: _themes.defaultTheme.tokens.colors.gray500
      }),
      iconBgColor: _themes.defaultTheme.tokens.colors.gray200
    })),
        getByText = _render.getByText;

    expect(getByText('My Empty States')).toBeVisible();
  });
  it('should render decription when passed in', function () {
    var _render2 = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_EmptyState["default"], {
      title: "My Empty States",
      icon: /*#__PURE__*/_react["default"].createElement(_icons.LockIcon, {
        color: _themes.defaultTheme.tokens.colors.gray500
      }),
      iconBgColor: _themes.defaultTheme.tokens.colors.gray200,
      description: "Some description"
    })),
        getByText = _render2.getByText;

    expect(getByText('Some description')).toBeVisible();
  });
  it('should render react component when react component is passed as a description prop', function () {
    var _render3 = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_EmptyState["default"], {
      title: "My Empty States",
      icon: /*#__PURE__*/_react["default"].createElement(_icons.LockIcon, {
        color: _themes.defaultTheme.tokens.colors.gray500
      }),
      iconBgColor: _themes.defaultTheme.tokens.colors.gray200,
      description: /*#__PURE__*/_react["default"].createElement(_index.Text, null, "Example Text")
    })),
        getByText = _render3.getByText;

    expect(getByText('Example Text')).toBeVisible();
  });
  it('should render primary button when passed in', function () {
    var _render4 = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_EmptyState["default"], {
      title: "My Empty States",
      icon: /*#__PURE__*/_react["default"].createElement(_icons.LockIcon, {
        color: _themes.defaultTheme.tokens.colors.gray500
      }),
      iconBgColor: _themes.defaultTheme.tokens.colors.gray200,
      primaryCta: /*#__PURE__*/_react["default"].createElement(_EmptyState["default"].PrimaryButton, null, "Primary Action")
    })),
        getByRole = _render4.getByRole;

    expect(getByRole('button', {
      name: 'Primary Action'
    })).toBeVisible();
  });
  it('should render link button when passed in', function () {
    var _render5 = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_EmptyState["default"], {
      title: "My Empty States",
      icon: /*#__PURE__*/_react["default"].createElement(_icons.LockIcon, {
        color: _themes.defaultTheme.tokens.colors.gray500
      }),
      iconBgColor: _themes.defaultTheme.tokens.colors.gray200,
      anchorCta: /*#__PURE__*/_react["default"].createElement(_EmptyState["default"].LinkButton, {
        href: "https://segment.com/docs/",
        target: "_blank"
      }, "Link to Documentation")
    })),
        getByRole = _render5.getByRole;

    expect(getByRole('link')).toBeVisible();
  }); // Small Minimal Example with just icon and title

  it('should render icon and title in minimal popup', function () {
    var _render6 = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_SmallMinimalExample["default"], {
      popoverProps: {
        isShown: true,
        statelessProps: {
          'data-testid': 'empty-state-container'
        }
      }
    })),
        getByTestId = _render6.getByTestId;

    var container = getByTestId('empty-state-container');
    expect(container.querySelector('svg')).toBeVisible();
    expect(container.querySelector('svg')).toHaveAttribute('data-icon', 'hand-up');
  }); // Small Example

  it('should render icon, title, description, CTA in popup', function () {
    var _render7 = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_SmallExample["default"], {
      popoverProps: {
        isShown: true,
        statelessProps: {
          'data-testid': 'empty-state-container'
        }
      }
    })),
        getAllByText = _render7.getAllByText,
        getByRole = _render7.getByRole,
        getByTestId = _render7.getByTestId;

    var container = getByTestId('empty-state-container');
    expect(getAllByText('You need permission to access these sources')).toHaveLength(1);
    expect(getAllByText('If you believe you should have accesss to this page, please check with your Workspace Owner or request access below.')).toHaveLength(1);
    expect(getByRole('button', {
      name: 'Request Access'
    })).toBeVisible();
    expect(container.querySelector('svg')).toBeVisible();
    expect(container.querySelector('svg')).toHaveAttribute('data-icon', 'lock');
  });
});