"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _LockIcon = require("../../icons/generated/LockIcon");

var _theme = require("../../theme");

var _themes = require("../../themes");

var _Button = _interopRequireDefault(require("../src/Button"));

var _IconButton = _interopRequireDefault(require("../src/IconButton"));

describe.each([['default', _themes.defaultTheme], ['classic', _themes.classicTheme]])('<Button /> % %s', function (_, theme) {
  it('snapshots with the rendered output', function () {
    var component = /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
      value: theme
    }, /*#__PURE__*/_react["default"].createElement(_Button["default"], null));

    var tree = _reactTestRenderer["default"].create(component).toJSON();

    expect(tree).toMatchSnapshot();
  });
});

function makeButtonFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/_react["default"].createElement(_Button["default"], (0, _extends2["default"])({
    "data-testid": "button"
  }, props), "Test");
}

makeButtonFixture.displayName = "makeButtonFixture";

function makeIconButtonFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/_react["default"].createElement(_IconButton["default"], (0, _extends2["default"])({
    "data-testid": "button"
  }, props));
}

makeIconButtonFixture.displayName = "makeIconButtonFixture";
describe('Button', function () {
  it('renders children without crashing', function () {
    expect(function () {
      return (0, _react2.render)(makeButtonFixture());
    }).not.toThrow();
  });
  it('accepts an `onClick` handler that gets called upon clicking', function () {
    var onClick = jest.fn();

    var _render = (0, _react2.render)(makeButtonFixture({
      onClick: onClick
    })),
        getByTestId = _render.getByTestId;

    var container = getByTestId('button');

    _userEvent["default"].click(container);

    expect(onClick).toHaveBeenCalledTimes(1);
  });
  it('has a `disabled` prop that disables the button', function () {
    var onClick = jest.fn();

    var _render2 = (0, _react2.render)(makeButtonFixture({
      onClick: onClick,
      disabled: true
    })),
        getByTestId = _render2.getByTestId;

    var container = getByTestId('button');
    expect(function () {
      return _userEvent["default"].click(container);
    }).toThrowError();
    expect(onClick).toHaveBeenCalledTimes(0);
  });
  it('has a `isLoading` prop that renders a spinner and disables the button', function () {
    var onClick = jest.fn();

    var _render3 = (0, _react2.render)(makeButtonFixture({
      onClick: onClick,
      isLoading: true
    })),
        getByTestId = _render3.getByTestId;

    var container = getByTestId('button');
    expect(function () {
      return _userEvent["default"].click(container);
    }).toThrowError();
    expect(container.querySelector('svg')).toBeVisible();
    expect(onClick).toHaveBeenCalledTimes(0);
  });
  it('renders an icon in either the `iconBefore` props', function () {
    var _render4 = (0, _react2.render)(makeButtonFixture({
      iconBefore: _LockIcon.LockIcon
    })),
        getByTestId = _render4.getByTestId;

    var container = getByTestId('button');
    expect(container.querySelector('svg')).toHaveAttribute('data-icon', 'lock');
  });
  it('renders an icon in either the `iconAfter` props', function () {
    var _render5 = (0, _react2.render)(makeButtonFixture({
      iconAfter: _LockIcon.LockIcon
    })),
        getByTestId = _render5.getByTestId;

    var container = getByTestId('button');
    expect(container.querySelector('svg')).toHaveAttribute('data-icon', 'lock');
  });
  it('properly handles keyboard events to simulate clicks', function () {
    var onClick = jest.fn();

    var _render6 = (0, _react2.render)(makeButtonFixture({
      onClick: onClick,
      iconAfter: _LockIcon.LockIcon
    })),
        getByTestId = _render6.getByTestId;

    var container = getByTestId('button');
    container.focus();
    expect(document.activeElement).toEqual(container);

    _userEvent["default"].keyboard('{enter}');

    expect(onClick).toHaveBeenCalledTimes(1);

    _userEvent["default"].keyboard('{space}');

    expect(onClick).toHaveBeenCalledTimes(2);
  });
});
describe('IconButton', function () {
  it('Passes through an icon when passes as a component reference', function () {
    var _render7 = (0, _react2.render)(makeIconButtonFixture({
      icon: _LockIcon.LockIcon
    })),
        getByTestId = _render7.getByTestId;

    var container = getByTestId('button');
    expect(container.querySelector('svg')).toHaveAttribute('data-icon', 'lock');
  });
  it('Passes through an instantiated component as `icon`', function () {
    var _render8 = (0, _react2.render)(makeIconButtonFixture({
      icon: /*#__PURE__*/_react["default"].createElement(_LockIcon.LockIcon, {
        size: 24
      })
    })),
        getByTestId = _render8.getByTestId;

    var container = getByTestId('button');
    var svg = container.querySelector('svg');
    expect(window.getComputedStyle(svg).width).toEqual('24px');
    expect(window.getComputedStyle(svg).height).toEqual('24px');
  });
});