"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _testing = require("../../../lib/testing");

var _theme = require("../../theme");

var _themes = require("../../themes");

var _Heading = _interopRequireDefault(require("../src/Heading"));

expect.addSnapshotSerializer(_testing.UIBoxSerializer);
test.each([['size 100', 100], ['size 200', 200], ['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600], ['size 700', 700], ['size 800', 800], ['size 900', 900]])('<Heading /> %s renders as expected', function (_, size) {
  var component = /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
    value: _themes.defaultTheme
  }, /*#__PURE__*/_react["default"].createElement(_Heading["default"], {
    size: size
  }, "Heading ".concat(size)));

  var tree = _reactTestRenderer["default"].create(component).toJSON();

  expect(tree).toMatchSnapshot();
});
test('Heading lets you override the underlying DOM element', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
            value: _themes.defaultTheme
          }, /*#__PURE__*/_react["default"].createElement(_Heading["default"], {
            is: "h1"
          }, "Testing h1")));
          expect(_react2.screen.getByText('Testing h1', {
            selector: 'h1'
          })).toBeTruthy();

        case 2:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));