"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _faker = require("@faker-js/faker");

var _react2 = require("@testing-library/react");

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _testing = require("../../../lib/testing");

var _theme = require("../../theme");

var _themes = require("../../themes");

var _Text = _interopRequireDefault(require("../src/Text"));

expect.addSnapshotSerializer(_testing.UIBoxSerializer);
test.each([['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600]])('<Text /> %s renders as expected', function (_, size) {
  var component = /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
    value: _themes.defaultTheme
  }, /*#__PURE__*/_react["default"].createElement(_Text["default"], {
    size: size
  }, "Text ".concat(size)));

  var tree = _reactTestRenderer["default"].create(component).toJSON();

  expect(tree).toMatchSnapshot();
});
describe('Colors', function () {
  test('<Text /> accepts arbitrary theme values for color', function () {
    var component = /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
      value: _themes.defaultTheme
    }, /*#__PURE__*/_react["default"].createElement(_Text["default"], {
      color: "muted"
    }, "Testing"), ' ');

    var tree = _reactTestRenderer["default"].create(component).toJSON();

    expect(tree).toMatchSnapshot();
  });
  test('<Text /> does not render any color when a non-theme color is passed in ', function () {
    var component = /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
      value: _themes.defaultTheme
    }, /*#__PURE__*/_react["default"].createElement(_Text["default"], {
      color: "SOMETHING DOESNT EXISt"
    }, "Testing"), ' ');

    var tree = _reactTestRenderer["default"].create(component).toJSON();

    expect(tree).toMatchSnapshot();
  });
});
describe('Sizing', function () {
  var originalConsoleError = console.error;
  var mockFn = jest.fn();
  beforeEach(function () {
    console.error = mockFn;
  });
  afterEach(function () {
    console.error = originalConsoleError;
  });
  test('<Text /> has undefined behavior when trying to set arbitrary sizes', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Text["default"], {
      size: 800
    }));
    expect(mockFn.mock.calls.length).toBeGreaterThanOrEqual(1);
    expect(mockFn.mock.calls[0][0]).toMatchInlineSnapshot("\n      Extracted Styles:\n      box-sizing: border-box;\n      color: #474d66;\n      font-family: \"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n\n\n      \"Warning: Failed %s type: %s%s\"\n    ");
  });
});
describe('Props', function () {
  it('should forward `className` prop', function () {
    var expected = _faker.faker.random.word().toLowerCase();

    var component = /*#__PURE__*/_react["default"].createElement(_Text["default"], {
      "data-testid": "text",
      className: expected
    }, "Testing");

    var _render = (0, _react2.render)(component),
        getByTestId = _render.getByTestId;

    expect(getByTestId('text')).toHaveClass(expected);
  });
});