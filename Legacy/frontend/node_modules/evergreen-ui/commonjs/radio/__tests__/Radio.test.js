"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _Radio = _interopRequireDefault(require("../src/Radio"));

describe('Radio', function () {
  it('should not crash when rendering', function () {
    expect(function () {
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], null));
    }).not.toThrowError();
  });
  it('should render the component', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      "data-testid": "test-id-radio"
    }));
    expect(_react2.screen.getByTestId('test-id-radio')).toBeVisible();
  });
  it('should render with an id when id is specified', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      id: "test-123"
    }));
    expect(_react2.screen.getByRole('radio').getAttribute('id')).toEqual('test-123');
  });
  it('should render with a name when name is specified', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      name: "test-name"
    }));
    expect(_react2.screen.getByRole('radio').getAttribute('name')).toEqual('test-name');
  });
  it('should render with a label when label is specified', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      label: "Select"
    }));
    expect(_react2.screen.getByLabelText('Select')).toBeInTheDocument();
  });
  it('should render with a value when value is specified', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      value: "test-value"
    }));
    expect(_react2.screen.getByRole('radio').getAttribute('value')).toEqual('test-value');
  });
  it('should render a disabled state when disabled is true', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      disabled: true
    }));
    expect(_react2.screen.getByRole('radio')).toBeDisabled();
  });
  it('should render a checked state when checked is true', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      checked: true
    }));
    expect(_react2.screen.getByRole('radio')).toBeChecked();
  });
  it('should render a required state when isRequired is true', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      isRequired: true
    }));
    expect(_react2.screen.getByRole('radio').required).toBeTruthy();
  });
  it('should render an invalid state when isInvalid is true', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      isInvalid: true
    }));
    expect(_react2.screen.getByRole('radio')).toBeInvalid();
  });
  it('should render a checked state when the radio is clicked', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], null));

    var radio = _react2.screen.getByRole('radio');

    expect(_react2.screen.getByRole('radio')).not.toBeChecked();

    _react2.fireEvent.click(radio);

    expect(_react2.screen.getByRole('radio')).toBeChecked();
  });
  it('should handle state change when onChange is specified', function () {
    var onChangeMock = jest.fn();
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      onChange: onChangeMock
    }));

    var radio = _react2.screen.getByRole('radio');

    expect(onChangeMock).toBeCalledTimes(0);

    _react2.fireEvent.click(radio);

    expect(onChangeMock).toBeCalledTimes(1);
  });
});