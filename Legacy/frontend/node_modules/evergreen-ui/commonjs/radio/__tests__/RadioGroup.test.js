"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _RadioGroup = _interopRequireDefault(require("../src/RadioGroup"));

describe('Radio Group', function () {
  var options = [{
    label: 'Read-only',
    value: 'read-only'
  }, {
    label: 'Write',
    value: 'write',
    isDisabled: true
  }, {
    label: 'Restricted',
    value: 'restricted'
  }];
  it('should not crash when rendering', function () {
    expect(function () {
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_RadioGroup["default"], {
        options: options
      }));
    }).not.toThrowError();
  });
  it('should render the radio options with the options specified', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_RadioGroup["default"], {
      options: options
    }));
    expect(_react2.screen.getByRole('group')).toBeVisible();
    expect(_react2.screen.getAllByRole('radio')).toHaveLength(3);
  });
  it('should show group label when label is specified', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_RadioGroup["default"], {
      options: options,
      label: "Permissions"
    }));
    expect(_react2.screen.getByRole('group').getAttribute('aria-label')).toEqual('Permissions');
    expect(_react2.screen.getByLabelText('Permissions')).toBeVisible();
  });
  it('should have all options in required states when isRequired is true', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_RadioGroup["default"], {
      options: options,
      isRequired: true
    }));

    _react2.screen.getAllByRole('radio').forEach(function (element) {
      expect(element).toBeRequired();
    });
  });
  it('should select the option that has the same value specified', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_RadioGroup["default"], {
      options: options,
      value: "write"
    }));
    expect(_react2.screen.getByRole('radio', {
      name: 'Write'
    })).toBeChecked();
  });
  it('should handle state change when onChange is specified', function () {
    var onChangeMock = jest.fn();
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_RadioGroup["default"], {
      options: options,
      value: "read-only",
      onChange: onChangeMock
    }));

    var radio = _react2.screen.getByRole('radio', {
      name: 'Restricted'
    });

    expect(onChangeMock).toBeCalledTimes(0);

    _react2.fireEvent.click(radio);

    expect(onChangeMock).toBeCalledTimes(1);
  }); // untested props: defaultValue, size
});