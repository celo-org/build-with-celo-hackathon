"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.CLASS_PREFIX = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = _interopRequireDefault(require("ui-box"));

var _buttons = require("../../buttons");

var _safeInvoke = _interopRequireDefault(require("../../lib/safe-invoke"));

var _textInput = require("../../text-input");

var _excluded = ["accept", "capture", "className", "disabled", "height", "multiple", "name", "onBlur", "onChange", "placeholder", "required"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var CLASS_PREFIX = 'evergreen-file-picker';
exports.CLASS_PREFIX = CLASS_PREFIX;
var FilePicker = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function FilePicker(props, ref) {
  var accept = props.accept,
      capture = props.capture,
      className = props.className,
      disabled = props.disabled,
      _props$height = props.height,
      height = _props$height === void 0 ? 32 : _props$height,
      multiple = props.multiple,
      name = props.name,
      onBlur = props.onBlur,
      onChange = props.onChange,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? 'Select a file to uploadâ€¦' : _props$placeholder,
      required = props.required,
      rest = (0, _objectWithoutProperties2["default"])(props, _excluded);

  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      files = _useState2[0],
      setFiles = _useState2[1];

  var fileInputRef = (0, _react.useRef)();
  var handleFileChange = (0, _react.useCallback)(function (e) {
    // Firefox returns the same array instance each time for some reason
    var filesCopy = (0, _toConsumableArray2["default"])(e.target.files);
    setFiles(filesCopy);
    (0, _safeInvoke["default"])(onChange, filesCopy);
  }, [onChange]);
  var handleButtonClick = (0, _react.useCallback)(function () {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  }, []);
  var handleBlur = (0, _react.useCallback)(function (e) {
    // Setting e.target.files to an array fails. It must be a FileList
    if (e && e.target) {
      e.target.files = fileInputRef.current && fileInputRef.current.files;
    }

    (0, _safeInvoke["default"])(onBlur, e);
  }, [onBlur]);
  var inputValue;

  if (files.length === 0) {
    inputValue = '';
  } else if (files.length === 1) {
    inputValue = files[0].name;
  } else {
    inputValue = "".concat(files.length, " files");
  }

  var buttonText;

  if (files.length === 0) {
    buttonText = 'Select file';
  } else if (files.length === 1) {
    buttonText = 'Replace file';
  } else {
    buttonText = 'Replace files';
  }

  var rootClassNames = (0, _classnames["default"])("".concat(CLASS_PREFIX, "-root"), className);
  return /*#__PURE__*/_react["default"].createElement(_uiBox["default"], (0, _extends2["default"])({
    display: "flex",
    className: rootClassNames,
    ref: ref
  }, rest), /*#__PURE__*/_react["default"].createElement(_uiBox["default"], {
    ref: fileInputRef,
    className: "".concat(CLASS_PREFIX, "-file-input"),
    is: "input",
    type: "file",
    name: name,
    accept: accept,
    required: required,
    multiple: multiple,
    disabled: disabled,
    capture: capture,
    onChange: handleFileChange,
    display: "none"
  }), /*#__PURE__*/_react["default"].createElement(_textInput.TextInput, {
    className: "".concat(CLASS_PREFIX, "-text-input"),
    readOnly: true,
    value: inputValue,
    placeholder: placeholder // There's a weird specifity issue when there's two differently sized inputs on the page
    ,
    borderTopRightRadius: "0 !important",
    borderBottomRightRadius: "0 !important",
    height: height,
    flex: 1,
    textOverflow: "ellipsis",
    onBlur: handleBlur
  }), /*#__PURE__*/_react["default"].createElement(_buttons.Button, {
    className: "".concat(CLASS_PREFIX, "-button"),
    onClick: handleButtonClick,
    disabled: disabled,
    borderTopLeftRadius: 0,
    borderBottomLeftRadius: 0,
    height: height,
    flexShrink: 0,
    type: "button",
    onBlur: handleBlur
  }, buttonText));
}));
FilePicker.propTypes = {
  /**
   * Name attribute of the input.
   */
  name: _propTypes["default"].string,

  /**
   * The accept attribute of the input.
   */
  accept: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string)]),

  /**
   * When true, the file picker is required.
   */
  required: _propTypes["default"].bool,

  /**
   * When true, accept multiple files.
   */
  multiple: _propTypes["default"].bool,

  /**
   * When true, the filepicker is disabled.
   */
  disabled: _propTypes["default"].bool,

  /**
   * The capture attribute of the input.
   */
  capture: _propTypes["default"].bool,

  /**
   * The height of the file picker.
   */
  height: _propTypes["default"].number,

  /**
   * Function called when onChange is fired.
   * (files: FileList) => void
   */
  onChange: _propTypes["default"].func,

  /**
   * Function called when onBlur is fired.
   * (event: React.FocusEvent) => void
   */
  onBlur: _propTypes["default"].func,

  /**
   * Placeholder of the text input
   */
  placeholder: _propTypes["default"].string,

  /**
   * Class name passed to the FilePicker.
   * Only use this if you know what you are doing.
   */
  className: _propTypes["default"].string
};
var _default = FilePicker;
exports["default"] = _default;