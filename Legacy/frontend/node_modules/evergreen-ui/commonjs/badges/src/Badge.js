"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _glamor = require("glamor");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _hooks = require("../../hooks");

var _typography = require("../../typography");

var _excluded = ["appearance", "className", "color", "isInteractive"],
    _excluded2 = ["className"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var pseudoSelectors = {};
var internalStyles = {
  display: 'inline-block',
  boxSizing: 'border-box',
  verticalAlign: 'middle'
};
var hoverClassName = (0, _glamor.css)({
  '&:hover': {
    opacity: 0.8
  },
  cursor: 'pointer'
});
var Badge = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function Badge(props, ref) {
  var _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? 'subtle' : _props$appearance,
      className = props.className,
      _props$color = props.color,
      color = _props$color === void 0 ? 'neutral' : _props$color,
      _props$isInteractive = props.isInteractive,
      isInteractive = _props$isInteractive === void 0 ? false : _props$isInteractive,
      restProps = (0, _objectWithoutProperties2["default"])(props, _excluded);

  var _useStyleConfig = (0, _hooks.useStyleConfig)('Badge', {
    appearance: appearance,
    color: color
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      styleProps = (0, _objectWithoutProperties2["default"])(_useStyleConfig, _excluded2);

  return /*#__PURE__*/_react["default"].createElement(_typography.Strong, (0, _extends2["default"])({
    ref: ref,
    size: 300,
    className: (0, _classnames["default"])(className, themedClassName, isInteractive && hoverClassName)
  }, styleProps, restProps));
}));
Badge.propTypes = _objectSpread(_objectSpread({}, _typography.Strong.propTypes), {}, {
  /**
   * The color used for the badge.
   */
  color: _propTypes["default"].string,

  /**
   * Whether or not to apply hover/focus/active styles
   */
  isInteractive: _propTypes["default"].bool
});
var _default = Badge;
exports["default"] = _default;