"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _faker = require("@faker-js/faker");

var _react2 = require("@testing-library/react");

var _ = require("..");

var makeTextareaFieldFixture = function makeTextareaFieldFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/_react["default"].createElement(_.TextareaField, (0, _extends2["default"])({
    "data-testid": "TextareaField",
    label: "TextareaField"
  }, props));
};

makeTextareaFieldFixture.displayName = "makeTextareaFieldFixture";
describe('TextareaField', function () {
  it('Should render', function () {
    expect(function () {
      return (0, _react2.render)(makeTextareaFieldFixture());
    }).not.toThrow();
  });
  describe('FormField props', function () {
    test('Should render label when provided', function () {
      var expected = _faker.faker.random.alphaNumeric();

      (0, _react2.render)(makeTextareaFieldFixture({
        label: expected
      }));
      expect(_react2.screen.getByLabelText(expected)).toBeInTheDocument();
    });
    test('Should render asterisk when required is true', function () {
      var label = _faker.faker.random.alphaNumeric();

      var expected = "".concat(label, " *");
      (0, _react2.render)(makeTextareaFieldFixture({
        label: label,
        required: true
      }));
      expect(_react2.screen.getByLabelText(expected)).toBeInTheDocument();
    });
    test('Should render hint when provided', function () {
      var expected = _faker.faker.random.alphaNumeric();

      (0, _react2.render)(makeTextareaFieldFixture({
        hint: expected
      }));
      expect(_react2.screen.getByText(expected)).toBeInTheDocument();
    });
    test('Should render description when provided', function () {
      var expected = _faker.faker.random.alphaNumeric();

      (0, _react2.render)(makeTextareaFieldFixture({
        description: expected
      }));
      expect(_react2.screen.getByText(expected)).toBeInTheDocument();
    });
    test('Should render validationMessage when provided', function () {
      var expected = _faker.faker.random.alphaNumeric();

      (0, _react2.render)(makeTextareaFieldFixture({
        validationMessage: expected
      }));
      expect(_react2.screen.getByText(expected)).toBeInTheDocument();
    });
    test('Should render label with `for` attribute for accessibility', function () {
      var _render = (0, _react2.render)(makeTextareaFieldFixture({
        label: _faker.faker.random.alphaNumeric()
      })),
          container = _render.container;

      var textarea = container.querySelector('textarea');
      var label = container.querySelector('label');
      expect(label).toHaveAttribute('for', textarea.id);
    });
  });
  describe('Textarea props', function () {
    it('Should be disabled when disabled is true', function () {
      var _render2 = (0, _react2.render)(makeTextareaFieldFixture({
        disabled: true
      })),
          container = _render2.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toBeDisabled();
    });
    it.each([undefined, null, false])('Should not be disabled when disabled is %p', function (disabled) {
      var _render3 = (0, _react2.render)(makeTextareaFieldFixture({
        disabled: disabled
      })),
          container = _render3.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).not.toBeDisabled();
    });
    it('Should be required when required is true', function () {
      var _render4 = (0, _react2.render)(makeTextareaFieldFixture({
        required: true
      })),
          container = _render4.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toBeRequired();
    });
    it.each([undefined, null, false])('Should not be required when required is %p', function (required) {
      var _render5 = (0, _react2.render)(makeTextareaFieldFixture({
        required: required
      })),
          container = _render5.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).not.toBeRequired();
    });
    it('Should render with placeholder when placeholder provided', function () {
      var expected = _faker.faker.random.alphaNumeric();

      var _render6 = (0, _react2.render)(makeTextareaFieldFixture({
        placeholder: expected
      })),
          container = _render6.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toHaveAttribute('placeholder', expected);
    });
    it('Should pass through `spellCheck` prop to textarea', function () {
      var expected = _faker.faker.datatype["boolean"]();

      var _render7 = (0, _react2.render)(makeTextareaFieldFixture({
        spellCheck: expected
      })),
          container = _render7.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toHaveAttribute('spellCheck', expected.toString());
    });
    it('Should render with `aria-invalid` when isInvalid provided', function () {
      var expected = _faker.faker.datatype["boolean"]();

      var _render8 = (0, _react2.render)(makeTextareaFieldFixture({
        isInvalid: expected
      })),
          container = _render8.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toHaveAttribute('aria-invalid', expected.toString());
    });
    it('Should render with `data-gramm_editor` when grammarly provided', function () {
      var expected = _faker.faker.datatype["boolean"]();

      var _render9 = (0, _react2.render)(makeTextareaFieldFixture({
        grammarly: expected
      })),
          container = _render9.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toHaveAttribute('data-gramm_editor', expected.toString());
    });
    it('Should pass through `inputWidth` prop to textarea', function () {
      var expected = _faker.faker.datatype.number({
        min: 10,
        max: 100
      });

      var _render10 = (0, _react2.render)(makeTextareaFieldFixture({
        inputWidth: expected
      })),
          container = _render10.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toHaveStyle({
        width: "".concat(expected, "px")
      });
    });
    it('Should pass through `inputHeight` prop to textarea', function () {
      var expected = _faker.faker.datatype.number({
        min: 10,
        max: 100
      });

      var _render11 = (0, _react2.render)(makeTextareaFieldFixture({
        inputHeight: expected
      })),
          container = _render11.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toHaveStyle({
        height: "".concat(expected, "px")
      });
    });
    it('Should call onChange when event is fired', function () {
      var onChange = jest.fn();

      var _render12 = (0, _react2.render)(makeTextareaFieldFixture({
        onChange: onChange
      })),
          container = _render12.container;

      var textarea = container.querySelector('textarea');

      _react2.fireEvent.change(textarea, {
        target: {
          value: 'test'
        }
      });

      expect(onChange).toHaveBeenCalled();
    });
  });
  it('Should correctly compose an accessible description from multiple hints', function () {
    var _render13 = (0, _react2.render)(makeTextareaFieldFixture({
      description: 'A description.',
      hint: 'Am hint.',
      validationMessage: 'Try again.'
    })),
        getByTestId = _render13.getByTestId,
        getByText = _render13.getByText;

    expect(getByText('A description.')).toBeInTheDocument();
    expect(getByText('Am hint.')).toBeInTheDocument();
    expect(getByText('Try again.')).toBeInTheDocument();
    expect(getByTestId('TextareaField')).toHaveAccessibleDescription('A description. Try again. Am hint.');
  });
});