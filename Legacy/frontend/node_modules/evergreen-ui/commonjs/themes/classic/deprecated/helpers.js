"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPrimaryButtonStylesForIntent = exports.getLinearGradientWithStates = exports.getTextColorForIntent = exports.linearGradient = void 0;

var _tinycolor = _interopRequireDefault(require("tinycolor2"));

var _constants = require("../../../constants");

var _colors = _interopRequireDefault(require("./foundational-styles/colors"));

/**
 * @param {String} top - color.
 * @param {String} bottom - color.
 * @return {String} CSS background propery.
 */
var linearGradient = function linearGradient(top, bottom) {
  return "linear-gradient(to bottom, ".concat(top, ", ").concat(bottom, ")");
};
/**
 * @param {Intent} intent
 * @return {String} color
 */


exports.linearGradient = linearGradient;

var getTextColorForIntent = function getTextColorForIntent(intent, defaultColor) {
  switch (intent) {
    case _constants.Intent.SUCCESS:
      return _colors["default"].text.success;

    case _constants.Intent.DANGER:
      return _colors["default"].text.danger;

    case _constants.Intent.WARNING:
      return _colors["default"].text.warning;

    default:
      return defaultColor || _colors["default"].text["default"];
  }
};
/**
 * @param {String} startColor
 * @param {String} endColor
 * @param {Number} intensityMultiplier - Some colors need more darkening.
 */


exports.getTextColorForIntent = getTextColorForIntent;

var getLinearGradientWithStates = function getLinearGradientWithStates(startColor, endColor) {
  var intensityMultiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  return {
    base: linearGradient(startColor, endColor),
    hover: linearGradient((0, _tinycolor["default"])(startColor).darken(5 * intensityMultiplier).toString(), (0, _tinycolor["default"])(endColor).darken(5 * intensityMultiplier).toString()),
    active: linearGradient((0, _tinycolor["default"])(endColor).darken(5 * intensityMultiplier).toString(), (0, _tinycolor["default"])(endColor).darken(5 * intensityMultiplier).toString())
  };
};
/**
 * Gradients in the default theme have a intentional hue shift.
 * @param {Intent} intent - intent of the gradient.
 * @return {Object} { base, hover, active }
 */


exports.getLinearGradientWithStates = getLinearGradientWithStates;

var getPrimaryButtonStylesForIntent = function getPrimaryButtonStylesForIntent(intent) {
  switch (intent) {
    case _constants.Intent.SUCCESS:
      {
        var startColor = '#23C277';
        var endColor = '#399D6C';
        return {
          linearGradient: getLinearGradientWithStates(startColor, endColor),
          focusColor: (0, _tinycolor["default"])(startColor).setAlpha(0.4).toString()
        };
      }

    case _constants.Intent.WARNING:
      {
        var _startColor = '#EE9913';
        var _endColor = '#D9822B';
        return {
          linearGradient: getLinearGradientWithStates(_startColor, _endColor),
          focusColor: (0, _tinycolor["default"])(_startColor).setAlpha(0.4).toString()
        };
      }

    case _constants.Intent.DANGER:
      {
        var _startColor2 = '#EC4C47';
        var _endColor2 = '#D64540';
        return {
          linearGradient: getLinearGradientWithStates(_startColor2, _endColor2),
          focusColor: (0, _tinycolor["default"])(_startColor2).setAlpha(0.4).toString()
        };
      }

    default:
      {
        var _startColor3 = '#0788DE';
        var _endColor3 = '#116AB8';
        return {
          linearGradient: getLinearGradientWithStates(_startColor3, _endColor3),
          focusColor: (0, _tinycolor["default"])(_startColor3).setAlpha(0.4).toString()
        };
      }
  }
};

exports.getPrimaryButtonStylesForIntent = getPrimaryButtonStylesForIntent;