"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useClickable = useClickable;

var _react = require("react");

var _safeInvoke = _interopRequireDefault(require("../lib/safe-invoke"));

var _useLatest = require("./use-latest");

/**
 * React hook that returns bind props for a clickable component.
 * When the component has focus, Enter and space activate it
 */
function useClickable() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      onKeyDownHandler = _ref.onKeyDown,
      _ref$tabIndex = _ref.tabIndex,
      tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex;

  var onKeyDownRef = (0, _useLatest.useLatest)(onKeyDownHandler);
  var onKeyDown = (0, _react.useCallback)(function (event) {
    (0, _safeInvoke["default"])(onKeyDownRef.current, event);
    if (event.defaultPrevented) return;
    if (disabled) return;
    if (event.metaKey) return;
    if (event.target !== event.currentTarget) return;

    if (event.key === 'Enter' || event.key === ' ' || event.key === 'Spacebar') {
      // "Spacebar" for IE11 support
      // Prevent the default action to stop scrolling when space is pressed
      event.preventDefault();
      event.currentTarget.click();
    }
  }, // onKeyDownRef is a ref, but eslint can't figure that out
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [disabled]);
  return {
    // TODO import useFocusable as well (needs to be focusable)
    tabIndex: disabled ? -1 : tabIndex,
    onKeyDown: onKeyDown
  };
}