"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = _interopRequireDefault(require("ui-box"));

var _hooks = require("../../hooks");

var _IconWrapper = require("../../icons/src/IconWrapper");

var _layers = require("../../layers");

var _typography = require("../../typography");

var _excluded = ["is", "children", "className", "appearance", "disabled", "secondaryText", "intent", "icon", "onSelect"],
    _excluded2 = ["className"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var noop = function noop() {};

var pseudoSelectors = {
  _hover: '&[data-isselectable="true"]:not([aria-current="true"]):not([aria-checked="true"]):not(:focus):not(:active):hover',
  _focus: '&[data-isselectable="true"]:not([aria-current="true"]):not([aria-checked="true"]):focus, &[aria-selected="true"]',
  _active: '&[aria-current="true"], &[data-isselectable="true"]:active',
  _current: '&[aria-current="true"], &[aria-checked="true"]',
  _isSelectable: '&[data-isselectable="true"]',
  _disabled: '&:disabled, &[aria-disabled="true"]'
};
var internalStyles = {
  display: 'flex',
  alignItems: 'center'
};
var MenuItem = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function MenuItem(props, ref) {
  var _props$is = props.is,
      is = _props$is === void 0 ? 'div' : _props$is,
      children = props.children,
      className = props.className,
      _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,
      disabled = props.disabled,
      secondaryText = props.secondaryText,
      _props$intent = props.intent,
      intent = _props$intent === void 0 ? 'none' : _props$intent,
      icon = props.icon,
      _props$onSelect = props.onSelect,
      onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,
      passthroughProps = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var handleClick = (0, _react.useCallback)(function (event) {
    if (disabled) return;
    onSelect(event);
  }, [disabled, onSelect]); // Pass all props, so the hook can handled `disabled`, `onKeyDown`, `tabIndex`
  // and any other explicit props that are passed through to the underlying component

  var _useClickable = (0, _hooks.useClickable)(props),
      onKeyDown = _useClickable.onKeyDown,
      tabIndex = _useClickable.tabIndex;

  var _useStyleConfig = (0, _hooks.useStyleConfig)('MenuItem', {
    appearance: appearance
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      boxProps = (0, _objectWithoutProperties2["default"])(_useStyleConfig, _excluded2);

  var iconColor = intent === 'none' ? 'default' : intent;

  if (disabled) {
    iconColor = 'muted';
  }

  var textColor = disabled ? 'muted' : intent;
  var secondaryTextColor = 'muted';
  var disabledProps = (0, _react.useMemo)(function () {
    return disabled ? {
      backgroundColor: 'tint1',
      cursor: 'not-allowed',
      disabled: true,
      onClick: null,
      onKeyPress: null,
      tabIndex: -1,
      'aria-disabled': 'true',
      'data-isselectable': 'false'
    } : {};
  }, [disabled]);
  return /*#__PURE__*/_react["default"].createElement(_layers.Pane, (0, _extends2["default"])({
    is: is,
    role: "menuitem",
    className: (0, _classnames["default"])(themedClassName, className),
    onClick: handleClick,
    "data-isselectable": !disabled || undefined,
    "aria-disabled": disabled,
    ref: ref,
    height: icon ? 40 : 32
  }, boxProps, passthroughProps, disabledProps, {
    tabIndex: tabIndex,
    onKeyDown: onKeyDown
  }), /*#__PURE__*/_react["default"].createElement(_IconWrapper.IconWrapper, {
    icon: icon,
    color: iconColor,
    marginLeft: 16,
    marginRight: -4,
    size: 16,
    flexShrink: 0
  }), /*#__PURE__*/_react["default"].createElement(_typography.Text, {
    color: textColor,
    marginLeft: 16,
    marginRight: 16,
    flex: 1
  }, children), secondaryText && /*#__PURE__*/_react["default"].createElement(_typography.Text, {
    marginRight: 16,
    color: secondaryTextColor
  }, secondaryText));
}));
MenuItem.propTypes = {
  /**
   * Element type to use for the menu item.
   * For example: `<MenuItem is={ReactRouterLink}>...</MenuItem>`
   */
  is: _uiBox["default"].propTypes.is,

  /**
   * Class name passed to the component.
   * Only use if you know what you are doing.
   */
  className: _propTypes["default"].string,

  /**
   * Function that is called on click and enter/space keypress.
   */
  onSelect: _propTypes["default"].func,

  /**
   * The Evergreen or custom icon before the label.
   */
  icon: _propTypes["default"].oneOfType([_propTypes["default"].elementType, _propTypes["default"].element]),

  /**
   * The children of the component.
   */
  children: _propTypes["default"].node,

  /**
   * Secondary text shown on the right.
   */
  secondaryText: _propTypes["default"].node,

  /**
   * The default theme only supports one default appearance.
   */
  appearance: _propTypes["default"].string,

  /**
   * The intent of the menu item.
   */
  intent: _propTypes["default"].string,

  /**
   * Flag to indicate whether the menu item is disabled or not
   */
  disabled: _propTypes["default"].bool
};
var _default = MenuItem;
exports["default"] = _default;