"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = require("ui-box");

var _buttons = require("../../buttons");

var _group = require("../../group");

var _hooks = require("../../hooks");

var _safeInvoke = _interopRequireDefault(require("../../lib/safe-invoke"));

var _warning = _interopRequireDefault(require("../../lib/warning"));

var _excluded = ["defaultValue", "disabled", "height", "name", "onChange", "options", "size", "value"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function isControlled(value) {
  return typeof value !== 'undefined' && value !== null;
}

var SegmentedControl = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function SegmentedControl(props, ref) {
  var defaultValue = props.defaultValue,
      disabled = props.disabled,
      height = props.height,
      name = props.name,
      onChange = props.onChange,
      options = props.options,
      size = props.size,
      value = props.value,
      rest = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var groupName = (0, _hooks.useId)('SegmentedControl');

  if (process.env.NODE_ENV !== 'production') {
    (0, _warning["default"])(true, '<SegmentedControl> is deprecated and will be removed in the next major verison of Evergreen. Prefer Tabs for navigational elements, or form components / button groups for other use cases.');
  }

  var getDefaultValue = function getDefaultValue() {
    if (isControlled(value)) {
      return value;
    }

    return typeof defaultValue !== 'undefined' && defaultValue !== null ? defaultValue : options[0].value;
  };

  var _useState = (0, _react.useState)(getDefaultValue()),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      activeValue = _useState2[0],
      setActiveValue = _useState2[1];

  (0, _react.useEffect)(function () {
    if (isControlled(value)) {
      setActiveValue(value);
    }
  }, [value]);
  var handleChange = (0, _react.useCallback)(function (event) {
    event.preventDefault();
    var newValue = event.target.value; // Save a render cycle when it's a controlled input

    if (!isControlled(value)) {
      setActiveValue(newValue);
    }

    (0, _safeInvoke["default"])(onChange, newValue);
  }, [value, onChange]);
  return /*#__PURE__*/_react["default"].createElement(_group.Group, (0, _extends2["default"])({
    ref: ref,
    display: "flex"
  }, rest), options.map(function (option, index) {
    return /*#__PURE__*/_react["default"].createElement(_buttons.Button, {
      key: option.value,
      id: groupName + index,
      name: name || groupName,
      value: String(option.value),
      disabled: disabled,
      size: size,
      height: height,
      isActive: activeValue === String(option.value),
      onClick: handleChange,
      flex: "1"
    }, option.label);
  }));
}));
SegmentedControl.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _uiBox.spacing.propTypes), _uiBox.position.propTypes), _uiBox.layout.propTypes), _uiBox.dimensions.propTypes), {}, {
  /**
   * The options for the radios of the Segmented Control.
   */
  options: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    label: _propTypes["default"].node.isRequired,
    value: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string, _propTypes["default"].bool]).isRequired
  })).isRequired,

  /**
   * The current value of the Segmented Control when controlled.
   */
  value: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string, _propTypes["default"].bool]),

  /**
   * The default value of the Segmented Control when uncontrolled.
   */
  defaultValue: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string, _propTypes["default"].bool]),

  /**
   * Function called when the value changes.
   */
  onChange: _propTypes["default"].func,

  /**
   * The name of the radio group.
   */
  name: _propTypes["default"].string,

  /**
   * The size of the Segmented Control.
   */
  size: _propTypes["default"].oneOf(['small', 'medium', 'large']),

  /**
   * When true, the Segmented Control is disabled.
   */
  disabled: _propTypes["default"].bool
});
var _default = SegmentedControl;
exports["default"] = _default;