import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { getTextColorForIntent, getPrimaryButtonStylesForIntent } from '../deprecated/helpers';
import { defaultControlStyles } from '../deprecated/shared';
var baseStyle = {
  fontFamily: 'fontFamilies.ui',
  borderRadius: 'radii.1',
  fontWeight: 500,
  border: '0',
  color: function color(theme, _ref) {
    var _color = _ref.color;
    return theme.colors[_color] || _color || 'colors.default';
  },
  _disabled: _objectSpread({}, defaultControlStyles.disabled)
};
var appearances = {
  primary: {
    backgroundColor: 'white',
    backgroundImage: function backgroundImage(_, props) {
      return getPrimaryButtonStylesForIntent(props.intent).linearGradient.base;
    },
    boxShadow: function boxShadow(theme) {
      return "inset 0 0 0 1px ".concat(theme.scales.neutral.N5A, ", inset 0 -1px 1px 0 ").concat(theme.scales.neutral.N2A);
    },
    color: 'white',
    _focus: {
      backgroundImage: function backgroundImage(_, props) {
        return getPrimaryButtonStylesForIntent(props.intent).linearGradient.focus;
      },
      boxShadow: function boxShadow(theme, props) {
        return "0 0 0 3px ".concat(getPrimaryButtonStylesForIntent(props.intent).focusColor, ", inset 0 0 0 1px ").concat(theme.scales.neutral.N4A, ", inset 0 -1px 1px 0 ").concat(theme.scales.neutral.N5A);
      }
    },
    _hover: {
      backgroundImage: function backgroundImage(_, props) {
        return getPrimaryButtonStylesForIntent(props.intent).linearGradient.hover;
      }
    },
    _active: {
      backgroundImage: function backgroundImage(_, props) {
        return getPrimaryButtonStylesForIntent(props.intent).linearGradient.active;
      }
    },
    _focusAndActive: {}
  },
  "default": _objectSpread(_objectSpread({}, defaultControlStyles.base), {}, {
    color: function color(_, props) {
      return getTextColorForIntent(props.intent);
    },
    _hover: defaultControlStyles.hover,
    _active: defaultControlStyles.active,
    _focus: defaultControlStyles.focus,
    _disabled: defaultControlStyles.disabled
  }),
  minimal: {
    color: function color(theme, props) {
      return getTextColorForIntent(props.intent, theme.colors.blue.base);
    },
    background: 'transparent',
    _hover: {
      background: 'scales.neutral.N2A'
    },
    _focus: {
      boxShadow: function boxShadow(theme) {
        return "0 0 0 3px ".concat(theme.colors.blueAlpha.B5A);
      }
    },
    _active: {
      background: 'scales.blue.B3A'
    }
  }
};
var sizes = {
  small: {
    height: 24,
    minWidth: 24,
    fontSize: 'fontSizes.1',
    lineHeight: '24px',
    paddingLeft: 12,
    paddingRight: 12
  },
  medium: {
    height: 32,
    minWidth: 32,
    fontSize: 'fontSizes.1',
    lineHeight: '32px',
    paddingLeft: 16,
    paddingRight: 16
  },
  large: {
    height: 40,
    minWidth: 40,
    fontSize: 'fontSizes.2',
    lineHeight: '40px',
    paddingLeft: 20,
    paddingRight: 20
  }
};
export default {
  baseStyle: baseStyle,
  appearances: appearances,
  sizes: sizes
};