import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import { Pagination } from '../';
import BasePaginationFixture from '../fixtures/BasePaginationFixture';
describe('Pagination', function () {
  it('Shows the number of items if its not overflowing', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var _render, findByRole, container;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _render = render( /*#__PURE__*/React.createElement(Pagination, {
              page: 1,
              totalPages: 5
            })), findByRole = _render.findByRole;
            _context.next = 3;
            return findByRole('navigation');

          case 3:
            container = _context.sent;
            expect(container.querySelectorAll('li')).toHaveLength(7);
            expect(container.querySelectorAll('button[aria-label~="Page"]')).toHaveLength(5);
            expect(container.querySelector('button[aria-current="true"').textContent).toEqual('1');

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('Shows a maximum # of items if it is overflowing', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var _render2, findByRole, container;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _render2 = render( /*#__PURE__*/React.createElement(Pagination, {
              page: 1,
              totalPages: 10
            })), findByRole = _render2.findByRole;
            _context2.next = 3;
            return findByRole('navigation');

          case 3:
            container = _context2.sent;
            // Two handles + a max of 7 list items
            expect(container.querySelectorAll('li')).toHaveLength(9);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('Shows ellipses if the component is overflowing and page < 4', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var _render3, findByRole, container;

    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _render3 = render( /*#__PURE__*/React.createElement(Pagination, {
              page: 1,
              totalPages: 10
            })), findByRole = _render3.findByRole;
            _context3.next = 3;
            return findByRole('navigation');

          case 3:
            container = _context3.sent;
            expect(container.getElementsByTagName('span')).toHaveLength(1);
            expect(container.getElementsByTagName('span')[0].textContent).toEqual('...');

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  it('Shows two ellipses if the component is overflowing and page > 4 and page < totalPages - 4', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    var _render4, findByRole, container;

    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _render4 = render( /*#__PURE__*/React.createElement(Pagination, {
              page: 5,
              totalPages: 10
            })), findByRole = _render4.findByRole;
            _context4.next = 3;
            return findByRole('navigation');

          case 3:
            container = _context4.sent;
            expect(container.getElementsByTagName('span')).toHaveLength(2);

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
  it('Shows one ellipsis if the totalPages - page < 4', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
    var _render5, findByRole, container;

    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _render5 = render( /*#__PURE__*/React.createElement(Pagination, {
              page: 7,
              totalPages: 10
            })), findByRole = _render5.findByRole;
            _context5.next = 3;
            return findByRole('navigation');

          case 3:
            container = _context5.sent;
            expect(container.getElementsByTagName('span')).toHaveLength(1);

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  })));
  it('Only renders handles if there are an unknown # of pages', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
    var _render6, findByRole, container;

    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _render6 = render( /*#__PURE__*/React.createElement(Pagination, {
              page: 5
            })), findByRole = _render6.findByRole;
            _context6.next = 3;
            return findByRole('navigation');

          case 3:
            container = _context6.sent;
            expect(container.querySelectorAll('li')).toHaveLength(2);

          case 5:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  })));
  it('Clicking on the handles advances and rewinds the current page', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
    var _render7, findByRole, container, paginationItems, previousHandle, nextHandle;

    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _render7 = render( /*#__PURE__*/React.createElement(BasePaginationFixture, null)), findByRole = _render7.findByRole;
            _context7.next = 3;
            return findByRole('navigation');

          case 3:
            container = _context7.sent;
            paginationItems = container.querySelectorAll('li');
            previousHandle = paginationItems[0].querySelector('button');
            nextHandle = paginationItems[paginationItems.length - 1].querySelector('button');
            expect(previousHandle).toHaveAttribute('disabled');
            expect(container.querySelector('button[aria-current="true"').textContent).toEqual('1');
            fireEvent.click(nextHandle);
            expect(container.querySelector('button[aria-current="true"').textContent).toEqual('2');
            expect(previousHandle).not.toHaveAttribute('disabled');
            fireEvent.click(previousHandle);
            expect(container.querySelector('button[aria-current="true"').textContent).toEqual('1');

          case 14:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  })));
});