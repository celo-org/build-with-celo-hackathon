import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import { render, screen } from '@testing-library/react';
import { defaultTheme } from '../..';
import { ThemeProvider } from '../../theme';
import Pane from '../src/Pane';
var testText = 'pane-test-text';
describe('<Pane />', function () {
  it('forwards ref', function () {
    var mockRef = jest.fn();
    render( /*#__PURE__*/React.createElement(Pane, {
      ref: mockRef
    }));
    expect(mockRef).toHaveBeenCalled();
  });
  it('passes className', function () {
    var testClass = 'test-class-name';
    render( /*#__PURE__*/React.createElement(Pane, {
      className: testClass
    }, testText));
    expect(screen.getByText(testText)).toHaveClass(testClass);
  });
  it('uses elevation', function () {
    render( /*#__PURE__*/React.createElement(Pane, {
      elevation: 1
    }, testText));
    expect(screen.getByText(testText)).toHaveStyle('box-shadow: 0 0 1px rgba(67, 90, 111, 0.3), 0 2px 4px -2px rgba(67, 90, 111, 0.47)');
  });
  it('uses theme values', function () {
    var testTheme = _objectSpread(_objectSpread({}, defaultTheme), {}, {
      components: _objectSpread(_objectSpread({}, defaultTheme.components), {}, {
        Pane: {
          baseStyle: function baseStyle(theme, props) {
            return {
              color: 'red',
              background: 'blue',
              borderRadius: 25,
              boxShadow: theme.shadows[props.elevation]
            };
          }
        }
      }),
      shadows: ['0px 0px 50px 0px #00000', '0px 0px 50px 20px #00000']
    });

    render( /*#__PURE__*/React.createElement(ThemeProvider, {
      value: testTheme
    }, /*#__PURE__*/React.createElement(Pane, {
      elevation: 1
    }, testText)));
    expect(screen.getByText(testText)).toHaveStyle('color: red');
    expect(screen.getByText(testText)).toHaveStyle('background: blue');
    expect(screen.getByText(testText)).toHaveStyle('border-top-left-radius: 25px');
    expect(screen.getByText(testText)).toHaveStyle('border-top-right-radius: 25px');
    expect(screen.getByText(testText)).toHaveStyle('border-bottom-left-radius: 25px');
    expect(screen.getByText(testText)).toHaveStyle('border-bottom-right-radius: 25px');
    expect(screen.getByText(testText)).toHaveStyle('box-shadow: 0px 0px 50px 20px #00000');
  });
  it('passes remaining props down', function () {
    var testId = 'test-id';
    var testLabel = 'test-label';
    render( /*#__PURE__*/React.createElement(Pane, {
      id: testId,
      "aria-label": testLabel
    }, testText));
    expect(screen.getByText(testText)).toHaveAttribute('aria-label', testLabel);
    expect(screen.getByText(testText)).toHaveAttribute('id', testId);
  });
});