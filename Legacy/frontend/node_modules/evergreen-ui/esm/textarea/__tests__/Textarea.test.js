import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import { faker } from '@faker-js/faker';
import { render, fireEvent } from '@testing-library/react';
import { Textarea } from '..';

var makeTextareaFixture = function makeTextareaFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/React.createElement(Textarea, _extends({
    "data-testid": "Textarea"
  }, props));
};

makeTextareaFixture.displayName = "makeTextareaFixture";
describe('Textarea', function () {
  it('Should render', function () {
    expect(function () {
      return render(makeTextareaFixture());
    }).not.toThrow();
  });
  it('Should be disabled when disabled is true', function () {
    var _render = render(makeTextareaFixture({
      disabled: true
    })),
        container = _render.container;

    var textarea = container.querySelector('textarea');
    expect(textarea).toBeDisabled();
  });
  it.each([undefined, null, false])('Should not be disabled when disabled is %p', function (disabled) {
    var _render2 = render(makeTextareaFixture({
      disabled: disabled
    })),
        container = _render2.container;

    var textarea = container.querySelector('textarea');
    expect(textarea).not.toBeDisabled();
  });
  it('Should be required when required is true', function () {
    var _render3 = render(makeTextareaFixture({
      required: true
    })),
        container = _render3.container;

    var textarea = container.querySelector('textarea');
    expect(textarea).toBeRequired();
  });
  it.each([undefined, null, false])('Should not be required when required is %p', function (required) {
    var _render4 = render(makeTextareaFixture({
      required: required
    })),
        container = _render4.container;

    var textarea = container.querySelector('textarea');
    expect(textarea).not.toBeRequired();
  });
  it('Should render with placeholder when placeholder provided', function () {
    var expected = faker.random.alphaNumeric();

    var _render5 = render(makeTextareaFixture({
      placeholder: expected
    })),
        container = _render5.container;

    var textarea = container.querySelector('textarea');
    expect(textarea).toHaveAttribute('placeholder', expected);
  });
  it('Should pass through `spellCheck` prop to textarea', function () {
    var expected = faker.datatype["boolean"]();

    var _render6 = render(makeTextareaFixture({
      spellCheck: expected
    })),
        container = _render6.container;

    var textarea = container.querySelector('textarea');
    expect(textarea).toHaveAttribute('spellCheck', expected.toString());
  });
  it('Should render with `aria-invalid` when isInvalid provided', function () {
    var expected = faker.datatype["boolean"]();

    var _render7 = render(makeTextareaFixture({
      isInvalid: expected
    })),
        container = _render7.container;

    var textarea = container.querySelector('textarea');
    expect(textarea).toHaveAttribute('aria-invalid', expected.toString());
  });
  it('Should render with `data-gramm_editor` when grammarly provided', function () {
    var expected = faker.datatype["boolean"]();

    var _render8 = render(makeTextareaFixture({
      grammarly: expected
    })),
        container = _render8.container;

    var textarea = container.querySelector('textarea');
    expect(textarea).toHaveAttribute('data-gramm_editor', expected.toString());
  });
  it('Should pass through `width` prop to textarea', function () {
    var expected = faker.datatype.number({
      min: 10,
      max: 100
    });

    var _render9 = render(makeTextareaFixture({
      width: expected
    })),
        container = _render9.container;

    var textarea = container.querySelector('textarea');
    expect(textarea).toHaveStyle({
      width: "".concat(expected, "px")
    });
  });
  it('Should pass through `height` prop to textarea', function () {
    var expected = faker.datatype.number({
      min: 10,
      max: 100
    });

    var _render10 = render(makeTextareaFixture({
      height: expected
    })),
        container = _render10.container;

    var textarea = container.querySelector('textarea');
    expect(textarea).toHaveStyle({
      height: "".concat(expected, "px")
    });
  });
  it('Should call onChange when event is fired', function () {
    var onChange = jest.fn();

    var _render11 = render(makeTextareaFixture({
      onChange: onChange
    })),
        container = _render11.container;

    var textarea = container.querySelector('textarea');
    fireEvent.change(textarea, {
      target: {
        value: 'test'
      }
    });
    expect(onChange).toHaveBeenCalled();
  });
});