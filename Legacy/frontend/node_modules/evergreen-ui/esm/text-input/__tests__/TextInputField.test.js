import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import { render } from '@testing-library/react';
import { TextInputField } from '../';

function makeTextInputFieldFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/React.createElement(TextInputField, _extends({
    "data-testid": "input",
    label: "Name"
  }, props));
}

makeTextInputFieldFixture.displayName = "makeTextInputFieldFixture";
describe('TextInputField', function () {
  it('should render without crashing', function () {
    expect(function () {
      return render(makeTextInputFieldFixture());
    }).not.toThrow();
  });
  it('should render a required `label` when passed in', function () {
    var _render = render(makeTextInputFieldFixture()),
        getByLabelText = _render.getByLabelText;

    expect(getByLabelText('Name')).toBeInTheDocument();
  });
  it('should render a `hint` underneath the input', function () {
    var _render2 = render(makeTextInputFieldFixture({
      hint: 'Enter a value in the input'
    })),
        getByText = _render2.getByText;

    expect(getByText('Enter a value in the input')).toBeInTheDocument();
  });
  it('should render an astrix when `required` is passed in', function () {
    var _render3 = render(makeTextInputFieldFixture({
      required: true
    })),
        getByTitle = _render3.getByTitle;

    expect(getByTitle('This field is required.')).toBeInTheDocument();
  });
  it('should not render a `validationMessage` when passed in', function () {
    var _render4 = render(makeTextInputFieldFixture({
      validationMessage: 'Please enter a value'
    })),
        getByText = _render4.getByText;

    expect(getByText('Please enter a value')).toBeInTheDocument();
  });
});