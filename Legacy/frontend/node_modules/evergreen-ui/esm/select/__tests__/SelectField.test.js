import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import { render } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { Select, SelectField } from '../';
import { mockRef } from '../../test/utils';

function makeSelectFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/React.createElement(Select, _extends({
    "data-testid": "select",
    defaultValue: "foo",
    name: "select"
  }, props), /*#__PURE__*/React.createElement("option", {
    value: "foo"
  }, "Foo"), /*#__PURE__*/React.createElement("option", {
    value: "bar"
  }, "Bar"));
}

makeSelectFixture.displayName = "makeSelectFixture";

function makeSelectFieldFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/React.createElement(SelectField, _extends({
    "data-testid": "select",
    defaultValue: "foo",
    label: "Select"
  }, props), /*#__PURE__*/React.createElement("option", {
    value: "foo"
  }, "Foo"), /*#__PURE__*/React.createElement("option", {
    value: "bar"
  }, "Bar"));
}

makeSelectFieldFixture.displayName = "makeSelectFieldFixture";
describe('Select', function () {
  it('Should render without crashing', function () {
    expect(function () {
      return render(makeSelectFixture());
    }).not.toThrow();
  });
  it('Should set an invalid state if `isInvalid` is `true`', function () {
    var _render = render(makeSelectFixture({
      isInvalid: true
    })),
        container = _render.container;

    var input = container.querySelector('select');
    expect(input).toHaveAttribute('aria-invalid', 'true');
  });
  it('Should not be interactive if `disabled` is passed in', function () {
    var _render2 = render(makeSelectFixture({
      disabled: true
    })),
        container = _render2.container;

    var select = container.querySelector('select');
    expect(document.body).toHaveFocus();
    userEvent.tab();
    expect(select).not.toHaveFocus();
  });
});
describe('SelectField', function () {
  it('Should render without crashing', function () {
    expect(function () {
      return render(makeSelectFieldFixture());
    }).not.toThrow();
  });
  it('should forward ref to underlying <select />', function () {
    var ref = mockRef();
    render(makeSelectFieldFixture({
      ref: ref
    }));
    expect(ref.current).toBeInstanceOf(HTMLSelectElement);
  });
  it('Should have expected accessible name when `label` prop passed in', function () {
    var _render3 = render(makeSelectFieldFixture()),
        container = _render3.container,
        getByLabelText = _render3.getByLabelText;

    var select = container.querySelector('select');
    expect(getByLabelText('Select')).toBeInTheDocument();
    expect(select).toHaveAccessibleName('Select');
  });
  it('Should add hint text to accessible description when `hint` prop provided', function () {
    var _render4 = render(makeSelectFieldFixture({
      hint: 'Some description.'
    })),
        container = _render4.container,
        getByText = _render4.getByText;

    expect(getByText('Some description.')).toBeInTheDocument();
    expect(container.querySelector('select')).toHaveAccessibleDescription('Some description.');
  });
  it('Should render an astrix when `required` is passed in', function () {
    var _render5 = render(makeSelectFieldFixture({
      required: true
    })),
        getByTitle = _render5.getByTitle;

    expect(getByTitle('This field is required.')).toBeInTheDocument();
  });
  it('Should render a `validationMessage` when passed in', function () {
    var _render6 = render(makeSelectFieldFixture({
      validationMessage: 'Please choose a value.'
    })),
        container = _render6.container,
        getByText = _render6.getByText;

    expect(getByText('Please choose a value.')).toBeInTheDocument();
    expect(container.querySelector('select')).toHaveAccessibleDescription('Please choose a value.');
  });
  it('Should correctly compose an accessible description from multiple hints', function () {
    var _render7 = render(makeSelectFieldFixture({
      hint: 'Am hint.',
      validationMessage: 'Try again.'
    })),
        container = _render7.container;

    expect(container.querySelector('select')).toHaveAccessibleDescription('Try again. Am hint.');
  });
});