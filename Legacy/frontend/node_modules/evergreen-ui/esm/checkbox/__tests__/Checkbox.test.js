import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import Checkbox from '../src/Checkbox';
describe('Checkbox', function () {
  it('should not crash when rendering', function () {
    expect(function () {
      render( /*#__PURE__*/React.createElement(Checkbox, null));
    }).not.toThrowError();
  });
  it('should render', function () {
    expect(function () {
      render( /*#__PURE__*/React.createElement(Checkbox, null));
    }).not.toBeNull();
  });
  it('should render with an id', function () {
    render( /*#__PURE__*/React.createElement(Checkbox, {
      id: "test-123"
    }));
    expect(screen.getByRole('checkbox').getAttribute('id')).toEqual('test-123');
  });
  it('should render with a name', function () {
    render( /*#__PURE__*/React.createElement(Checkbox, {
      name: "test-name"
    }));
    expect(screen.getByRole('checkbox').getAttribute('name')).toEqual('test-name');
  });
  it('should render label with no checked', function () {
    render( /*#__PURE__*/React.createElement(Checkbox, {
      label: "Check me"
    }));
    expect(screen.getByText('Check me')).toBeVisible();
    expect(screen.getByRole('checkbox').checked).toBeFalsy();
  });
  it('should be in indeterminate state', function () {
    render( /*#__PURE__*/React.createElement(Checkbox, {
      indeterminate: true
    }));
    expect(screen.getByRole('checkbox').indeterminate).toBeTruthy();
  });
  it('should be in checked state', function () {
    render( /*#__PURE__*/React.createElement(Checkbox, {
      checked: true
    }));
    expect(screen.getByRole('checkbox').checked).toBeTruthy();
  });
  it('should be disable when disabled is true', function () {
    render( /*#__PURE__*/React.createElement(Checkbox, {
      disabled: true
    }));
    expect(screen.getByRole('checkbox').disabled).toBeTruthy();
  });
  it('should check and uncheck checkbox when clicked', function () {
    function ControlledCheckbox() {
      var _React$useState = React.useState(false),
          _React$useState2 = _slicedToArray(_React$useState, 2),
          checked = _React$useState2[0],
          setChecked = _React$useState2[1];

      return /*#__PURE__*/React.createElement(Checkbox, {
        checked: checked,
        onChange: function onChange(e) {
          setChecked(e.target.checked);
        }
      });
    }

    render( /*#__PURE__*/React.createElement(ControlledCheckbox, null));
    var checkbox = screen.getByRole('checkbox');
    expect(screen.getByRole('checkbox').checked).toBeFalsy();
    fireEvent.click(checkbox);
    expect(screen.getByRole('checkbox').checked).toBeTruthy();
  });
});