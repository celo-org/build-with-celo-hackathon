import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useCallback, useState } from 'react';
import PropTypes from 'prop-types';
import Positions from '../../constants/src/Position';
import { Pane } from '../../layers';
import warning from '../../lib/warning';
import { Popover } from '../../popover';
import { minorScale } from '../../scales';
import { Text } from '../../typography';
import { Pulsar } from './Pulsar';
export var Nudge = function Nudge(_ref) {
  var children = _ref.children,
      _ref$isShown = _ref.isShown,
      isShown = _ref$isShown === void 0 ? false : _ref$isShown,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? Positions.TOP_RIGHT : _ref$position,
      size = _ref.size,
      tooltipContentProp = _ref.tooltipContent,
      onClick = _ref.onClick;

  if (process.env.NODE_ENV !== 'production') {
    warning(true, '<Nudge> is deprecated and will be renamed to Pulsar in the next major version of Evergreen.');
  }

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isHovered = _useState2[0],
      setIsHovered = _useState2[1];

  var handleMouseEnter = useCallback(function () {
    return setIsHovered(true);
  }, [setIsHovered]);
  var handleMouseLeave = useCallback(function () {
    return setIsHovered(false);
  }, [setIsHovered]);
  var isTooltipContentString = typeof tooltipContentProp === 'string';
  var innerContent = isTooltipContentString ? /*#__PURE__*/React.createElement(Text, null, tooltipContentProp) : tooltipContentProp;
  var tooltipContent = /*#__PURE__*/React.createElement(Pane, {
    maxWidth: 240,
    padding: isTooltipContentString ? minorScale(2) : undefined
  }, innerContent);
  return /*#__PURE__*/React.createElement(Popover, {
    content: tooltipContent,
    position: position,
    isShown: isShown && isHovered && !!tooltipContentProp,
    trigger: "hover",
    onOpen: handleMouseEnter,
    maxWidth: 240
  }, /*#__PURE__*/React.createElement(Pane, {
    position: "relative",
    onMouseLeave: handleMouseLeave
  }, isShown && /*#__PURE__*/React.createElement(Pulsar, {
    onClick: onClick,
    position: position,
    size: size
  }), children));
};
Nudge.displayName = "Nudge";
Nudge.propTypes = {
  /**
   * The position for the Pulsar and the Tooltip
   */
  position: PropTypes.oneOf([Positions.TOP_LEFT, Positions.TOP_RIGHT, Positions.BOTTOM_LEFT, Positions.BOTTOM_RIGHT]),

  /**
   * Size of the Pulsar
   */
  size: Pulsar.propTypes.size,

  /**
   * Whether or not the Pulsar/Tooltip is shown
   */
  isShown: PropTypes.bool,

  /**
   * Content for the tooltip
   */
  tooltipContent: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
   * Content for the Pulsar/tooltip to be anchored to
   */
  children: PropTypes.node,

  /**
   * Called when the Pulsar is clicked
   */
  onClick: PropTypes.func
};