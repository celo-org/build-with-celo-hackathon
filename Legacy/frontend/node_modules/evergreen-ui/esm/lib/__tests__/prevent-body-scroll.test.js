import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import preventBodyScroll from '../prevent-body-scroll';
describe('preventBodyScroll', function () {
  it('Should change body overflow to hidden on true and reset overflow on false', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            expect(document.body.style.overflow).toEqual('');
            preventBodyScroll(true);
            expect(document.body.style.overflow).toEqual('hidden');
            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual('');

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('Should be able to handle changes from other scripts changing body overflow', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // Repeat logic of first test
            expect(document.body.style.overflow).toEqual('');
            preventBodyScroll(true);
            expect(document.body.style.overflow).toEqual('hidden');
            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual(''); // Outside source changes overflow to hidden

            document.body.style.overflow = 'hidden'; // Restores 'hidden' as expected

            expect(document.body.style.overflow).toEqual('hidden');
            preventBodyScroll(true);
            expect(document.body.style.overflow).toEqual('hidden');
            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual('hidden'); // 'hidden' should no longer be apart of the history

            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual(''); // Outside source changes overflow to ''

            document.body.style.overflow = ''; // Repeat steps from first test to ensure it is not affected

            expect(document.body.style.overflow).toEqual('');
            preventBodyScroll(true);
            expect(document.body.style.overflow).toEqual('hidden');
            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual('');

          case 19:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('Should be able to restore multiple layers of overflow values', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            document.body.style.overflow = ''; // First overlay

            preventBodyScroll(true);
            expect(document.body.style.overflow).toEqual('hidden'); // Second overlay

            preventBodyScroll(true);
            expect(document.body.style.overflow).toEqual('hidden'); // Third overlay

            preventBodyScroll(true);
            expect(document.body.style.overflow).toEqual('hidden'); // Remove third overlay

            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual('hidden'); // Remove second overlay

            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual('hidden'); // Remove first overlay

            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual('');

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
});