import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from 'react';
import { render } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import PopoverWithTextInputFixture from '../fixtures/PopoverWithTextInputChild';
describe('Popover', function () {
  it('Should not be dismissed when clicking on a child within the popover', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var _render, findByTestId, trigger, container, input;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _render = render( /*#__PURE__*/React.createElement(PopoverWithTextInputFixture, null)), findByTestId = _render.findByTestId;
            _context.next = 3;
            return findByTestId('popover-trigger');

          case 3:
            trigger = _context.sent;
            userEvent.click(trigger);
            _context.next = 7;
            return findByTestId('popover-container');

          case 7:
            container = _context.sent;
            _context.next = 10;
            return findByTestId('popover-input');

          case 10:
            input = _context.sent;
            // Simulate a user click event on the immediate child node
            userEvent.click(container);
            expect(container).toBeVisible(); // Click on a child node a level deeper

            userEvent.click(input);
            expect(container).toBeVisible();
            expect(input).toBeVisible();

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('Should render its content body to the DOM if `isShown` is set to `true`', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var _render2, findByTestId, container;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _render2 = render( /*#__PURE__*/React.createElement(PopoverWithTextInputFixture, {
              isShown: true
            })), findByTestId = _render2.findByTestId;
            _context2.next = 3;
            return findByTestId('popover-container');

          case 3:
            container = _context2.sent;
            expect(container).toBeVisible();

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('Should properly report back the event, if the popover body is clicked', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var mockBodyClick;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            mockBodyClick = jest.fn();
            render( /*#__PURE__*/React.createElement(PopoverWithTextInputFixture, {
              isShown: true,
              onBodyClick: mockBodyClick
            }));
            userEvent.click(document.body);
            expect(mockBodyClick).toHaveBeenCalledTimes(1);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  it('Should remain open if a user clicks somewhere outside of the popover area and `shouldCloseOnExternalClick` is `false`', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    var _render3, findByTestId, container;

    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _render3 = render( /*#__PURE__*/React.createElement(PopoverWithTextInputFixture, {
              isShown: true,
              shouldCloseOnExternalClick: false
            })), findByTestId = _render3.findByTestId;
            _context4.next = 3;
            return findByTestId('popover-container');

          case 3:
            container = _context4.sent;
            expect(container).toBeVisible();
            userEvent.click(document.body); // Container should still be after document body was clicked

            expect(container).toBeVisible();

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
});