import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _extends from "@babel/runtime/helpers/esm/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from 'react';
import { render } from '@testing-library/react';
import FormField from '../src/FormField';
var TEST_ID = 'foo';

var makeFormFieldFixture = function makeFormFieldFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/React.createElement(FormField, _extends({
    label: "hi",
    labelFor: TEST_ID,
    "data-testid": TEST_ID
  }, props));
};

makeFormFieldFixture.displayName = "makeFormFieldFixture";
describe('<FormField />', function () {
  it('Should render without crashing', function () {
    expect(function () {
      return render(makeFormFieldFixture());
    }).not.toThrow();
  });
  it('renders a label associated with its provided ID', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var _render, container, label;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _render = render(makeFormFieldFixture()), container = _render.container;
            label = container.querySelector('label');
            expect(label).toHaveAttribute('for', 'foo');
            expect(label.textContent).toBe('hi');

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('renders a description with correct ID', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var _render2, container, description;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _render2 = render(makeFormFieldFixture({
              description: 'some content'
            })), container = _render2.container;
            description = container.querySelector("#".concat(TEST_ID, "__description"));
            expect(description).toBeDefined();
            expect(description.textContent).toBe('some content');

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('renders a hint with correct ID', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var _render3, container, hint;

    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _render3 = render(makeFormFieldFixture({
              hint: 'some content'
            })), container = _render3.container;
            hint = container.querySelector("#".concat(TEST_ID, "__hint"));
            expect(hint).toBeDefined();
            expect(hint.textContent).toBe('some content');

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  it('renders a validation message with correct ID', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    var _render4, container, validationMessage;

    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _render4 = render(makeFormFieldFixture({
              validationMessage: 'some content'
            })), container = _render4.container;
            validationMessage = container.querySelector("#".concat(TEST_ID, "__validation-message"));
            expect(validationMessage).toBeDefined();
            expect(validationMessage.textContent).toBe('some content');

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
});