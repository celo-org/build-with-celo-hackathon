import React from 'react';
import { faker } from '@faker-js/faker';
import { render } from '@testing-library/react';
import renderer from 'react-test-renderer';
import { UIBoxSerializer } from '../../../lib/testing';
import { ThemeProvider } from '../../theme';
import { defaultTheme } from '../../themes';
import Code from '../src/Code';
expect.addSnapshotSerializer(UIBoxSerializer);
describe('Code', function () {
  it('Should render', function () {
    expect(function () {
      return render( /*#__PURE__*/React.createElement(Code, null, "This is my code"));
    }).not.toThrow();
  });
  it.each([['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600]])('<Code /> %s renders as expected', function (_, size) {
    var component = /*#__PURE__*/React.createElement(ThemeProvider, {
      value: defaultTheme
    }, /*#__PURE__*/React.createElement(Code, {
      size: size
    }, "Text ".concat(size)));
    var tree = renderer.create(component).toJSON();
    expect(tree).toMatchSnapshot();
  });
  it.each([['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600]])('<Code /> %s with minimal appearance specified renders as expected', function (_, size) {
    var component = /*#__PURE__*/React.createElement(ThemeProvider, {
      value: defaultTheme
    }, /*#__PURE__*/React.createElement(Code, {
      size: size,
      appearance: "minimal"
    }, "Text ".concat(size)));
    var tree = renderer.create(component).toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('should pass through `className` prop', function () {
    var expected = faker.random.word().toLowerCase();
    var component = /*#__PURE__*/React.createElement(Code, {
      "data-testid": "code",
      className: expected
    }, "Testing");

    var _render = render(component),
        getByTestId = _render.getByTestId;

    expect(getByTestId('code')).toHaveClass(expected);
  });
});