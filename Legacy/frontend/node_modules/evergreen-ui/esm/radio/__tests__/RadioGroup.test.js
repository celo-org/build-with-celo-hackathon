import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import RadioGroup from '../src/RadioGroup';
describe('Radio Group', function () {
  var options = [{
    label: 'Read-only',
    value: 'read-only'
  }, {
    label: 'Write',
    value: 'write',
    isDisabled: true
  }, {
    label: 'Restricted',
    value: 'restricted'
  }];
  it('should not crash when rendering', function () {
    expect(function () {
      render( /*#__PURE__*/React.createElement(RadioGroup, {
        options: options
      }));
    }).not.toThrowError();
  });
  it('should render the radio options with the options specified', function () {
    render( /*#__PURE__*/React.createElement(RadioGroup, {
      options: options
    }));
    expect(screen.getByRole('group')).toBeVisible();
    expect(screen.getAllByRole('radio')).toHaveLength(3);
  });
  it('should show group label when label is specified', function () {
    render( /*#__PURE__*/React.createElement(RadioGroup, {
      options: options,
      label: "Permissions"
    }));
    expect(screen.getByRole('group').getAttribute('aria-label')).toEqual('Permissions');
    expect(screen.getByLabelText('Permissions')).toBeVisible();
  });
  it('should have all options in required states when isRequired is true', function () {
    render( /*#__PURE__*/React.createElement(RadioGroup, {
      options: options,
      isRequired: true
    }));
    screen.getAllByRole('radio').forEach(function (element) {
      expect(element).toBeRequired();
    });
  });
  it('should select the option that has the same value specified', function () {
    render( /*#__PURE__*/React.createElement(RadioGroup, {
      options: options,
      value: "write"
    }));
    expect(screen.getByRole('radio', {
      name: 'Write'
    })).toBeChecked();
  });
  it('should handle state change when onChange is specified', function () {
    var onChangeMock = jest.fn();
    render( /*#__PURE__*/React.createElement(RadioGroup, {
      options: options,
      value: "read-only",
      onChange: onChangeMock
    }));
    var radio = screen.getByRole('radio', {
      name: 'Restricted'
    });
    expect(onChangeMock).toBeCalledTimes(0);
    fireEvent.click(radio);
    expect(onChangeMock).toBeCalledTimes(1);
  }); // untested props: defaultValue, size
});