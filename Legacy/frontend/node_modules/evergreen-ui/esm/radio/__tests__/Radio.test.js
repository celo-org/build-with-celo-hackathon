import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import Radio from '../src/Radio';
describe('Radio', function () {
  it('should not crash when rendering', function () {
    expect(function () {
      render( /*#__PURE__*/React.createElement(Radio, null));
    }).not.toThrowError();
  });
  it('should render the component', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      "data-testid": "test-id-radio"
    }));
    expect(screen.getByTestId('test-id-radio')).toBeVisible();
  });
  it('should render with an id when id is specified', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      id: "test-123"
    }));
    expect(screen.getByRole('radio').getAttribute('id')).toEqual('test-123');
  });
  it('should render with a name when name is specified', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      name: "test-name"
    }));
    expect(screen.getByRole('radio').getAttribute('name')).toEqual('test-name');
  });
  it('should render with a label when label is specified', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      label: "Select"
    }));
    expect(screen.getByLabelText('Select')).toBeInTheDocument();
  });
  it('should render with a value when value is specified', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      value: "test-value"
    }));
    expect(screen.getByRole('radio').getAttribute('value')).toEqual('test-value');
  });
  it('should render a disabled state when disabled is true', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      disabled: true
    }));
    expect(screen.getByRole('radio')).toBeDisabled();
  });
  it('should render a checked state when checked is true', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      checked: true
    }));
    expect(screen.getByRole('radio')).toBeChecked();
  });
  it('should render a required state when isRequired is true', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      isRequired: true
    }));
    expect(screen.getByRole('radio').required).toBeTruthy();
  });
  it('should render an invalid state when isInvalid is true', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      isInvalid: true
    }));
    expect(screen.getByRole('radio')).toBeInvalid();
  });
  it('should render a checked state when the radio is clicked', function () {
    render( /*#__PURE__*/React.createElement(Radio, null));
    var radio = screen.getByRole('radio');
    expect(screen.getByRole('radio')).not.toBeChecked();
    fireEvent.click(radio);
    expect(screen.getByRole('radio')).toBeChecked();
  });
  it('should handle state change when onChange is specified', function () {
    var onChangeMock = jest.fn();
    render( /*#__PURE__*/React.createElement(Radio, {
      onChange: onChangeMock
    }));
    var radio = screen.getByRole('radio');
    expect(onChangeMock).toBeCalledTimes(0);
    fireEvent.click(radio);
    expect(onChangeMock).toBeCalledTimes(1);
  });
});