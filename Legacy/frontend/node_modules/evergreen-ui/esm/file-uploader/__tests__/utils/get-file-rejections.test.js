import { MimeType } from '../../../constants';
import { buildFiles, buildFile } from '../../../test/utils';
import getFileRejections from '../../src/utils/get-file-rejections';
describe('getFileRejections', function () {
  it.each([undefined, null, {}])('should return empty array when options is %p', function (options) {
    var files = buildFiles();
    var expected = [];
    var result = getFileRejections(files, options);
    expect(result).toStrictEqual(expected);
  });
  describe('options.acceptedMimeTypes', function () {
    it('should return empty array when empty', function () {
      var acceptedMimeTypes = [];
      var files = buildFiles(2, {
        type: MimeType.png
      });
      var expected = [];
      var result = getFileRejections(files, {
        acceptedMimeTypes: acceptedMimeTypes
      });
      expect(result).toStrictEqual(expected);
    });
    it('should not return files that match type', function () {
      var acceptedMimeTypes = [MimeType.png];
      var files = buildFiles(2, {
        type: MimeType.png
      });
      var expected = [];
      var result = getFileRejections(files, {
        acceptedMimeTypes: acceptedMimeTypes
      });
      expect(result).toStrictEqual(expected);
    });
    it('should return files that do not match type', function () {
      var acceptedMimeTypes = [MimeType.gif];
      var expected = [buildFile({
        type: MimeType.png
      })];
      var result = getFileRejections(expected, {
        acceptedMimeTypes: acceptedMimeTypes
      });
      expect(result).toHaveLength(expected.length);
    });
  });
  describe('options.maxFiles', function () {
    it('should return empty array when under maxFiles', function () {
      var maxFiles = 5;
      var files = buildFiles(maxFiles - 1);
      var expected = [];
      var result = getFileRejections(files, {
        maxFiles: maxFiles
      });
      expect(result).toStrictEqual(expected);
    });
    it('should return empty array when equal to maxFiles', function () {
      var maxFiles = 5;
      var files = buildFiles(maxFiles);
      var expected = [];
      var result = getFileRejections(files, {
        maxFiles: maxFiles
      });
      expect(result).toStrictEqual(expected);
    });
    it('should return empty array when maxFiles less than 1', function () {
      var maxFiles = 0;
      var files = buildFiles(maxFiles);
      var expected = [];
      var result = getFileRejections(files, {
        maxFiles: maxFiles
      });
      expect(result).toStrictEqual(expected);
    });
    it('should return last N files when over maxFiles', function () {
      var maxFiles = 5;
      var files = buildFiles(maxFiles + 3);
      var result = getFileRejections(files, {
        maxFiles: maxFiles
      });
      expect(result).toHaveLength(files.length - maxFiles);
    });
    describe('options.currentFileCount', function () {
      it('should return empty array when under maxFiles + currentFileCount', function () {
        var maxFiles = 5;
        var currentFileCount = 1;
        var files = buildFiles(maxFiles - currentFileCount - 1);
        var expected = [];
        var result = getFileRejections(files, {
          currentFileCount: currentFileCount,
          maxFiles: maxFiles
        });
        expect(result).toStrictEqual(expected);
      });
      it('should return empty array when equal to maxFiles + currentFileCount', function () {
        var maxFiles = 5;
        var currentFileCount = 1;
        var files = buildFiles(maxFiles - currentFileCount);
        var expected = [];
        var result = getFileRejections(files, {
          currentFileCount: currentFileCount,
          maxFiles: maxFiles
        });
        expect(result).toStrictEqual(expected);
      });
      it('should return empty array when currentFileCount less than 1', function () {
        var maxFiles = 5;
        var currentFileCount = -5;
        var files = buildFiles(maxFiles);
        var expected = [];
        var result = getFileRejections(files, {
          currentFileCount: currentFileCount,
          maxFiles: maxFiles
        });
        expect(result).toStrictEqual(expected);
      });
      it('should return last N files when over maxFiles + currentFileCount', function () {
        var maxFiles = 5;
        var currentFileCount = 1;
        var files = buildFiles(maxFiles + 3);
        var result = getFileRejections(files, {
          currentFileCount: currentFileCount,
          maxFiles: maxFiles
        });
        expect(result).toHaveLength(files.length + currentFileCount - maxFiles);
      });
    });
  });
  describe('options.maxSizeInBytes', function () {
    it('should return file greater than maxSizeInBytes', function () {
      var maxSizeInBytes = 10000;
      var files = [buildFile({
        size: maxSizeInBytes + 1
      })];
      var result = getFileRejections(files, {
        maxSizeInBytes: maxSizeInBytes
      });
      expect(result).toHaveLength(files.length);
    });
    it('should not return file equal to maxSizeInBytes', function () {
      var maxSizeInBytes = 10000;
      var files = [buildFile({
        size: maxSizeInBytes
      })];
      var expected = [];
      var result = getFileRejections(files, {
        maxSizeInBytes: maxSizeInBytes
      });
      expect(result).toStrictEqual(expected);
    });
    it('should not return file less than maxSizeInBytes', function () {
      var maxSizeInBytes = 10000;
      var files = [buildFile({
        size: maxSizeInBytes - 1
      })];
      var expected = [];
      var result = getFileRejections(files, {
        maxSizeInBytes: maxSizeInBytes
      });
      expect(result).toStrictEqual(expected);
    });
  });
});