import { MimeType } from '../../../constants';
import getFileDataTransferItems from '../../src/utils/get-file-data-transfer-items';
describe('getFileDataTransferItems', function () {
  var buildDataTransferItem = function buildDataTransferItem() {
    var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _values$kind = values.kind,
        kind = _values$kind === void 0 ? 'file' : _values$kind,
        _values$type = values.type,
        type = _values$type === void 0 ? MimeType.gif : _values$type;
    return {
      kind: kind,
      type: type
    };
  };

  it("should only return items of kind 'file'", function () {
    var expected = buildDataTransferItem({
      kind: 'file'
    });
    var unexpected = buildDataTransferItem({
      kind: 'string'
    });
    var result = getFileDataTransferItems([expected, unexpected]);
    expect(result).toContain(expected);
    expect(result).not.toContain(unexpected);
  });
  it('should return empty array when empty', function () {
    var expected = [];
    var result = getFileDataTransferItems(expected);
    expect(result).toStrictEqual(expected);
  });
  it('should always return new array', function () {
    var item = buildDataTransferItem();
    var itemList = [item];
    var result = getFileDataTransferItems(itemList); // Checking for referential equality

    expect(result).not.toBe(itemList);
  });
});