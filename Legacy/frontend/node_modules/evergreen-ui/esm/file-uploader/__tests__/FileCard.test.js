import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import { faker } from '@faker-js/faker';
import { render, screen } from '@testing-library/react';
import humanize from 'humanize-plus';
import { MimeType } from '../../constants';
import FileCard from '../src/FileCard';
var testId = 'test-file-card';
/**
 * Utility function for rendering the system under test with a props object + testing id
 * @param {import('../../..').FileCardProps} props
 */

var renderWithProps = function renderWithProps() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return render( /*#__PURE__*/React.createElement(FileCard, _extends({}, props, {
    "data-testid": testId
  })));
};

describe('FileCard', function () {
  describe('props', function () {
    describe('ref', function () {
      it('should forward ref', function () {
        var ref = jest.fn();
        renderWithProps({
          ref: ref
        });
        expect(ref).toHaveBeenCalled();
      });
    });
    describe('description', function () {
      it('should render description when non-empty', function () {
        var description = faker.random.words();
        renderWithProps({
          description: description
        });
        expect(screen.getByText(description)).toBeInTheDocument();
      });
    });
    describe('isInvalid', function () {
      it('should render InfoSignIcon when true', function () {
        renderWithProps({
          isInvalid: true
        });
        var fileCard = screen.getByTestId(testId);
        expect(fileCard.querySelector("[data-icon='info-sign']")).toBeInTheDocument();
      });
      it('should set aria-invalid true', function () {
        renderWithProps({
          isInvalid: true
        });
        var fileCard = screen.getByTestId(testId);
        expect(fileCard).toHaveAttribute('aria-invalid', true.toString());
      });
    });
    describe('isLoading', function () {
      it('should render <Spinner /> when true', function () {
        renderWithProps({
          isLoading: true
        });
        var fileCard = screen.getByTestId(testId);
        expect(fileCard.querySelector('circle')).toBeInTheDocument();
      });
      it.each([undefined, null, false])('should not render <Spinner /> when %p', function (isLoading) {
        renderWithProps({
          isLoading: isLoading
        });
        var fileCard = screen.getByTestId(testId);
        expect(fileCard.querySelector('circle')).not.toBeInTheDocument();
      });
    });
    describe('name', function () {
      it('should render name', function () {
        var name = faker.system.fileName();
        renderWithProps({
          name: name
        });
        expect(screen.getByText(name)).toBeInTheDocument();
      });
    });
    describe('onRemove', function () {
      describe('when onRemove is a function', function () {
        it('should render <IconButton /> with TrashIcon', function () {
          var onRemove = jest.fn();
          renderWithProps({
            onRemove: onRemove
          });
          var fileCard = screen.getByTestId(testId);
          expect(fileCard.querySelector("[data-icon='trash']")).toBeInTheDocument();
        });
        it('should render disabled <IconButton /> when isLoading = true', function () {
          var onRemove = jest.fn();
          renderWithProps({
            onRemove: onRemove,
            isLoading: true
          });
          var fileCard = screen.getByTestId(testId);
          var icon = fileCard.querySelector("[data-icon='trash']");
          var iconButton = fileCard.querySelector('button');
          expect(icon).toBeInTheDocument();
          expect(iconButton).toBeDisabled();
          expect(iconButton).toContainElement(icon);
        });
        it('should render disabled <IconButton /> when disabled = true', function () {
          var onRemove = jest.fn();
          renderWithProps({
            onRemove: onRemove,
            disabled: true
          });
          var fileCard = screen.getByTestId(testId);
          var icon = fileCard.querySelector("[data-icon='trash']");
          var iconButton = fileCard.querySelector('button');
          expect(icon).toBeInTheDocument();
          expect(iconButton).toBeDisabled();
          expect(iconButton).toContainElement(icon);
        });
      });
      it.each([undefined, null])('should not render <IconButton /> with TrashIcon when onRemove is %p', function (onRemove) {
        renderWithProps({
          onRemove: onRemove
        });
        var fileCard = screen.getByTestId(testId);
        expect(fileCard.querySelector("[data-icon='trash']")).not.toBeInTheDocument();
      });
    });
    describe('sizeInBytes', function () {
      it('should render humanized size', function () {
        var sizeInBytes = faker.datatype.number({
          min: 1024,
          max: 10 * 1024 * 1024
        });
        renderWithProps({
          sizeInBytes: sizeInBytes
        });
        expect(screen.getByText(humanize.fileSize(sizeInBytes, 0))).toBeInTheDocument();
      });
    });
    describe('src', function () {
      describe('when src is non-empty', function () {
        it.each([MimeType.css, MimeType.doc, MimeType.mp3, MimeType.mp4])('should not render <img /> when type is %p', function (type) {
          var src = faker.image.animals();
          renderWithProps({
            src: src,
            type: type
          });
          var fileCard = screen.getByTestId(testId);
          expect(fileCard.querySelector('img')).not.toBeInTheDocument();
        });
        it.each([MimeType.png, MimeType.gif, MimeType.jpeg])('should render <img /> when type is %p', function (type) {
          var src = faker.image.animals();
          renderWithProps({
            src: src,
            type: type
          });
          var fileCard = screen.getByTestId(testId);
          expect(fileCard.querySelector('img')).toBeInTheDocument();
        });
      });
      it.each([undefined, null, ''])('should not render <img /> when src is %p', function (src) {
        renderWithProps({
          src: src
        });
        var fileCard = screen.getByTestId(testId);
        expect(fileCard.querySelector('img')).not.toBeInTheDocument();
      });
    });
    describe('validationMessage', function () {
      it('should render validationMessage', function () {
        var validationMessage = faker.random.words();
        renderWithProps({
          validationMessage: validationMessage
        });
        expect(screen.getByText(validationMessage)).toBeInTheDocument();
      });
    });
  });
});