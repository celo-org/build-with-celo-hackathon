import React from 'react';
import { render } from '@testing-library/react';
import { LockIcon } from '../../icons';
import { defaultTheme } from '../../themes';
import { Text } from '../../typography/index';
import SmallExample from '../fixtures/SmallExample';
import SmallMinimalExample from '../fixtures/SmallMinimalExample';
import EmptyState from '../src/EmptyState';
describe('Empty States', function () {
  it('does not crash when rendering', function () {
    expect(function () {
      return render( /*#__PURE__*/React.createElement(EmptyState, {
        title: "My Empty States",
        icon: /*#__PURE__*/React.createElement(LockIcon, {
          color: defaultTheme.tokens.colors.gray500
        }),
        iconBgColor: defaultTheme.tokens.colors.gray200
      }));
    }).not.toThrowError();
  });
  it('should render an icon and a title', function () {
    var _render = render( /*#__PURE__*/React.createElement(EmptyState, {
      title: "My Empty States",
      icon: /*#__PURE__*/React.createElement(LockIcon, {
        color: defaultTheme.tokens.colors.gray500
      }),
      iconBgColor: defaultTheme.tokens.colors.gray200
    })),
        getByText = _render.getByText;

    expect(getByText('My Empty States')).toBeVisible();
  });
  it('should render decription when passed in', function () {
    var _render2 = render( /*#__PURE__*/React.createElement(EmptyState, {
      title: "My Empty States",
      icon: /*#__PURE__*/React.createElement(LockIcon, {
        color: defaultTheme.tokens.colors.gray500
      }),
      iconBgColor: defaultTheme.tokens.colors.gray200,
      description: "Some description"
    })),
        getByText = _render2.getByText;

    expect(getByText('Some description')).toBeVisible();
  });
  it('should render react component when react component is passed as a description prop', function () {
    var _render3 = render( /*#__PURE__*/React.createElement(EmptyState, {
      title: "My Empty States",
      icon: /*#__PURE__*/React.createElement(LockIcon, {
        color: defaultTheme.tokens.colors.gray500
      }),
      iconBgColor: defaultTheme.tokens.colors.gray200,
      description: /*#__PURE__*/React.createElement(Text, null, "Example Text")
    })),
        getByText = _render3.getByText;

    expect(getByText('Example Text')).toBeVisible();
  });
  it('should render primary button when passed in', function () {
    var _render4 = render( /*#__PURE__*/React.createElement(EmptyState, {
      title: "My Empty States",
      icon: /*#__PURE__*/React.createElement(LockIcon, {
        color: defaultTheme.tokens.colors.gray500
      }),
      iconBgColor: defaultTheme.tokens.colors.gray200,
      primaryCta: /*#__PURE__*/React.createElement(EmptyState.PrimaryButton, null, "Primary Action")
    })),
        getByRole = _render4.getByRole;

    expect(getByRole('button', {
      name: 'Primary Action'
    })).toBeVisible();
  });
  it('should render link button when passed in', function () {
    var _render5 = render( /*#__PURE__*/React.createElement(EmptyState, {
      title: "My Empty States",
      icon: /*#__PURE__*/React.createElement(LockIcon, {
        color: defaultTheme.tokens.colors.gray500
      }),
      iconBgColor: defaultTheme.tokens.colors.gray200,
      anchorCta: /*#__PURE__*/React.createElement(EmptyState.LinkButton, {
        href: "https://segment.com/docs/",
        target: "_blank"
      }, "Link to Documentation")
    })),
        getByRole = _render5.getByRole;

    expect(getByRole('link')).toBeVisible();
  }); // Small Minimal Example with just icon and title

  it('should render icon and title in minimal popup', function () {
    var _render6 = render( /*#__PURE__*/React.createElement(SmallMinimalExample, {
      popoverProps: {
        isShown: true,
        statelessProps: {
          'data-testid': 'empty-state-container'
        }
      }
    })),
        getByTestId = _render6.getByTestId;

    var container = getByTestId('empty-state-container');
    expect(container.querySelector('svg')).toBeVisible();
    expect(container.querySelector('svg')).toHaveAttribute('data-icon', 'hand-up');
  }); // Small Example

  it('should render icon, title, description, CTA in popup', function () {
    var _render7 = render( /*#__PURE__*/React.createElement(SmallExample, {
      popoverProps: {
        isShown: true,
        statelessProps: {
          'data-testid': 'empty-state-container'
        }
      }
    })),
        getAllByText = _render7.getAllByText,
        getByRole = _render7.getByRole,
        getByTestId = _render7.getByTestId;

    var container = getByTestId('empty-state-container');
    expect(getAllByText('You need permission to access these sources')).toHaveLength(1);
    expect(getAllByText('If you believe you should have accesss to this page, please check with your Workspace Owner or request access below.')).toHaveLength(1);
    expect(getByRole('button', {
      name: 'Request Access'
    })).toBeVisible();
    expect(container.querySelector('svg')).toBeVisible();
    expect(container.querySelector('svg')).toHaveAttribute('data-icon', 'lock');
  });
});