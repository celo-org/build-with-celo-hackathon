export * from '@chakra-ui/accordion';
export * from '@chakra-ui/alert';
export * from '@chakra-ui/avatar';
export * from '@chakra-ui/breadcrumb';
export * from '@chakra-ui/button';
export * from '@chakra-ui/checkbox';
export * from '@chakra-ui/close-button';
export * from '@chakra-ui/control-box';
export * from '@chakra-ui/counter';
export * from '@chakra-ui/css-reset';
export * from '@chakra-ui/editable';
export * from '@chakra-ui/form-control';
export * from '@chakra-ui/hooks';
export * from '@chakra-ui/icon';
export * from '@chakra-ui/image';
export * from '@chakra-ui/input';
export * from '@chakra-ui/layout';
export { GridProps, ListProps } from '@chakra-ui/layout';
export * from '@chakra-ui/media-query';
export * from '@chakra-ui/menu';
export * from '@chakra-ui/modal';
export * from '@chakra-ui/number-input';
export * from '@chakra-ui/pin-input';
export * from '@chakra-ui/popover';
export * from '@chakra-ui/popper';
export * from '@chakra-ui/portal';
export * from '@chakra-ui/progress';
export * from '@chakra-ui/radio';
export * from '@chakra-ui/react-env';
export * from '@chakra-ui/select';
export * from '@chakra-ui/skeleton';
export * from '@chakra-ui/slider';
export * from '@chakra-ui/spinner';
export * from '@chakra-ui/stat';
export * from '@chakra-ui/switch';
import { ThemingProps } from '@chakra-ui/system';
export * from '@chakra-ui/system';
export * from '@chakra-ui/table';
export * from '@chakra-ui/tabs';
export * from '@chakra-ui/tag';
export * from '@chakra-ui/textarea';
import { Theme, ChakraTheme, ComponentDefaultProps } from '@chakra-ui/theme';
export * from '@chakra-ui/theme';
import { ToastProviderProps } from '@chakra-ui/toast';
export * from '@chakra-ui/toast';
export * from '@chakra-ui/tooltip';
export * from '@chakra-ui/transition';
export * from '@chakra-ui/visually-hidden';
import { ChakraProviderProps as ChakraProviderProps$1 } from '@chakra-ui/provider';
import { Dict, AnyFunction } from '@chakra-ui/utils';

interface ChakraProviderProps extends ChakraProviderProps$1 {
    /**
     * Provide defaults for `useToast()` usages for `ChakraProvider`s children
     */
    toastOptions?: ToastProviderProps;
}
declare function ChakraProvider({ children, theme, toastOptions, ...restProps }: ChakraProviderProps): JSX.Element;

declare type CloneKey<Target, Key> = Key extends keyof Target ? Target[Key] : unknown;
declare type DeepPartial<T> = {
    [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};
/**
 * Represents a loose but specific type for the theme override.
 * It provides autocomplete hints for extending the theme, but leaves room
 * for adding properties.
 */
declare type DeepThemeExtension<BaseTheme, ThemeType> = {
    [Key in keyof BaseTheme]?: BaseTheme[Key] extends (...args: any[]) => any ? DeepThemeExtension<DeepPartial<ReturnType<BaseTheme[Key]>>, CloneKey<ThemeType, Key>> : BaseTheme[Key] extends Array<any> ? CloneKey<ThemeType, Key> : BaseTheme[Key] extends object ? DeepThemeExtension<DeepPartial<BaseTheme[Key]>, CloneKey<ThemeType, Key>> : CloneKey<ThemeType, Key>;
};
declare type ThemeOverride<BaseTheme = Theme> = DeepPartial<ChakraTheme> & DeepThemeExtension<BaseTheme, ChakraTheme> & Dict;
declare type ThemeExtension<Override extends ThemeOverride = ThemeOverride> = (themeOverride: Override) => Override;
declare type BaseThemeWithExtensions<BaseTheme extends ChakraTheme, Extensions extends readonly [...any]> = BaseTheme & (Extensions extends [infer L, ...infer R] ? L extends AnyFunction ? ReturnType<L> & BaseThemeWithExtensions<BaseTheme, R> : L & BaseThemeWithExtensions<BaseTheme, R> : Extensions);
/**
 * NOTE: This got too complex to manage, and it's not worth the extra complexity.
 * We'll re-evaluate this API in the future releases.
 *
 * Function to override or customize the Chakra UI theme conveniently.
 * First extension overrides the baseTheme and following extensions override the preceding extensions.
 *
 * @example:
 * import { theme as baseTheme, extendTheme, withDefaultColorScheme } from '@chakra-ui/react'
 *
 * const customTheme = extendTheme(
 *   {
 *     colors: {
 *       brand: {
 *         500: "#b4d455",
 *       },
 *     },
 *   },
 *   withDefaultColorScheme({ colorScheme: "red" }),
 *   baseTheme // optional
 * )
 */
declare function extendTheme(...extensions: Array<Dict | ((theme: Dict) => Dict)>): Dict;
declare function mergeThemeOverride(...overrides: any[]): any;

declare function withDefaultColorScheme({ colorScheme, components, }: {
    colorScheme: ThemingProps["colorScheme"];
    components?: string[] | Dict;
}): ThemeExtension;

declare function withDefaultSize({ size, components, }: {
    size: ThemingProps["size"];
    components?: string[] | Dict;
}): ThemeExtension;

declare function withDefaultVariant({ variant, components, }: {
    variant: ThemingProps["variant"];
    components?: string[] | Dict;
}): ThemeExtension;

declare function withDefaultProps({ defaultProps: { colorScheme, variant, size }, components, }: {
    defaultProps: ComponentDefaultProps;
    components?: string[] | Dict;
}): (theme: Dict) => any;

export { BaseThemeWithExtensions, ChakraProvider, ChakraProviderProps, DeepPartial, ThemeExtension, ThemeOverride, extendTheme, mergeThemeOverride, withDefaultColorScheme, withDefaultProps, withDefaultSize, withDefaultVariant };
